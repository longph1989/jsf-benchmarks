package rbt;

import rbt.TreeMap.Entry;
import common.Utilities;
import org.junit.Test;
import gov.nasa.jpf.util.test.TestJPF;

public class TreeMap_remove1 extends TestJPF {

	@Test
	public void test_remove1() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_166 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry parent_177 = right_16;
		Entry left_175 = null;
		Entry left_300 = left_3;
		Entry right_302 = right_16;
		Entry right_305 = right_166;
		Entry left_165 = null;
		Entry right_176 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		obj.size = 6;
		int key_173 = 1;
		int key_306 = 1;
		boolean color_6 = true;
		int key = 0;
		int key_457 = 3;
		int key_307 = 2;
		int key_303 = -2;
		boolean color_461 = true;
		boolean color_178 = false;
		int key_304 = -1;
		int key_472 = -3;
		boolean color_476 = true;
		int key_163 = -1;
		boolean color_18 = false;
		int key_1 = 2;
		int key_13 = -2;
		int key_301 = -2;
		boolean color_168 = true;
		int key_299 = 2;
		Object value_164 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_174 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_166.key = key_173;
		right_166.value = value_174;
		right_166.left = left_175;
		right_166.right = right_176;
		right_166.parent = parent_177;
		right_166.color = color_178;
		right_4.key = key_457;
		right_4.value = value_462;
		right_4.left = left_460;
		right_4.right = right_458;
		right_4.parent = obj.root;
		right_4.color = color_461;
		left_15.key = key_472;
		left_15.value = value_477;
		left_15.left = left_475;
		left_15.right = right_473;
		left_15.parent = left_300;
		left_15.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove2() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry parent_57 = left_3;
		Entry left_15 = null;
		Entry left_55 = null;
		Entry right_56 = null;
		obj.size = 4;
		boolean color_58 = false;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_23 = 0;
		int key_1 = -1;
		int key_13 = -3;
		int key_53 = -2;
		boolean color_28 = true;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_54 = null;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		obj.remove(key);
	}

	@Test
	public void test_remove3() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_47 = right_4;
		Entry left_45 = null;
		Entry right_300 = right_4;
		Entry right_303 = right_26;
		Entry left_25 = null;
		Entry right_46 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = 2;
		boolean color_6 = true;
		boolean color_48 = false;
		int key = 1;
		int key_43 = 2;
		int key_23 = 0;
		int key_1 = -1;
		int key_301 = -1;
		int key_302 = 0;
		int key_418 = -2;
		boolean color_28 = true;
		int key_299 = -1;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_3.key = key_418;
		left_3.value = value_423;
		left_3.left = left_421;
		left_3.right = right_419;
		left_3.parent = obj.root;
		left_3.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test_remove4() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry right_300 = right_4;
		Entry right_26 = null;
		Entry left_417 = null;
		Entry right_415 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_33 = -1;
		int key = -1;
		boolean color_38 = false;
		int key_414 = -3;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = 0;
		boolean color_28 = true;
		boolean color_418 = true;
		int key_299 = -2;
		obj.modCount = 0;
		Object value_34 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_419 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_3.key = key_414;
		left_3.value = value_419;
		left_3.left = left_417;
		left_3.right = right_415;
		left_3.parent = obj.root;
		left_3.color = color_418;
		obj.remove(key);
	}

	@Test
	public void test_remove5() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry right_326 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry right_166 = null;
		Entry parent_327 = left_3;
		Entry parent_337 = left_15;
		Entry parent_347 = left_15;
		Entry parent_27 = obj.root;
		Entry right_299 = right_326;
		Entry right_302 = right_326;
		Entry left_305 = left_325;
		Entry left_307 = left_325;
		Entry right_310 = right_4;
		Entry right_313 = right_4;
		Entry left_335 = null;
		Entry right_336 = null;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_25 = null;
		Entry right_26 = null;
		int key_311 = 2;
		obj.size = 7;
		int key_309 = -2;
		int key_306 = -3;
		boolean color_6 = true;
		boolean color_338 = false;
		int key = 1;
		int key_343 = -3;
		int key_303 = -1;
		int key_312 = 3;
		boolean color_28 = true;
		int key_304 = 0;
		int key_300 = -2;
		int key_163 = 1;
		int key_323 = -2;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		int key_23 = 3;
		int key_301 = -1;
		int key_308 = -3;
		boolean color_168 = true;
		int key_314 = 3;
		int key_333 = -1;
		Object value_164 = null;
		Object value_324 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_344 = null;
		obj.modCount = 0;
		Object value_334 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_326.key = key_333;
		right_326.value = value_334;
		right_326.left = left_335;
		right_326.right = right_336;
		right_326.parent = parent_337;
		right_326.color = color_338;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test_remove6() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry left_225 = new Entry();
		Entry right_226 = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry parent_227 = right_4;
		Entry parent_257 = right_26;
		Entry parent_267 = right_26;
		Entry parent_17 = obj.root;
		Entry left_299 = left_225;
		Entry left_302 = left_225;
		Entry right_305 = right_226;
		Entry right_308 = right_226;
		Entry left_310 = left_3;
		Entry left_312 = left_3;
		Entry left_255 = null;
		Entry right_256 = null;
		Entry left_265 = null;
		Entry right_266 = null;
		Entry left_611 = null;
		Entry right_609 = null;
		Entry left_619 = null;
		Entry right_617 = null;
		int key_223 = 2;
		obj.size = 9;
		int key_309 = 3;
		int key_306 = 2;
		int key_311 = -4;
		boolean color_268 = false;
		boolean color_6 = true;
		int key_313 = -4;
		int key = -1;
		int key_263 = 3;
		boolean color_620 = true;
		boolean color_228 = true;
		int key_307 = 3;
		int key_303 = 1;
		boolean color_28 = false;
		boolean color_218 = true;
		boolean color_258 = false;
		int key_213 = -1;
		int key_304 = 2;
		int key_608 = -5;
		int key_300 = 0;
		boolean color_18 = false;
		int key_1 = -2;
		int key_23 = 0;
		boolean color_612 = true;
		int key_13 = -4;
		int key_301 = 1;
		int key_253 = 1;
		int key_616 = -3;
		int key_314 = -2;
		Object value_24 = null;
		Object value_2 = null;
		Object value_264 = null;
		Object value_14 = null;
		Object value_224 = null;
		Object value_621 = null;
		obj.modCount = 0;
		Object value_254 = null;
		Object value_214 = null;
		Object value_613 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_225.key = key_253;
		left_225.value = value_254;
		left_225.left = left_255;
		left_225.right = right_256;
		left_225.parent = parent_257;
		left_225.color = color_258;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_608;
		left_15.value = value_613;
		left_15.left = left_611;
		left_15.right = right_609;
		left_15.parent = left_310;
		left_15.color = color_612;
		right_16.key = key_616;
		right_16.value = value_621;
		right_16.left = left_619;
		right_16.right = right_617;
		right_16.parent = left_312;
		right_16.color = color_620;
		obj.remove(key);
	}

	@Test
	public void test_remove7() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry right_166 = null;
		Entry left_165 = null;
		Entry left_299 = left_3;
		Entry left_455 = null;
		Entry right_453 = null;
		obj.size = 5;
		boolean color_6 = true;
		int key_300 = -2;
		int key = 1;
		int key_452 = -3;
		int key_163 = -1;
		boolean color_18 = false;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -2;
		boolean color_456 = true;
		boolean color_28 = true;
		boolean color_168 = true;
		Object value_164 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_457 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_15.key = key_452;
		left_15.value = value_457;
		left_15.left = left_455;
		left_15.right = right_453;
		left_15.parent = left_299;
		left_15.color = color_456;
		obj.remove(key);
	}

	@Test
	public void test_remove8() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_167 = left_3;
		Entry right_166 = null;
		Entry left_165 = null;
		Entry left_299 = left_3;
		Entry left_452 = null;
		Entry right_450 = null;
		obj.size = 5;
		boolean color_6 = true;
		int key_300 = 0;
		int key = 2;
		int key_163 = 1;
		int key_449 = -1;
		boolean color_18 = false;
		int key_23 = 3;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_28 = true;
		boolean color_453 = true;
		boolean color_168 = true;
		Object value_164 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_454 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_15.key = key_449;
		left_15.value = value_454;
		left_15.left = left_452;
		left_15.right = right_450;
		left_15.parent = left_299;
		left_15.color = color_453;
		obj.remove(key);
	}

	@Test
	public void test_remove9() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_326 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_337 = left_15;
		Entry right_336 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_15;
		Entry right_305 = right_326;
		Entry left_325 = null;
		Entry left_335 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		obj.size = 6;
		int key_306 = -3;
		boolean color_6 = true;
		boolean color_338 = false;
		int key = -1;
		int key_457 = 3;
		int key_307 = -2;
		boolean color_461 = true;
		int key_302 = 2;
		int key_304 = -3;
		int key_472 = 1;
		boolean color_476 = true;
		int key_323 = -3;
		boolean color_18 = false;
		int key_1 = 2;
		int key_13 = 0;
		int key_301 = 0;
		boolean color_328 = true;
		int key_333 = -2;
		int key_299 = 2;
		Object value_324 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_334 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_326.key = key_333;
		right_326.value = value_334;
		right_326.left = left_335;
		right_326.right = right_336;
		right_326.parent = parent_337;
		right_326.color = color_338;
		right_4.key = key_457;
		right_4.value = value_462;
		right_4.left = left_460;
		right_4.right = right_458;
		right_4.parent = obj.root;
		right_4.color = color_461;
		right_16.key = key_472;
		right_16.value = value_477;
		right_16.left = left_475;
		right_16.right = right_473;
		right_16.parent = left_300;
		right_16.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove10() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry right_26 = null;
		Entry right_300 = right_4;
		Entry left_25 = null;
		Entry left_385 = null;
		Entry right_383 = null;
		boolean color_386 = true;
		obj.size = 3;
		boolean color_6 = true;
		int key = 0;
		int key_23 = -1;
		int key_1 = -2;
		int key_301 = -2;
		int key_382 = -3;
		int key_302 = -1;
		boolean color_28 = true;
		int key_299 = -2;
		Object value_387 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_382;
		left_3.value = value_387;
		left_3.left = left_385;
		left_3.right = right_383;
		left_3.parent = obj.root;
		left_3.color = color_386;
		obj.remove(key);
	}

	@Test
	public void test_remove11() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_347 = left_15;
		Entry right_346 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_15;
		Entry left_306 = left_325;
		Entry right_326 = null;
		Entry left_345 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		int key_299 = 4;
		obj.size = 6;
		boolean color_6 = true;
		int key = 0;
		int key_343 = -1;
		int key_457 = 5;
		int key_307 = -1;
		boolean color_461 = true;
		int key_302 = 4;
		int key_305 = 2;
		int key_304 = 1;
		int key_472 = 3;
		boolean color_476 = true;
		int key_323 = 1;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 4;
		int key_13 = 2;
		boolean color_328 = true;
		int key_301 = 2;
		Object value_324 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		Object value_14 = null;
		Object value_344 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_457;
		right_4.value = value_462;
		right_4.left = left_460;
		right_4.right = right_458;
		right_4.parent = obj.root;
		right_4.color = color_461;
		right_16.key = key_472;
		right_16.value = value_477;
		right_16.left = left_475;
		right_16.right = right_473;
		right_16.parent = left_300;
		right_16.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove12() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_326 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_337 = left_15;
		Entry left_335 = null;
		Entry right_336 = null;
		Entry left_325 = null;
		Entry left_300 = left_3;
		Entry left_454 = null;
		Entry right_452 = null;
		Entry left_469 = null;
		Entry right_467 = null;
		int key_299 = 2;
		int key_466 = 1;
		obj.size = 6;
		boolean color_6 = true;
		boolean color_338 = false;
		int key = -1;
		int key_302 = 2;
		int key_451 = 3;
		int key_323 = -2;
		boolean color_18 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		boolean color_470 = true;
		int key_301 = 0;
		int key_333 = -1;
		boolean color_455 = true;
		Object value_14 = null;
		Object value_324 = null;
		obj.modCount = 0;
		Object value_471 = null;
		Object value_334 = null;
		Object value_456 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_326.key = key_333;
		right_326.value = value_334;
		right_326.left = left_335;
		right_326.right = right_336;
		right_326.parent = parent_337;
		right_326.color = color_338;
		right_4.key = key_451;
		right_4.value = value_456;
		right_4.left = left_454;
		right_4.right = right_452;
		right_4.parent = obj.root;
		right_4.color = color_455;
		right_16.key = key_466;
		right_16.value = value_471;
		right_16.left = left_469;
		right_16.right = right_467;
		right_16.parent = left_300;
		right_16.color = color_470;
		obj.remove(key);
	}

	@Test
	public void test_remove13() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry right_166 = null;
		Entry right_326 = null;
		Entry parent_347 = left_15;
		Entry parent_27 = obj.root;
		Entry left_299 = left_325;
		Entry left_301 = left_325;
		Entry right_304 = right_4;
		Entry right_307 = right_4;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_553 = null;
		Entry right_551 = null;
		Entry left_561 = null;
		Entry right_559 = null;
		obj.size = 8;
		int key_306 = 4;
		boolean color_6 = true;
		boolean color_554 = true;
		int key = 0;
		int key_343 = -2;
		int key_303 = -1;
		int key_302 = -2;
		boolean color_28 = false;
		int key_305 = 2;
		int key_550 = 3;
		int key_300 = -2;
		int key_558 = 5;
		int key_163 = 1;
		int key_323 = -1;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		int key_23 = 4;
		boolean color_562 = true;
		int key_308 = 4;
		boolean color_168 = true;
		Object value_164 = null;
		Object value_563 = null;
		Object value_324 = null;
		Object value_24 = null;
		Object value_555 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_344 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_550;
		left_25.value = value_555;
		left_25.left = left_553;
		left_25.right = right_551;
		left_25.parent = right_304;
		left_25.color = color_554;
		right_26.key = key_558;
		right_26.value = value_563;
		right_26.left = left_561;
		right_26.right = right_559;
		right_26.parent = right_307;
		right_26.color = color_562;
		obj.remove(key);
	}

	@Test
	public void test_remove14() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry right_36 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_25;
		Entry right_26 = null;
		Entry left_35 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		int key_299 = -3;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = -2;
		boolean color_6 = true;
		int key_33 = -2;
		int key = -1;
		boolean color_38 = false;
		int key_23 = 0;
		int key_1 = -3;
		int key_301 = 0;
		int key_303 = -3;
		int key_418 = -4;
		boolean color_28 = true;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_34 = null;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_3.key = key_418;
		left_3.value = value_423;
		left_3.left = left_421;
		left_3.right = right_419;
		left_3.parent = obj.root;
		left_3.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test_remove15() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_165 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry parent_187 = right_16;
		Entry right_166 = null;
		Entry parent_327 = left_3;
		Entry left_300 = left_165;
		Entry left_303 = left_165;
		Entry left_306 = left_15;
		Entry left_308 = left_15;
		Entry left_185 = null;
		Entry right_186 = null;
		Entry left_325 = null;
		Entry right_326 = null;
		Entry left_502 = null;
		Entry right_500 = null;
		int key_499 = 4;
		obj.size = 6;
		int key_309 = -1;
		int key_310 = 0;
		boolean color_6 = true;
		int key = 2;
		boolean color_188 = false;
		int key_307 = -1;
		int key_302 = 1;
		int key_305 = 2;
		boolean color_503 = true;
		int key_304 = 1;
		int key_183 = 1;
		int key_163 = 2;
		int key_323 = -1;
		boolean color_18 = false;
		int key_1 = 3;
		int key_13 = 0;
		int key_301 = 0;
		boolean color_328 = true;
		boolean color_168 = true;
		int key_299 = 3;
		Object value_164 = null;
		Object value_324 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_504 = null;
		obj.modCount = 0;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_4.key = key_499;
		right_4.value = value_504;
		right_4.left = left_502;
		right_4.right = right_500;
		right_4.parent = obj.root;
		right_4.color = color_503;
		obj.remove(key);
	}

	@Test
	public void test_remove16() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry left_165 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_167 = left_3;
		Entry right_166 = null;
		Entry parent_187 = right_16;
		Entry left_299 = left_3;
		Entry left_301 = left_165;
		Entry left_304 = left_165;
		Entry left_185 = null;
		Entry right_186 = null;
		Entry left_499 = null;
		Entry right_497 = null;
		int key_496 = -1;
		obj.size = 6;
		int key_306 = 2;
		boolean color_6 = true;
		int key = 3;
		boolean color_188 = false;
		int key_303 = 1;
		int key_302 = 0;
		boolean color_28 = true;
		int key_305 = 1;
		int key_183 = 1;
		boolean color_500 = true;
		int key_300 = 0;
		int key_163 = 2;
		boolean color_18 = false;
		int key_23 = 4;
		int key_1 = 3;
		int key_13 = 0;
		boolean color_168 = true;
		Object value_164 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_501 = null;
		obj.modCount = 0;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		left_15.key = key_496;
		left_15.value = value_501;
		left_15.left = left_499;
		left_15.right = right_497;
		left_15.parent = left_299;
		left_15.color = color_500;
		obj.remove(key);
	}

	@Test
	public void test_remove17() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry right_26 = null;
		Entry right_36 = null;
		Entry left_35 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_33 = 1;
		int key = -1;
		boolean color_38 = false;
		boolean color_18 = true;
		int key_23 = 2;
		int key_1 = 0;
		int key_13 = -1;
		boolean color_28 = true;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_34 = null;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		obj.remove(key);
	}

	@Test
	public void test_remove18() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry right_226 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry parent_267 = right_26;
		Entry parent_17 = obj.root;
		Entry right_299 = right_226;
		Entry right_302 = right_226;
		Entry left_304 = left_3;
		Entry left_306 = left_3;
		Entry left_265 = null;
		Entry right_266 = null;
		Entry left_15 = null;
		Entry right_16 = null;
		int key_223 = 1;
		obj.size = 6;
		boolean color_268 = false;
		boolean color_6 = true;
		int key = -1;
		int key_263 = 2;
		boolean color_228 = true;
		int key_307 = -3;
		int key_303 = 2;
		boolean color_28 = false;
		int key_305 = -3;
		boolean color_218 = true;
		int key_213 = -1;
		int key_300 = 1;
		boolean color_18 = true;
		int key_1 = -2;
		int key_23 = 0;
		int key_13 = -3;
		int key_301 = 2;
		int key_308 = -2;
		Object value_24 = null;
		Object value_2 = null;
		Object value_264 = null;
		Object value_14 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test_remove19() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_47 = right_4;
		Entry left_45 = null;
		Entry right_46 = null;
		Entry parent_37 = right_4;
		Entry left_300 = left_25;
		Entry left_303 = left_25;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry left_458 = null;
		Entry right_456 = null;
		obj.size = 5;
		boolean color_6 = true;
		int key = 1;
		int key_43 = 1;
		int key_302 = -1;
		boolean color_28 = true;
		int key_305 = 0;
		int key_455 = -3;
		boolean color_459 = true;
		int key_304 = -1;
		int key_33 = -1;
		boolean color_48 = false;
		boolean color_38 = false;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_299 = -2;
		Object value_460 = null;
		obj.modCount = 0;
		Object value_34 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_3.key = key_455;
		left_3.value = value_460;
		left_3.left = left_458;
		left_3.right = right_456;
		left_3.parent = obj.root;
		left_3.color = color_459;
		obj.remove(key);
	}

	@Test
	public void test_remove20() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry right_326 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry right_166 = null;
		Entry parent_327 = left_3;
		Entry parent_337 = left_15;
		Entry parent_347 = left_15;
		Entry parent_27 = obj.root;
		Entry right_299 = right_326;
		Entry right_302 = right_326;
		Entry left_305 = left_325;
		Entry left_307 = left_325;
		Entry right_310 = right_4;
		Entry right_313 = right_4;
		Entry left_335 = null;
		Entry right_336 = null;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_615 = null;
		Entry right_613 = null;
		Entry left_623 = null;
		Entry right_621 = null;
		int key_311 = 2;
		obj.size = 9;
		int key_309 = -2;
		int key_306 = -3;
		boolean color_6 = true;
		boolean color_338 = false;
		int key_612 = 3;
		int key = 1;
		int key_343 = -3;
		int key_303 = -1;
		int key_312 = 4;
		boolean color_616 = true;
		boolean color_28 = false;
		int key_620 = 5;
		int key_304 = 0;
		int key_300 = -2;
		int key_163 = 1;
		int key_323 = -2;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		boolean color_624 = true;
		int key_23 = 4;
		int key_301 = -1;
		int key_308 = -3;
		boolean color_168 = true;
		int key_314 = 4;
		int key_333 = -1;
		Object value_164 = null;
		Object value_324 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_344 = null;
		Object value_625 = null;
		obj.modCount = 0;
		Object value_334 = null;
		Object value_617 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_326.key = key_333;
		right_326.value = value_334;
		right_326.left = left_335;
		right_326.right = right_336;
		right_326.parent = parent_337;
		right_326.color = color_338;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_612;
		left_25.value = value_617;
		left_25.left = left_615;
		left_25.right = right_613;
		left_25.parent = right_310;
		left_25.color = color_616;
		right_26.key = key_620;
		right_26.value = value_625;
		right_26.left = left_623;
		right_26.right = right_621;
		right_26.parent = right_313;
		right_26.color = color_624;
		obj.remove(key);
	}

	@Test
	public void test_remove21() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry right_16 = null;
		Entry left_300 = left_3;
		Entry right_4 = null;
		Entry left_15 = null;
		obj.size = 2;
		boolean color_18 = false;
		int key_1 = 1;
		int key_13 = -1;
		boolean color_6 = true;
		int key_301 = -1;
		int key = 0;
		int key_299 = 1;
		Object value_14 = null;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test_remove22() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry parent_5 = null;
		Entry left_3 = null;
		Entry right_4 = null;
		boolean color_6 = true;
		obj.size = 1;
		int key = 0;
		int key_1 = 0;
		obj.modCount = 0;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		obj.remove(key);
	}

	@Test
	public void test_remove23() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry parent_47 = right_4;
		Entry left_299 = left_25;
		Entry left_302 = left_25;
		Entry right_305 = right_26;
		Entry right_308 = right_26;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry left_45 = null;
		Entry right_46 = null;
		obj.size = 5;
		int key_309 = 1;
		int key_306 = 0;
		boolean color_6 = true;
		int key = -3;
		int key_43 = 1;
		int key_307 = 1;
		int key_303 = -1;
		boolean color_28 = true;
		int key_304 = 0;
		int key_33 = -1;
		int key_300 = -2;
		boolean color_48 = false;
		boolean color_38 = false;
		boolean color_18 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_13 = -3;
		int key_301 = -1;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_34 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		obj.remove(key);
	}

	@Test
	public void test_remove24() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_326 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_337 = left_15;
		Entry left_335 = null;
		Entry right_336 = null;
		Entry parent_347 = left_15;
		Entry left_300 = left_3;
		Entry left_303 = left_325;
		Entry left_305 = left_325;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_494 = null;
		Entry right_492 = null;
		Entry left_509 = null;
		Entry right_507 = null;
		int key_299 = 2;
		boolean color_510 = true;
		obj.size = 7;
		int key_306 = -3;
		boolean color_6 = true;
		boolean color_338 = false;
		int key_491 = 3;
		int key = -1;
		int key_343 = -3;
		int key_307 = -2;
		int key_302 = 2;
		int key_304 = -3;
		boolean color_495 = true;
		int key_323 = -2;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		int key_301 = 0;
		int key_506 = 1;
		int key_333 = -1;
		Object value_324 = null;
		Object value_511 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_344 = null;
		obj.modCount = 0;
		Object value_496 = null;
		Object value_334 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_326.key = key_333;
		right_326.value = value_334;
		right_326.left = left_335;
		right_326.right = right_336;
		right_326.parent = parent_337;
		right_326.color = color_338;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_491;
		right_4.value = value_496;
		right_4.left = left_494;
		right_4.right = right_492;
		right_4.parent = obj.root;
		right_4.color = color_495;
		right_16.key = key_506;
		right_16.value = value_511;
		right_16.left = left_509;
		right_16.right = right_507;
		right_16.parent = left_300;
		right_16.color = color_510;
		obj.remove(key);
	}

	@Test
	public void test_remove25() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_225 = new Entry();
		Entry left_3 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry parent_257 = right_26;
		Entry right_256 = null;
		Entry right_300 = right_4;
		Entry right_303 = right_26;
		Entry left_305 = left_225;
		Entry right_226 = null;
		Entry left_255 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		int key_223 = 1;
		obj.size = 6;
		int key_306 = -2;
		boolean color_6 = true;
		int key = 0;
		boolean color_228 = true;
		int key_457 = -5;
		int key_307 = -1;
		boolean color_461 = true;
		int key_302 = -2;
		boolean color_28 = false;
		boolean color_258 = false;
		int key_304 = 1;
		int key_472 = -3;
		boolean color_476 = true;
		int key_23 = -2;
		int key_1 = -4;
		int key_301 = -4;
		int key_253 = -1;
		int key_299 = -4;
		Object value_24 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_254 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_225.key = key_253;
		left_225.value = value_254;
		left_225.left = left_255;
		left_225.right = right_256;
		left_225.parent = parent_257;
		left_225.color = color_258;
		left_3.key = key_457;
		left_3.value = value_462;
		left_3.left = left_460;
		left_3.right = right_458;
		left_3.parent = obj.root;
		left_3.color = color_461;
		left_25.key = key_472;
		left_25.value = value_477;
		left_25.left = left_475;
		left_25.right = right_473;
		left_25.parent = right_300;
		left_25.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove26() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_165 = new Entry();
		Entry right_166 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry parent_187 = right_16;
		Entry parent_177 = right_16;
		Entry left_175 = null;
		Entry right_176 = null;
		Entry left_300 = left_3;
		Entry left_302 = left_165;
		Entry left_305 = left_165;
		Entry left_185 = null;
		Entry right_186 = null;
		Entry left_491 = null;
		Entry right_489 = null;
		Entry left_506 = null;
		Entry right_504 = null;
		obj.size = 7;
		int key_173 = -1;
		int key_306 = -3;
		boolean color_6 = true;
		boolean color_492 = true;
		int key = -2;
		boolean color_188 = false;
		int key_307 = -2;
		int key_503 = -5;
		int key_303 = -4;
		boolean color_178 = false;
		boolean color_507 = true;
		int key_304 = -3;
		int key_183 = -3;
		int key_163 = -2;
		boolean color_18 = false;
		int key_1 = 0;
		int key_13 = -4;
		int key_301 = -4;
		int key_488 = 1;
		boolean color_168 = true;
		int key_299 = 0;
		Object value_164 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_508 = null;
		obj.modCount = 0;
		Object value_174 = null;
		Object value_493 = null;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		right_166.key = key_173;
		right_166.value = value_174;
		right_166.left = left_175;
		right_166.right = right_176;
		right_166.parent = parent_177;
		right_166.color = color_178;
		right_4.key = key_488;
		right_4.value = value_493;
		right_4.left = left_491;
		right_4.right = right_489;
		right_4.parent = obj.root;
		right_4.color = color_492;
		left_15.key = key_503;
		left_15.value = value_508;
		left_15.left = left_506;
		left_15.right = right_504;
		left_15.parent = left_300;
		left_15.color = color_507;
		obj.remove(key);
	}

	@Test
	public void test_remove27() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_215 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_237 = left_25;
		Entry left_235 = null;
		Entry right_236 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_25;
		Entry right_216 = null;
		Entry left_456 = null;
		Entry right_454 = null;
		Entry left_471 = null;
		Entry right_469 = null;
		obj.size = 6;
		boolean color_6 = true;
		int key = -2;
		int key_453 = -4;
		int key_468 = 1;
		boolean color_238 = false;
		int key_303 = -1;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_233 = -2;
		boolean color_457 = true;
		int key_213 = -1;
		int key_304 = 0;
		int key_23 = 0;
		int key_1 = -3;
		int key_301 = 0;
		boolean color_472 = true;
		int key_299 = -3;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_473 = null;
		Object value_234 = null;
		Object value_214 = null;
		Object value_458 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_215.key = key_233;
		left_215.value = value_234;
		left_215.left = left_235;
		left_215.right = right_236;
		left_215.parent = parent_237;
		left_215.color = color_238;
		left_3.key = key_453;
		left_3.value = value_458;
		left_3.left = left_456;
		left_3.right = right_454;
		left_3.parent = obj.root;
		left_3.color = color_457;
		right_26.key = key_468;
		right_26.value = value_473;
		right_26.left = left_471;
		right_26.right = right_469;
		right_26.parent = right_300;
		right_26.color = color_472;
		obj.remove(key);
	}

	@Test
	public void test_remove28() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry right_166 = new Entry();
		Entry left_165 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_167 = left_3;
		Entry parent_177 = right_16;
		Entry parent_187 = right_16;
		Entry left_299 = left_3;
		Entry right_301 = right_166;
		Entry right_304 = right_166;
		Entry left_307 = left_165;
		Entry left_310 = left_165;
		Entry left_175 = null;
		Entry right_176 = null;
		Entry left_185 = null;
		Entry right_186 = null;
		Entry left_542 = null;
		Entry right_540 = null;
		int key_311 = 1;
		obj.size = 7;
		int key_173 = 3;
		int key_309 = 1;
		int key_306 = 4;
		boolean color_6 = true;
		int key = 4;
		boolean color_188 = false;
		int key_312 = 2;
		int key_303 = 3;
		boolean color_178 = false;
		int key_302 = 2;
		boolean color_28 = true;
		int key_305 = 3;
		int key_539 = -1;
		int key_183 = 1;
		int key_300 = 0;
		int key_163 = 2;
		boolean color_543 = true;
		boolean color_18 = false;
		int key_1 = 4;
		int key_13 = 0;
		int key_23 = 5;
		int key_308 = 0;
		boolean color_168 = true;
		Object value_164 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_544 = null;
		obj.modCount = 0;
		Object value_174 = null;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_166.key = key_173;
		right_166.value = value_174;
		right_166.left = left_175;
		right_166.right = right_176;
		right_166.parent = parent_177;
		right_166.color = color_178;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		left_15.key = key_539;
		left_15.value = value_544;
		left_15.left = left_542;
		left_15.right = right_540;
		left_15.parent = left_299;
		left_15.color = color_543;
		obj.remove(key);
	}

	@Test
	public void test_remove29() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_165 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry parent_187 = right_16;
		Entry left_185 = null;
		Entry right_186 = null;
		Entry left_300 = left_3;
		Entry right_302 = right_16;
		Entry right_166 = null;
		Entry left_456 = null;
		Entry right_454 = null;
		Entry left_471 = null;
		Entry right_469 = null;
		obj.size = 6;
		boolean color_6 = true;
		int key = 1;
		int key_453 = 4;
		boolean color_188 = false;
		int key_468 = -1;
		int key_303 = 2;
		boolean color_457 = true;
		int key_304 = 3;
		int key_183 = 1;
		int key_163 = 2;
		boolean color_18 = false;
		int key_1 = 3;
		int key_13 = 0;
		int key_301 = 0;
		boolean color_168 = true;
		boolean color_472 = true;
		int key_299 = 3;
		Object value_164 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_473 = null;
		Object value_458 = null;
		Object value_2 = null;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		right_4.key = key_453;
		right_4.value = value_458;
		right_4.left = left_456;
		right_4.right = right_454;
		right_4.parent = obj.root;
		right_4.color = color_457;
		left_15.key = key_468;
		left_15.value = value_473;
		left_15.left = left_471;
		left_15.right = right_469;
		left_15.parent = left_300;
		left_15.color = color_472;
		obj.remove(key);
	}

	@Test
	public void test_remove30() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry right_226 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry parent_267 = right_26;
		Entry parent_217 = right_4;
		Entry right_300 = right_226;
		Entry right_303 = right_226;
		Entry left_305 = left_25;
		Entry left_308 = left_25;
		Entry left_265 = null;
		Entry right_266 = null;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry left_502 = null;
		Entry right_500 = null;
		int key_499 = -3;
		int key_223 = 1;
		obj.size = 6;
		int key_309 = -1;
		int key_306 = -2;
		int key_310 = 0;
		boolean color_268 = false;
		boolean color_6 = true;
		int key = 1;
		int key_263 = 2;
		boolean color_228 = true;
		int key_307 = -1;
		int key_302 = 2;
		boolean color_28 = false;
		boolean color_218 = true;
		boolean color_503 = true;
		int key_213 = -1;
		int key_304 = 2;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = 1;
		int key_299 = -2;
		Object value_24 = null;
		Object value_2 = null;
		Object value_264 = null;
		Object value_224 = null;
		Object value_504 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_3.key = key_499;
		left_3.value = value_504;
		left_3.left = left_502;
		left_3.right = right_500;
		left_3.parent = obj.root;
		left_3.color = color_503;
		obj.remove(key);
	}

	@Test
	public void test_remove31() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_225 = new Entry();
		Entry left_3 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry parent_257 = right_26;
		Entry left_255 = null;
		Entry right_300 = right_4;
		Entry right_303 = right_26;
		Entry left_305 = left_225;
		Entry right_226 = null;
		Entry right_256 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		int key_223 = 3;
		obj.size = 6;
		int key_306 = 2;
		boolean color_6 = true;
		int key = 1;
		boolean color_228 = true;
		int key_457 = -3;
		int key_307 = 3;
		boolean color_461 = true;
		int key_302 = 0;
		boolean color_28 = false;
		boolean color_258 = false;
		int key_304 = 3;
		int key_472 = -1;
		boolean color_476 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_253 = 2;
		int key_299 = -2;
		Object value_24 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_254 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_225.key = key_253;
		left_225.value = value_254;
		left_225.left = left_255;
		left_225.right = right_256;
		left_225.parent = parent_257;
		left_225.color = color_258;
		left_3.key = key_457;
		left_3.value = value_462;
		left_3.left = left_460;
		left_3.right = right_458;
		left_3.parent = obj.root;
		left_3.color = color_461;
		left_25.key = key_472;
		left_25.value = value_477;
		left_25.left = left_475;
		left_25.right = right_473;
		left_25.parent = right_300;
		left_25.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove32() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry parent_47 = right_4;
		Entry right_299 = right_26;
		Entry right_302 = right_26;
		Entry left_45 = null;
		Entry right_46 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_300 = 0;
		boolean color_48 = false;
		int key = -2;
		int key_43 = 1;
		boolean color_18 = true;
		int key_1 = -1;
		int key_13 = -2;
		int key_23 = 0;
		boolean color_28 = true;
		int key_301 = 1;
		int key_303 = 1;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		obj.remove(key);
	}

	@Test
	public void test_remove33() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry right_16 = null;
		Entry parent_67 = left_3;
		Entry left_299 = left_15;
		Entry left_301 = left_15;
		Entry left_65 = null;
		Entry right_66 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_300 = -2;
		int key_63 = -2;
		int key = 0;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -1;
		int key_302 = -2;
		int key_303 = -1;
		boolean color_28 = true;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		obj.remove(key);
	}

	@Test
	public void test_remove34() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_25;
		Entry right_216 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		Entry left_436 = null;
		Entry right_434 = null;
		obj.size = 5;
		boolean color_6 = true;
		boolean color_437 = true;
		int key = -2;
		int key_303 = -1;
		int key_433 = 1;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_213 = -1;
		boolean color_422 = true;
		int key_304 = 0;
		int key_23 = 0;
		int key_1 = -3;
		int key_301 = 0;
		int key_418 = -4;
		int key_299 = -3;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_214 = null;
		Object value_2 = null;
		Object value_438 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_3.key = key_418;
		left_3.value = value_423;
		left_3.left = left_421;
		left_3.right = right_419;
		left_3.parent = obj.root;
		left_3.color = color_422;
		right_26.key = key_433;
		right_26.value = value_438;
		right_26.left = left_436;
		right_26.right = right_434;
		right_26.parent = right_300;
		right_26.color = color_437;
		obj.remove(key);
	}

	@Test
	public void test_remove35() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry right_226 = new Entry();
		Entry left_3 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry parent_267 = right_26;
		Entry right_266 = null;
		Entry right_300 = right_4;
		Entry right_303 = right_26;
		Entry right_306 = right_226;
		Entry left_225 = null;
		Entry left_265 = null;
		Entry left_463 = null;
		Entry right_461 = null;
		Entry left_478 = null;
		Entry right_476 = null;
		int key_223 = 1;
		obj.size = 6;
		boolean color_268 = false;
		boolean color_6 = true;
		int key_460 = -3;
		int key = 3;
		int key_263 = 2;
		boolean color_228 = true;
		int key_307 = 1;
		int key_475 = -1;
		int key_302 = 0;
		boolean color_28 = false;
		int key_305 = 1;
		boolean color_464 = true;
		int key_304 = 0;
		boolean color_479 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_308 = 2;
		int key_299 = -2;
		Object value_24 = null;
		Object value_2 = null;
		Object value_480 = null;
		Object value_264 = null;
		Object value_465 = null;
		Object value_224 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_3.key = key_460;
		left_3.value = value_465;
		left_3.left = left_463;
		left_3.right = right_461;
		left_3.parent = obj.root;
		left_3.color = color_464;
		left_25.key = key_475;
		left_25.value = value_480;
		left_25.left = left_478;
		left_25.right = right_476;
		left_25.parent = right_300;
		left_25.color = color_479;
		obj.remove(key);
	}

	@Test
	public void test_remove36() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry left_35 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_25;
		Entry right_26 = null;
		Entry right_36 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		int key_299 = -3;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = 0;
		boolean color_6 = true;
		int key_33 = -1;
		int key = -2;
		boolean color_38 = false;
		int key_23 = 0;
		int key_1 = -3;
		int key_301 = 0;
		int key_303 = -1;
		int key_418 = -4;
		boolean color_28 = true;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_34 = null;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_3.key = key_418;
		left_3.value = value_423;
		left_3.left = left_421;
		left_3.right = right_419;
		left_3.parent = obj.root;
		left_3.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test_remove37() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		obj.size = 3;
		boolean color_6 = true;
		int key = -1;
		boolean color_18 = true;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -1;
		boolean color_28 = true;
		Object value_24 = null;
		Object value_14 = null;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test_remove38() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_57 = left_3;
		Entry left_55 = null;
		Entry left_300 = left_3;
		Entry right_302 = right_16;
		Entry left_15 = null;
		Entry right_56 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		int key_299 = 2;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = 2;
		boolean color_58 = false;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_1 = 2;
		int key_13 = -1;
		int key_53 = 1;
		int key_301 = -1;
		int key_303 = 1;
		int key_418 = 3;
		Object value_14 = null;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_54 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		right_4.key = key_418;
		right_4.value = value_423;
		right_4.left = left_421;
		right_4.right = right_419;
		right_4.parent = obj.root;
		right_4.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test_remove39() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry left_15 = null;
		Entry right_16 = null;
		obj.size = 3;
		boolean color_6 = true;
		int key_300 = -2;
		int key = 0;
		boolean color_18 = false;
		int key_23 = 0;
		int key_1 = -1;
		int key_13 = -2;
		int key_302 = -2;
		int key_303 = -1;
		boolean color_28 = false;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test_remove40() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry right_16 = null;
		Entry left_300 = left_3;
		Entry left_15 = null;
		Entry left_382 = null;
		Entry right_380 = null;
		obj.size = 3;
		boolean color_383 = true;
		boolean color_6 = true;
		int key = 0;
		int key_379 = 2;
		boolean color_18 = true;
		int key_1 = 1;
		int key_13 = -1;
		int key_301 = -1;
		int key_299 = 1;
		Object value_384 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_379;
		right_4.value = value_384;
		right_4.left = left_382;
		right_4.right = right_380;
		right_4.parent = obj.root;
		right_4.color = color_383;
		obj.remove(key);
	}

	@Test
	public void test_remove41() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry right_166 = null;
		Entry parent_327 = left_3;
		Entry right_326 = null;
		Entry parent_347 = left_15;
		Entry parent_27 = obj.root;
		Entry left_299 = left_325;
		Entry left_301 = left_325;
		Entry right_304 = right_4;
		Entry right_307 = right_4;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_25 = null;
		Entry right_26 = null;
		obj.size = 6;
		int key_306 = 3;
		boolean color_6 = true;
		int key = 1;
		int key_343 = -2;
		int key_303 = -1;
		int key_302 = -2;
		boolean color_28 = true;
		int key_305 = 2;
		int key_300 = -2;
		int key_163 = 1;
		int key_323 = -1;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		int key_23 = 3;
		int key_308 = 3;
		boolean color_168 = true;
		Object value_164 = null;
		Object value_324 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_344 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test_remove42() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_67 = left_3;
		Entry right_66 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_15;
		Entry right_16 = null;
		Entry left_65 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = -1;
		boolean color_6 = true;
		int key_63 = -1;
		int key = 0;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_1 = 2;
		int key_13 = 1;
		int key_301 = 1;
		int key_302 = 2;
		int key_418 = 3;
		int key_299 = 2;
		Object value_14 = null;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		right_4.key = key_418;
		right_4.value = value_423;
		right_4.left = left_421;
		right_4.right = right_419;
		right_4.parent = obj.root;
		right_4.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test_remove43() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_25 = new Entry();
		Entry left_215 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry right_226 = null;
		Entry parent_217 = right_4;
		Entry right_216 = null;
		Entry parent_237 = left_25;
		Entry left_300 = left_215;
		Entry left_303 = left_215;
		Entry left_235 = null;
		Entry right_236 = null;
		Entry left_501 = null;
		Entry right_499 = null;
		int key_223 = 1;
		obj.size = 6;
		boolean color_6 = true;
		int key = 1;
		int key_498 = -4;
		boolean color_228 = true;
		boolean color_238 = false;
		int key_302 = -2;
		boolean color_28 = false;
		int key_305 = -1;
		boolean color_218 = true;
		int key_233 = -2;
		int key_213 = -1;
		int key_304 = -2;
		boolean color_502 = true;
		int key_23 = 0;
		int key_1 = -3;
		int key_301 = -3;
		int key_299 = -3;
		Object value_224 = null;
		Object value_503 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_234 = null;
		Object value_214 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_215.key = key_233;
		left_215.value = value_234;
		left_215.left = left_235;
		left_215.right = right_236;
		left_215.parent = parent_237;
		left_215.color = color_238;
		left_3.key = key_498;
		left_3.value = value_503;
		left_3.left = left_501;
		left_3.right = right_499;
		left_3.parent = obj.root;
		left_3.color = color_502;
		obj.remove(key);
	}

	@Test
	public void test_remove44() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry left_325 = new Entry();
		Entry right_326 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_347 = left_15;
		Entry parent_337 = left_15;
		Entry left_335 = null;
		Entry right_336 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_325;
		Entry left_305 = left_325;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_491 = null;
		Entry right_489 = null;
		Entry left_506 = null;
		Entry right_504 = null;
		int key_299 = 2;
		obj.size = 7;
		int key_306 = -3;
		boolean color_6 = true;
		boolean color_338 = false;
		boolean color_492 = true;
		int key = -2;
		int key_343 = -3;
		int key_307 = -2;
		int key_503 = 1;
		int key_302 = 2;
		boolean color_507 = true;
		int key_304 = -3;
		int key_323 = -2;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		int key_301 = 0;
		int key_488 = 3;
		int key_333 = -1;
		Object value_324 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_344 = null;
		Object value_508 = null;
		obj.modCount = 0;
		Object value_493 = null;
		Object value_334 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_326.key = key_333;
		right_326.value = value_334;
		right_326.left = left_335;
		right_326.right = right_336;
		right_326.parent = parent_337;
		right_326.color = color_338;
		right_4.key = key_488;
		right_4.value = value_493;
		right_4.left = left_491;
		right_4.right = right_489;
		right_4.parent = obj.root;
		right_4.color = color_492;
		right_16.key = key_503;
		right_16.value = value_508;
		right_16.left = left_506;
		right_16.right = right_504;
		right_16.parent = left_300;
		right_16.color = color_507;
		obj.remove(key);
	}

	@Test
	public void test_remove45() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry left_300 = left_3;
		Entry right_16 = null;
		Entry left_385 = null;
		Entry right_383 = null;
		boolean color_386 = true;
		obj.size = 3;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_1 = 2;
		int key_13 = 1;
		int key_301 = 1;
		int key_302 = 2;
		int key_382 = 3;
		int key_299 = 2;
		Object value_14 = null;
		Object value_387 = null;
		obj.modCount = 0;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_382;
		right_4.value = value_387;
		right_4.left = left_385;
		right_4.right = right_383;
		right_4.parent = obj.root;
		right_4.color = color_386;
		obj.remove(key);
	}

	@Test
	public void test_remove46() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_67 = left_3;
		Entry left_65 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_15;
		Entry right_16 = null;
		Entry right_66 = null;
		Entry left_424 = null;
		Entry right_422 = null;
		obj.size = 4;
		boolean color_425 = true;
		int key_304 = -1;
		boolean color_6 = true;
		int key_63 = -1;
		int key = -2;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_1 = 1;
		int key_13 = 0;
		int key_301 = 0;
		int key_302 = 1;
		int key_421 = 2;
		int key_305 = 0;
		int key_299 = 1;
		Object value_14 = null;
		Object value_426 = null;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		right_4.key = key_421;
		right_4.value = value_426;
		right_4.left = left_424;
		right_4.right = right_422;
		right_4.parent = obj.root;
		right_4.color = color_425;
		obj.remove(key);
	}

	@Test
	public void test_remove47() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_347 = left_15;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_15;
		Entry right_326 = null;
		Entry left_459 = null;
		Entry right_457 = null;
		Entry left_474 = null;
		Entry right_472 = null;
		int key_299 = 2;
		obj.size = 6;
		boolean color_6 = true;
		int key = -2;
		int key_343 = -2;
		boolean color_460 = true;
		int key_302 = 2;
		int key_305 = 0;
		int key_304 = -1;
		int key_456 = 3;
		boolean color_475 = true;
		int key_471 = 1;
		int key_323 = -1;
		boolean color_18 = false;
		boolean color_348 = false;
		boolean color_328 = true;
		int key_1 = 2;
		int key_13 = 0;
		int key_301 = 0;
		Object value_461 = null;
		Object value_14 = null;
		Object value_344 = null;
		Object value_324 = null;
		obj.modCount = 0;
		Object value_476 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_456;
		right_4.value = value_461;
		right_4.left = left_459;
		right_4.right = right_457;
		right_4.parent = obj.root;
		right_4.color = color_460;
		right_16.key = key_471;
		right_16.value = value_476;
		right_16.left = left_474;
		right_16.right = right_472;
		right_16.parent = left_300;
		right_16.color = color_475;
		obj.remove(key);
	}

	@Test
	public void test_remove48() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_326 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_337 = left_15;
		Entry left_335 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_15;
		Entry right_305 = right_326;
		Entry left_325 = null;
		Entry right_336 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		obj.size = 6;
		int key_306 = 1;
		boolean color_6 = true;
		boolean color_338 = false;
		int key = 0;
		int key_457 = 5;
		int key_307 = 2;
		boolean color_461 = true;
		int key_302 = 4;
		int key_304 = -1;
		int key_472 = 3;
		boolean color_476 = true;
		int key_323 = -1;
		boolean color_18 = false;
		int key_1 = 4;
		int key_13 = 2;
		int key_301 = 2;
		boolean color_328 = true;
		int key_333 = 1;
		int key_299 = 4;
		Object value_324 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_334 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_326.key = key_333;
		right_326.value = value_334;
		right_326.left = left_335;
		right_326.right = right_336;
		right_326.parent = parent_337;
		right_326.color = color_338;
		right_4.key = key_457;
		right_4.value = value_462;
		right_4.left = left_460;
		right_4.right = right_458;
		right_4.parent = obj.root;
		right_4.color = color_461;
		right_16.key = key_472;
		right_16.value = value_477;
		right_16.left = left_475;
		right_16.right = right_473;
		right_16.parent = left_300;
		right_16.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove49() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_216 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_247 = left_25;
		Entry left_245 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_25;
		Entry right_305 = right_216;
		Entry left_215 = null;
		Entry right_246 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		boolean color_248 = false;
		obj.size = 6;
		int key_306 = -1;
		boolean color_6 = true;
		int key = -2;
		int key_457 = -5;
		int key_307 = 0;
		int key_303 = -4;
		boolean color_461 = true;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_213 = -3;
		int key_243 = -1;
		int key_304 = -3;
		int key_472 = 1;
		boolean color_476 = true;
		int key_23 = 0;
		int key_1 = -4;
		int key_301 = 0;
		int key_299 = -4;
		Object value_244 = null;
		Object value_24 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_216.key = key_243;
		right_216.value = value_244;
		right_216.left = left_245;
		right_216.right = right_246;
		right_216.parent = parent_247;
		right_216.color = color_248;
		left_3.key = key_457;
		left_3.value = value_462;
		left_3.left = left_460;
		left_3.right = right_458;
		left_3.parent = obj.root;
		left_3.color = color_461;
		right_26.key = key_472;
		right_26.value = value_477;
		right_26.left = left_475;
		right_26.right = right_473;
		right_26.parent = right_300;
		right_26.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove50() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry left_225 = new Entry();
		Entry right_226 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry parent_227 = right_4;
		Entry parent_257 = right_26;
		Entry parent_267 = right_26;
		Entry parent_17 = obj.root;
		Entry left_299 = left_225;
		Entry left_302 = left_225;
		Entry right_305 = right_226;
		Entry right_308 = right_226;
		Entry left_310 = left_3;
		Entry left_312 = left_3;
		Entry left_255 = null;
		Entry right_256 = null;
		Entry left_265 = null;
		Entry right_266 = null;
		Entry left_15 = null;
		Entry right_16 = null;
		int key_223 = 2;
		obj.size = 7;
		int key_309 = 3;
		int key_306 = 2;
		int key_311 = -3;
		boolean color_268 = false;
		boolean color_6 = true;
		int key_313 = -3;
		int key = -1;
		int key_263 = 3;
		boolean color_228 = true;
		int key_307 = 3;
		int key_303 = 1;
		boolean color_28 = false;
		boolean color_218 = true;
		boolean color_258 = false;
		int key_213 = -1;
		int key_304 = 2;
		int key_300 = 0;
		boolean color_18 = true;
		int key_1 = -2;
		int key_23 = 0;
		int key_13 = -3;
		int key_301 = 1;
		int key_253 = 1;
		int key_314 = -2;
		Object value_24 = null;
		Object value_2 = null;
		Object value_264 = null;
		Object value_14 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_254 = null;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_225.key = key_253;
		left_225.value = value_254;
		left_225.left = left_255;
		left_225.right = right_256;
		left_225.parent = parent_257;
		left_225.color = color_258;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test_remove51() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_215 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_237 = left_25;
		Entry right_216 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_215;
		Entry left_305 = left_215;
		Entry left_235 = null;
		Entry right_236 = null;
		Entry left_462 = null;
		Entry right_460 = null;
		Entry left_477 = null;
		Entry right_475 = null;
		obj.size = 6;
		int key_306 = 1;
		boolean color_6 = true;
		int key = 2;
		boolean color_463 = true;
		int key_307 = 2;
		int key_303 = 0;
		boolean color_238 = false;
		int key_474 = 4;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_233 = 1;
		int key_213 = 2;
		int key_304 = 1;
		int key_459 = -1;
		int key_23 = 3;
		int key_1 = 0;
		int key_301 = 3;
		boolean color_478 = true;
		int key_299 = 0;
		Object value_24 = null;
		Object value_234 = null;
		Object value_479 = null;
		Object value_2 = null;
		Object value_464 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_215.key = key_233;
		left_215.value = value_234;
		left_215.left = left_235;
		left_215.right = right_236;
		left_215.parent = parent_237;
		left_215.color = color_238;
		left_3.key = key_459;
		left_3.value = value_464;
		left_3.left = left_462;
		left_3.right = right_460;
		left_3.parent = obj.root;
		left_3.color = color_463;
		right_26.key = key_474;
		right_26.value = value_479;
		right_26.left = left_477;
		right_26.right = right_475;
		right_26.parent = right_300;
		right_26.color = color_478;
		obj.remove(key);
	}

	@Test
	public void test_remove52() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_57 = left_3;
		Entry left_55 = null;
		Entry right_56 = null;
		Entry left_15 = null;
		Entry left_415 = null;
		Entry right_413 = null;
		int key_299 = 0;
		obj.size = 4;
		boolean color_58 = false;
		boolean color_6 = true;
		boolean color_416 = true;
		int key = -1;
		boolean color_18 = true;
		int key_1 = 0;
		int key_13 = -2;
		int key_53 = -1;
		int key_412 = 1;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_54 = null;
		Object value_2 = null;
		Object value_417 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		right_4.key = key_412;
		right_4.value = value_417;
		right_4.left = left_415;
		right_4.right = right_413;
		right_4.parent = obj.root;
		right_4.color = color_416;
		obj.remove(key);
	}

	@Test
	public void test_remove53() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_347 = left_15;
		Entry right_326 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_325;
		Entry left_305 = left_325;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_462 = null;
		Entry right_460 = null;
		Entry left_477 = null;
		Entry right_475 = null;
		int key_299 = 2;
		obj.size = 6;
		int key_306 = -2;
		boolean color_6 = true;
		int key = -1;
		boolean color_463 = true;
		int key_343 = -2;
		int key_307 = -1;
		int key_474 = 1;
		int key_302 = 2;
		int key_304 = -2;
		int key_459 = 3;
		int key_323 = -1;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		int key_301 = 0;
		boolean color_478 = true;
		Object value_324 = null;
		Object value_479 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_464 = null;
		Object value_344 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_459;
		right_4.value = value_464;
		right_4.left = left_462;
		right_4.right = right_460;
		right_4.parent = obj.root;
		right_4.color = color_463;
		right_16.key = key_474;
		right_16.value = value_479;
		right_16.left = left_477;
		right_16.right = right_475;
		right_16.parent = left_300;
		right_16.color = color_478;
		obj.remove(key);
	}

	@Test
	public void test_remove54() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry left_165 = new Entry();
		Entry right_166 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry left_325 = null;
		Entry right_326 = null;
		Entry parent_167 = left_3;
		Entry parent_187 = right_16;
		Entry parent_177 = right_16;
		Entry left_300 = left_165;
		Entry left_303 = left_165;
		Entry right_306 = right_166;
		Entry right_309 = right_166;
		Entry left_185 = null;
		Entry right_186 = null;
		Entry left_175 = null;
		Entry right_176 = null;
		Entry left_540 = null;
		Entry right_538 = null;
		int key_311 = 4;
		obj.size = 7;
		int key_173 = 3;
		int key_310 = 3;
		boolean color_6 = true;
		int key = -1;
		boolean color_188 = false;
		int key_307 = 2;
		boolean color_178 = false;
		int key_302 = 1;
		int key_305 = 2;
		int key_304 = 1;
		int key_183 = 1;
		boolean color_541 = true;
		int key_323 = -1;
		int key_163 = 2;
		boolean color_18 = false;
		int key_1 = 4;
		int key_13 = 0;
		int key_301 = 0;
		boolean color_328 = true;
		int key_308 = 3;
		int key_537 = 5;
		boolean color_168 = true;
		int key_299 = 4;
		Object value_164 = null;
		Object value_324 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_542 = null;
		obj.modCount = 0;
		Object value_174 = null;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		right_166.key = key_173;
		right_166.value = value_174;
		right_166.left = left_175;
		right_166.right = right_176;
		right_166.parent = parent_177;
		right_166.color = color_178;
		right_4.key = key_537;
		right_4.value = value_542;
		right_4.left = left_540;
		right_4.right = right_538;
		right_4.parent = obj.root;
		right_4.color = color_541;
		obj.remove(key);
	}

	@Test
	public void test_remove55() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry left_299 = left_25;
		Entry left_302 = left_25;
		Entry left_305 = left_3;
		Entry left_307 = left_3;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry left_15 = null;
		Entry right_16 = null;
		obj.size = 4;
		int key_309 = -2;
		int key_306 = -3;
		boolean color_6 = true;
		int key = 0;
		int key_303 = -1;
		boolean color_28 = true;
		int key_304 = 0;
		int key_33 = -1;
		int key_300 = -2;
		boolean color_38 = false;
		boolean color_18 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_13 = -3;
		int key_301 = -1;
		int key_308 = -3;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_34 = null;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test_remove56() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry right_226 = null;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry left_486 = null;
		Entry right_484 = null;
		Entry left_494 = null;
		Entry right_492 = null;
		int key_223 = 1;
		obj.size = 7;
		boolean color_6 = true;
		int key_491 = -3;
		int key = -2;
		boolean color_228 = true;
		int key_303 = -2;
		int key_302 = -4;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_483 = -5;
		int key_213 = -1;
		int key_300 = -4;
		boolean color_495 = true;
		boolean color_18 = false;
		int key_1 = -2;
		int key_13 = -4;
		int key_23 = 0;
		boolean color_487 = true;
		Object value_488 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_496 = null;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_15.key = key_483;
		left_15.value = value_488;
		left_15.left = left_486;
		left_15.right = right_484;
		left_15.parent = left_299;
		left_15.color = color_487;
		right_16.key = key_491;
		right_16.value = value_496;
		right_16.left = left_494;
		right_16.right = right_492;
		right_16.parent = left_301;
		right_16.color = color_495;
		obj.remove(key);
	}

	@Test
	public void test_remove57() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry parent_5 = null;
		Entry left_3 = null;
		Entry right_4 = null;
		boolean color_6 = true;
		obj.size = 1;
		int key = 0;
		int key_1 = 1;
		int key_299 = 1;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		obj.remove(key);
	}

	@Test
	public void test_remove58() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry left_325 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_15;
		Entry right_326 = null;
		Entry left_424 = null;
		Entry right_422 = null;
		Entry left_439 = null;
		Entry right_437 = null;
		obj.size = 5;
		boolean color_425 = true;
		boolean color_6 = true;
		int key_436 = 3;
		int key = 0;
		int key_302 = 4;
		int key_305 = 2;
		int key_304 = 1;
		int key_323 = 1;
		boolean color_18 = false;
		int key_421 = 5;
		int key_1 = 4;
		int key_13 = 2;
		int key_301 = 2;
		boolean color_328 = true;
		boolean color_440 = true;
		int key_299 = 4;
		Object value_14 = null;
		Object value_441 = null;
		Object value_324 = null;
		Object value_426 = null;
		obj.modCount = 0;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_4.key = key_421;
		right_4.value = value_426;
		right_4.left = left_424;
		right_4.right = right_422;
		right_4.parent = obj.root;
		right_4.color = color_425;
		right_16.key = key_436;
		right_16.value = value_441;
		right_16.left = left_439;
		right_16.right = right_437;
		right_16.parent = left_300;
		right_16.color = color_440;
		obj.remove(key);
	}

	@Test
	public void test_remove59() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry right_216 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_25;
		Entry left_215 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		Entry left_436 = null;
		Entry right_434 = null;
		obj.size = 5;
		boolean color_6 = true;
		boolean color_437 = true;
		int key = -1;
		int key_303 = -3;
		int key_433 = 1;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_213 = -2;
		boolean color_422 = true;
		int key_304 = -2;
		int key_23 = 0;
		int key_1 = -3;
		int key_301 = 0;
		int key_418 = -4;
		int key_299 = -3;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_214 = null;
		Object value_2 = null;
		Object value_438 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_3.key = key_418;
		left_3.value = value_423;
		left_3.left = left_421;
		left_3.right = right_419;
		left_3.parent = obj.root;
		left_3.color = color_422;
		right_26.key = key_433;
		right_26.value = value_438;
		right_26.left = left_436;
		right_26.right = right_434;
		right_26.parent = right_300;
		right_26.color = color_437;
		obj.remove(key);
	}

	@Test
	public void test_remove60() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_216 = new Entry();
		Entry left_215 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_247 = left_25;
		Entry left_245 = null;
		Entry right_246 = null;
		Entry parent_237 = left_25;
		Entry right_300 = right_4;
		Entry left_302 = left_215;
		Entry left_305 = left_215;
		Entry left_235 = null;
		Entry right_236 = null;
		Entry left_494 = null;
		Entry right_492 = null;
		Entry left_509 = null;
		Entry right_507 = null;
		boolean color_248 = false;
		boolean color_510 = true;
		obj.size = 7;
		int key_306 = -3;
		boolean color_6 = true;
		int key_491 = -5;
		int key = -1;
		int key_307 = -2;
		int key_303 = -4;
		boolean color_238 = false;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_233 = -3;
		int key_213 = -2;
		int key_243 = -1;
		int key_304 = -3;
		boolean color_495 = true;
		int key_23 = 0;
		int key_506 = 1;
		int key_1 = -4;
		int key_301 = 0;
		int key_299 = -4;
		Object value_244 = null;
		Object value_24 = null;
		Object value_234 = null;
		Object value_511 = null;
		Object value_2 = null;
		obj.modCount = 0;
		Object value_496 = null;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_216.key = key_243;
		right_216.value = value_244;
		right_216.left = left_245;
		right_216.right = right_246;
		right_216.parent = parent_247;
		right_216.color = color_248;
		left_215.key = key_233;
		left_215.value = value_234;
		left_215.left = left_235;
		left_215.right = right_236;
		left_215.parent = parent_237;
		left_215.color = color_238;
		left_3.key = key_491;
		left_3.value = value_496;
		left_3.left = left_494;
		left_3.right = right_492;
		left_3.parent = obj.root;
		left_3.color = color_495;
		right_26.key = key_506;
		right_26.value = value_511;
		right_26.left = left_509;
		right_26.right = right_507;
		right_26.parent = right_300;
		right_26.color = color_510;
		obj.remove(key);
	}

	@Test
	public void test_remove61() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry right_166 = null;
		Entry parent_327 = left_3;
		Entry right_326 = null;
		Entry left_325 = null;
		Entry left_456 = null;
		Entry right_454 = null;
		boolean color_457 = true;
		obj.size = 5;
		boolean color_6 = true;
		int key = 1;
		int key_453 = 3;
		int key_163 = 1;
		int key_323 = -1;
		boolean color_18 = false;
		int key_1 = 2;
		boolean color_328 = true;
		int key_13 = 0;
		boolean color_168 = true;
		int key_299 = 2;
		Object value_164 = null;
		Object value_14 = null;
		Object value_324 = null;
		obj.modCount = 0;
		Object value_458 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_4.key = key_453;
		right_4.value = value_458;
		right_4.left = left_456;
		right_4.right = right_454;
		right_4.parent = obj.root;
		right_4.color = color_457;
		obj.remove(key);
	}

	@Test
	public void test_remove62() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_347 = left_15;
		Entry left_345 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_15;
		Entry left_306 = left_325;
		Entry right_326 = null;
		Entry right_346 = null;
		Entry left_463 = null;
		Entry right_461 = null;
		Entry left_478 = null;
		Entry right_476 = null;
		int key_299 = 5;
		obj.size = 6;
		boolean color_6 = true;
		int key_460 = 6;
		int key = 0;
		int key_343 = 1;
		int key_307 = 1;
		int key_475 = 4;
		int key_302 = 5;
		int key_305 = 3;
		boolean color_464 = true;
		int key_304 = 2;
		boolean color_479 = true;
		int key_323 = 2;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 5;
		int key_13 = 3;
		boolean color_328 = true;
		int key_301 = 3;
		int key_308 = 2;
		Object value_324 = null;
		Object value_2 = null;
		Object value_480 = null;
		Object value_14 = null;
		Object value_344 = null;
		Object value_465 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_460;
		right_4.value = value_465;
		right_4.left = left_463;
		right_4.right = right_461;
		right_4.parent = obj.root;
		right_4.color = color_464;
		right_16.key = key_475;
		right_16.value = value_480;
		right_16.left = left_478;
		right_16.right = right_476;
		right_16.parent = left_300;
		right_16.color = color_479;
		obj.remove(key);
	}

	@Test
	public void test_remove63() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry parent_47 = right_4;
		Entry left_45 = null;
		Entry right_46 = null;
		Entry left_300 = left_25;
		Entry left_303 = left_25;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry left_455 = null;
		Entry right_453 = null;
		obj.size = 5;
		boolean color_6 = true;
		int key = 0;
		int key_43 = 1;
		int key_452 = -3;
		boolean color_456 = true;
		int key_302 = -1;
		boolean color_28 = true;
		int key_305 = 0;
		int key_304 = -1;
		int key_33 = -1;
		boolean color_48 = false;
		boolean color_38 = false;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_299 = -2;
		obj.modCount = 0;
		Object value_34 = null;
		Object value_24 = null;
		Object value_457 = null;
		Object value_2 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_3.key = key_452;
		left_3.value = value_457;
		left_3.left = left_455;
		left_3.right = right_453;
		left_3.parent = obj.root;
		left_3.color = color_456;
		obj.remove(key);
	}

	@Test
	public void test_remove64() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_166 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry parent_177 = right_16;
		Entry parent_327 = left_3;
		Entry right_300 = right_166;
		Entry right_303 = right_166;
		Entry left_306 = left_15;
		Entry left_308 = left_15;
		Entry left_175 = null;
		Entry right_176 = null;
		Entry left_325 = null;
		Entry right_326 = null;
		Entry left_502 = null;
		Entry right_500 = null;
		int key_499 = 1;
		obj.size = 6;
		int key_173 = -1;
		int key_309 = -4;
		int key_310 = -3;
		boolean color_6 = true;
		int key = -2;
		int key_307 = -4;
		boolean color_178 = false;
		int key_302 = -1;
		int key_305 = 0;
		boolean color_503 = true;
		int key_304 = -1;
		int key_163 = -2;
		int key_323 = -4;
		boolean color_18 = false;
		int key_1 = 0;
		int key_13 = -3;
		int key_301 = -2;
		boolean color_328 = true;
		boolean color_168 = true;
		int key_299 = 0;
		Object value_164 = null;
		Object value_324 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_504 = null;
		obj.modCount = 0;
		Object value_174 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_166.key = key_173;
		right_166.value = value_174;
		right_166.left = left_175;
		right_166.right = right_176;
		right_166.parent = parent_177;
		right_166.color = color_178;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_4.key = key_499;
		right_4.value = value_504;
		right_4.left = left_502;
		right_4.right = right_500;
		right_4.parent = obj.root;
		right_4.color = color_503;
		obj.remove(key);
	}

	@Test
	public void test_remove65() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_215 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_237 = left_25;
		Entry right_236 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_25;
		Entry left_305 = left_215;
		Entry right_216 = null;
		Entry left_235 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		obj.size = 6;
		int key_306 = 0;
		boolean color_6 = true;
		int key = 2;
		int key_457 = -1;
		int key_307 = 1;
		int key_303 = 3;
		boolean color_238 = false;
		boolean color_461 = true;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_233 = 1;
		int key_213 = 3;
		int key_304 = 4;
		int key_472 = 5;
		boolean color_476 = true;
		int key_23 = 4;
		int key_1 = 0;
		int key_301 = 4;
		int key_299 = 0;
		Object value_24 = null;
		Object value_234 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_215.key = key_233;
		left_215.value = value_234;
		left_215.left = left_235;
		left_215.right = right_236;
		left_215.parent = parent_237;
		left_215.color = color_238;
		left_3.key = key_457;
		left_3.value = value_462;
		left_3.left = left_460;
		left_3.right = right_458;
		left_3.parent = obj.root;
		left_3.color = color_461;
		right_26.key = key_472;
		right_26.value = value_477;
		right_26.left = left_475;
		right_26.right = right_473;
		right_26.parent = right_300;
		right_26.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove66() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry right_166 = null;
		Entry right_326 = null;
		Entry left_325 = null;
		Entry left_453 = null;
		Entry right_451 = null;
		obj.size = 5;
		boolean color_6 = true;
		boolean color_454 = true;
		int key = 0;
		int key_163 = 1;
		int key_323 = -1;
		boolean color_18 = false;
		int key_1 = 2;
		boolean color_328 = true;
		int key_13 = 0;
		int key_450 = 3;
		boolean color_168 = true;
		int key_299 = 2;
		Object value_164 = null;
		Object value_14 = null;
		Object value_324 = null;
		obj.modCount = 0;
		Object value_455 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_4.key = key_450;
		right_4.value = value_455;
		right_4.left = left_453;
		right_4.right = right_451;
		right_4.parent = obj.root;
		right_4.color = color_454;
		obj.remove(key);
	}

	@Test
	public void test_remove67() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry right_299 = right_4;
		Entry left_451 = null;
		Entry right_449 = null;
		int key_448 = 3;
		obj.size = 5;
		int key_213 = 1;
		boolean color_6 = true;
		int key_300 = 2;
		int key = -1;
		boolean color_18 = true;
		int key_23 = 2;
		int key_1 = 0;
		int key_13 = -1;
		boolean color_28 = false;
		boolean color_218 = true;
		boolean color_452 = true;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_453 = null;
		Object value_214 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_448;
		right_26.value = value_453;
		right_26.left = left_451;
		right_26.right = right_449;
		right_26.parent = right_299;
		right_26.color = color_452;
		obj.remove(key);
	}

	@Test
	public void test_remove68() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry right_16 = null;
		Entry parent_67 = left_3;
		Entry left_299 = left_15;
		Entry left_301 = left_15;
		Entry left_65 = null;
		Entry right_66 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_300 = -1;
		int key_63 = -1;
		int key = 2;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_23 = 2;
		int key_1 = 1;
		int key_13 = 0;
		int key_302 = -1;
		int key_303 = 0;
		boolean color_28 = true;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		obj.remove(key);
	}

	@Test
	public void test_remove69() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry right_226 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry parent_267 = right_26;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry right_304 = right_226;
		Entry right_307 = right_226;
		Entry left_265 = null;
		Entry right_266 = null;
		Entry left_530 = null;
		Entry right_528 = null;
		Entry left_538 = null;
		Entry right_536 = null;
		int key_223 = 1;
		obj.size = 8;
		int key_306 = 2;
		boolean color_268 = false;
		boolean color_6 = true;
		boolean color_539 = true;
		int key = -2;
		int key_263 = 2;
		boolean color_228 = true;
		int key_303 = -2;
		int key_535 = -3;
		int key_302 = -4;
		boolean color_28 = false;
		int key_305 = 1;
		boolean color_218 = true;
		int key_213 = -1;
		int key_300 = -4;
		boolean color_18 = false;
		int key_1 = -2;
		int key_13 = -4;
		int key_23 = 0;
		int key_308 = 2;
		int key_527 = -5;
		boolean color_531 = true;
		Object value_24 = null;
		Object value_2 = null;
		Object value_264 = null;
		Object value_14 = null;
		Object value_540 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_532 = null;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_15.key = key_527;
		left_15.value = value_532;
		left_15.left = left_530;
		left_15.right = right_528;
		left_15.parent = left_299;
		left_15.color = color_531;
		right_16.key = key_535;
		right_16.value = value_540;
		right_16.left = left_538;
		right_16.right = right_536;
		right_16.parent = left_301;
		right_16.color = color_539;
		obj.remove(key);
	}

	@Test
	public void test_remove70() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_165 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry right_166 = null;
		Entry parent_187 = right_16;
		Entry left_299 = left_3;
		Entry left_301 = left_165;
		Entry left_304 = left_165;
		Entry left_185 = null;
		Entry right_186 = null;
		Entry left_502 = null;
		Entry right_500 = null;
		int key_499 = -1;
		obj.size = 6;
		int key_306 = 2;
		boolean color_6 = true;
		int key = 4;
		boolean color_188 = false;
		int key_303 = 1;
		int key_302 = 0;
		boolean color_28 = true;
		int key_305 = 1;
		boolean color_503 = true;
		int key_183 = 1;
		int key_300 = 0;
		int key_163 = 2;
		boolean color_18 = false;
		int key_23 = 4;
		int key_1 = 3;
		int key_13 = 0;
		boolean color_168 = true;
		Object value_164 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_504 = null;
		obj.modCount = 0;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		left_15.key = key_499;
		left_15.value = value_504;
		left_15.left = left_502;
		left_15.right = right_500;
		left_15.parent = left_299;
		left_15.color = color_503;
		obj.remove(key);
	}

	@Test
	public void test_remove71() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry left_299 = left_25;
		Entry left_302 = left_25;
		Entry left_305 = left_3;
		Entry left_307 = left_3;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry left_484 = null;
		Entry right_482 = null;
		Entry left_492 = null;
		Entry right_490 = null;
		obj.size = 6;
		int key_309 = 0;
		int key_306 = -2;
		boolean color_6 = true;
		int key = 2;
		int key_481 = -3;
		int key_303 = 1;
		boolean color_28 = true;
		boolean color_493 = true;
		int key_304 = 2;
		int key_33 = 1;
		int key_300 = 0;
		boolean color_38 = false;
		int key_489 = -1;
		boolean color_18 = false;
		int key_23 = 2;
		int key_1 = 0;
		int key_13 = -2;
		int key_301 = 1;
		int key_308 = -2;
		boolean color_485 = true;
		Object value_486 = null;
		Object value_34 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_494 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_481;
		left_15.value = value_486;
		left_15.left = left_484;
		left_15.right = right_482;
		left_15.parent = left_305;
		left_15.color = color_485;
		right_16.key = key_489;
		right_16.value = value_494;
		right_16.left = left_492;
		right_16.right = right_490;
		right_16.parent = left_307;
		right_16.color = color_493;
		obj.remove(key);
	}

	@Test
	public void test_remove72() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_215 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_237 = left_25;
		Entry left_235 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_25;
		Entry left_305 = left_215;
		Entry right_216 = null;
		Entry right_236 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		obj.size = 6;
		int key_306 = -2;
		boolean color_6 = true;
		int key = -3;
		int key_457 = -5;
		int key_307 = -1;
		int key_303 = -1;
		boolean color_238 = false;
		boolean color_461 = true;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_233 = -2;
		int key_213 = -1;
		int key_304 = 0;
		int key_472 = 1;
		boolean color_476 = true;
		int key_23 = 0;
		int key_1 = -4;
		int key_301 = 0;
		int key_299 = -4;
		Object value_24 = null;
		Object value_234 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_215.key = key_233;
		left_215.value = value_234;
		left_215.left = left_235;
		left_215.right = right_236;
		left_215.parent = parent_237;
		left_215.color = color_238;
		left_3.key = key_457;
		left_3.value = value_462;
		left_3.left = left_460;
		left_3.right = right_458;
		left_3.parent = obj.root;
		left_3.color = color_461;
		right_26.key = key_472;
		right_26.value = value_477;
		right_26.left = left_475;
		right_26.right = right_473;
		right_26.parent = right_300;
		right_26.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove73() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_57 = left_3;
		Entry right_56 = null;
		Entry left_300 = left_3;
		Entry right_302 = right_16;
		Entry left_15 = null;
		Entry left_55 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		int key_299 = 1;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = -1;
		boolean color_58 = false;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_1 = 1;
		int key_13 = -2;
		int key_53 = -1;
		int key_301 = -2;
		int key_303 = -2;
		int key_418 = 2;
		Object value_14 = null;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_54 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		right_4.key = key_418;
		right_4.value = value_423;
		right_4.left = left_421;
		right_4.right = right_419;
		right_4.parent = obj.root;
		right_4.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test_remove74() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_165 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry parent_187 = right_16;
		Entry left_185 = null;
		Entry left_300 = left_3;
		Entry right_302 = right_16;
		Entry left_305 = left_165;
		Entry right_166 = null;
		Entry right_186 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		obj.size = 6;
		int key_306 = 1;
		boolean color_6 = true;
		int key = 0;
		boolean color_188 = false;
		int key_457 = 4;
		int key_307 = 2;
		int key_303 = 2;
		boolean color_461 = true;
		int key_304 = 3;
		int key_183 = 1;
		int key_472 = -2;
		boolean color_476 = true;
		int key_163 = 2;
		boolean color_18 = false;
		int key_1 = 3;
		int key_13 = -1;
		int key_301 = -1;
		boolean color_168 = true;
		int key_299 = 3;
		Object value_164 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		right_4.key = key_457;
		right_4.value = value_462;
		right_4.left = left_460;
		right_4.right = right_458;
		right_4.parent = obj.root;
		right_4.color = color_461;
		left_15.key = key_472;
		left_15.value = value_477;
		left_15.left = left_475;
		left_15.right = right_473;
		left_15.parent = left_300;
		left_15.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove75() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry right_226 = null;
		Entry right_300 = right_4;
		Entry right_303 = right_26;
		Entry left_225 = null;
		Entry left_424 = null;
		Entry right_422 = null;
		Entry left_439 = null;
		Entry right_437 = null;
		int key_223 = -1;
		obj.size = 5;
		boolean color_425 = true;
		boolean color_6 = true;
		int key_436 = -3;
		int key = 0;
		boolean color_228 = true;
		int key_302 = -2;
		boolean color_28 = false;
		int key_305 = -1;
		int key_304 = -2;
		int key_23 = -2;
		int key_1 = -4;
		int key_301 = -4;
		int key_421 = -5;
		boolean color_440 = true;
		int key_299 = -4;
		Object value_441 = null;
		Object value_224 = null;
		Object value_426 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_3.key = key_421;
		left_3.value = value_426;
		left_3.left = left_424;
		left_3.right = right_422;
		left_3.parent = obj.root;
		left_3.color = color_425;
		left_25.key = key_436;
		left_25.value = value_441;
		left_25.left = left_439;
		left_25.right = right_437;
		left_25.parent = right_300;
		left_25.color = color_440;
		obj.remove(key);
	}

	@Test
	public void test_remove76() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry right_326 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry right_166 = null;
		Entry parent_337 = left_15;
		Entry parent_347 = left_15;
		Entry parent_27 = obj.root;
		Entry right_299 = right_326;
		Entry right_302 = right_326;
		Entry left_305 = left_325;
		Entry left_307 = left_325;
		Entry right_310 = right_4;
		Entry right_313 = right_4;
		Entry left_335 = null;
		Entry right_336 = null;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_25 = null;
		Entry right_26 = null;
		int key_311 = 2;
		obj.size = 7;
		int key_309 = -2;
		int key_306 = -3;
		boolean color_6 = true;
		boolean color_338 = false;
		int key = 0;
		int key_343 = -3;
		int key_303 = -1;
		int key_312 = 3;
		boolean color_28 = true;
		int key_304 = 0;
		int key_300 = -2;
		int key_163 = 1;
		int key_323 = -2;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		int key_23 = 3;
		int key_301 = -1;
		int key_308 = -3;
		boolean color_168 = true;
		int key_314 = 3;
		int key_333 = -1;
		Object value_164 = null;
		Object value_324 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_344 = null;
		obj.modCount = 0;
		Object value_334 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_326.key = key_333;
		right_326.value = value_334;
		right_326.left = left_335;
		right_326.right = right_336;
		right_326.parent = parent_337;
		right_326.color = color_338;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test_remove77() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry left_165 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_167 = left_3;
		Entry parent_187 = right_16;
		Entry left_185 = null;
		Entry right_186 = null;
		Entry left_300 = left_15;
		Entry left_302 = left_15;
		Entry right_305 = right_16;
		Entry left_325 = null;
		Entry right_326 = null;
		Entry right_166 = null;
		Entry left_488 = null;
		Entry right_486 = null;
		obj.size = 6;
		int key_306 = 2;
		boolean color_6 = true;
		int key = 0;
		boolean color_188 = false;
		int key_307 = 3;
		int key_303 = -1;
		int key_304 = 0;
		int key_183 = 1;
		int key_163 = 2;
		int key_323 = -1;
		boolean color_489 = true;
		boolean color_18 = false;
		int key_1 = 3;
		int key_13 = 0;
		int key_301 = -1;
		boolean color_328 = true;
		int key_485 = 4;
		boolean color_168 = true;
		int key_299 = 3;
		Object value_164 = null;
		Object value_324 = null;
		Object value_490 = null;
		Object value_2 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		right_4.key = key_485;
		right_4.value = value_490;
		right_4.left = left_488;
		right_4.right = right_486;
		right_4.parent = obj.root;
		right_4.color = color_489;
		obj.remove(key);
	}

	@Test
	public void test_remove78() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_216 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry parent_247 = left_25;
		Entry right_300 = right_4;
		Entry right_302 = right_216;
		Entry right_305 = right_216;
		Entry left_245 = null;
		Entry right_246 = null;
		Entry left_462 = null;
		Entry right_460 = null;
		Entry left_477 = null;
		Entry right_475 = null;
		boolean color_248 = false;
		obj.size = 6;
		int key_306 = -1;
		boolean color_6 = true;
		int key = -2;
		boolean color_463 = true;
		int key_307 = 0;
		int key_303 = -2;
		int key_474 = 1;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_213 = -2;
		int key_243 = -1;
		int key_304 = -1;
		int key_459 = -4;
		int key_23 = 0;
		int key_1 = -3;
		int key_301 = 0;
		boolean color_478 = true;
		int key_299 = -3;
		Object value_244 = null;
		Object value_24 = null;
		Object value_479 = null;
		Object value_2 = null;
		Object value_464 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_216.key = key_243;
		right_216.value = value_244;
		right_216.left = left_245;
		right_216.right = right_246;
		right_216.parent = parent_247;
		right_216.color = color_248;
		left_3.key = key_459;
		left_3.value = value_464;
		left_3.left = left_462;
		left_3.right = right_460;
		left_3.parent = obj.root;
		left_3.color = color_463;
		right_26.key = key_474;
		right_26.value = value_479;
		right_26.left = left_477;
		right_26.right = right_475;
		right_26.parent = right_300;
		right_26.color = color_478;
		obj.remove(key);
	}

	@Test
	public void test_remove79() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry parent_47 = right_4;
		Entry parent_17 = obj.root;
		Entry right_299 = right_26;
		Entry right_302 = right_26;
		Entry left_304 = left_3;
		Entry left_306 = left_3;
		Entry left_45 = null;
		Entry right_46 = null;
		Entry left_15 = null;
		Entry right_16 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key = 0;
		int key_43 = 1;
		int key_307 = -2;
		int key_303 = 1;
		boolean color_28 = true;
		int key_305 = -2;
		int key_300 = 0;
		boolean color_48 = false;
		boolean color_18 = true;
		int key_23 = 0;
		int key_1 = -1;
		int key_13 = -2;
		int key_301 = 1;
		int key_308 = -1;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test_remove80() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry right_226 = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry parent_267 = right_26;
		Entry parent_17 = obj.root;
		Entry right_299 = right_226;
		Entry right_302 = right_226;
		Entry left_304 = left_3;
		Entry left_306 = left_3;
		Entry left_265 = null;
		Entry right_266 = null;
		Entry left_552 = null;
		Entry right_550 = null;
		Entry left_560 = null;
		Entry right_558 = null;
		int key_223 = 1;
		obj.size = 8;
		boolean color_268 = false;
		boolean color_6 = true;
		int key_557 = -3;
		boolean color_553 = true;
		int key = -1;
		int key_263 = 2;
		boolean color_228 = true;
		int key_307 = -4;
		int key_303 = 2;
		boolean color_28 = false;
		int key_305 = -4;
		boolean color_218 = true;
		int key_213 = -1;
		int key_549 = -5;
		int key_300 = 1;
		boolean color_561 = true;
		boolean color_18 = false;
		int key_1 = -2;
		int key_23 = 0;
		int key_13 = -4;
		int key_301 = 2;
		int key_308 = -2;
		Object value_562 = null;
		Object value_24 = null;
		Object value_554 = null;
		Object value_2 = null;
		Object value_264 = null;
		Object value_14 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_549;
		left_15.value = value_554;
		left_15.left = left_552;
		left_15.right = right_550;
		left_15.parent = left_304;
		left_15.color = color_553;
		right_16.key = key_557;
		right_16.value = value_562;
		right_16.left = left_560;
		right_16.right = right_558;
		right_16.parent = left_306;
		right_16.color = color_561;
		obj.remove(key);
	}

	@Test
	public void test_remove81() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry right_16 = null;
		Entry left_15 = null;
		obj.size = 3;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -1;
		boolean color_28 = true;
		Object value_24 = null;
		Object value_14 = null;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test_remove82() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_166 = new Entry();
		Entry left_165 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry parent_177 = right_16;
		Entry parent_187 = right_16;
		Entry left_299 = left_3;
		Entry right_301 = right_166;
		Entry right_304 = right_166;
		Entry left_307 = left_165;
		Entry left_310 = left_165;
		Entry left_175 = null;
		Entry right_176 = null;
		Entry left_185 = null;
		Entry right_186 = null;
		Entry left_545 = null;
		Entry right_543 = null;
		boolean color_546 = true;
		int key_542 = -1;
		int key_311 = 1;
		obj.size = 7;
		int key_173 = 3;
		int key_309 = 1;
		int key_306 = 4;
		boolean color_6 = true;
		int key = 5;
		boolean color_188 = false;
		int key_312 = 2;
		int key_303 = 3;
		boolean color_178 = false;
		int key_302 = 2;
		boolean color_28 = true;
		int key_305 = 3;
		int key_183 = 1;
		int key_300 = 0;
		int key_163 = 2;
		boolean color_18 = false;
		int key_23 = 5;
		int key_1 = 4;
		int key_13 = 0;
		int key_308 = 0;
		boolean color_168 = true;
		Object value_164 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_547 = null;
		obj.modCount = 0;
		Object value_174 = null;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_166.key = key_173;
		right_166.value = value_174;
		right_166.left = left_175;
		right_166.right = right_176;
		right_166.parent = parent_177;
		right_166.color = color_178;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		left_15.key = key_542;
		left_15.value = value_547;
		left_15.left = left_545;
		left_15.right = right_543;
		left_15.parent = left_299;
		left_15.color = color_546;
		obj.remove(key);
	}

	@Test
	public void test_remove83() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry right_226 = null;
		Entry left_452 = null;
		Entry right_450 = null;
		obj.size = 5;
		int key_213 = -1;
		int key_223 = 1;
		boolean color_6 = true;
		int key = -1;
		boolean color_228 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_449 = -3;
		boolean color_28 = false;
		boolean color_453 = true;
		boolean color_218 = true;
		int key_299 = -2;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_454 = null;
		Object value_214 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_3.key = key_449;
		left_3.value = value_454;
		left_3.left = left_452;
		left_3.right = right_450;
		left_3.parent = obj.root;
		left_3.color = color_453;
		obj.remove(key);
	}

	@Test
	public void test_remove84() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_216 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_247 = left_25;
		Entry right_246 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_25;
		Entry right_305 = right_216;
		Entry left_215 = null;
		Entry left_245 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		boolean color_248 = false;
		obj.size = 6;
		int key_306 = -3;
		boolean color_6 = true;
		int key = -1;
		int key_457 = -5;
		int key_307 = -2;
		int key_303 = -4;
		boolean color_461 = true;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_213 = -3;
		int key_243 = -2;
		int key_304 = -3;
		int key_472 = 1;
		boolean color_476 = true;
		int key_23 = 0;
		int key_1 = -4;
		int key_301 = 0;
		int key_299 = -4;
		Object value_244 = null;
		Object value_24 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_216.key = key_243;
		right_216.value = value_244;
		right_216.left = left_245;
		right_216.right = right_246;
		right_216.parent = parent_247;
		right_216.color = color_248;
		left_3.key = key_457;
		left_3.value = value_462;
		left_3.left = left_460;
		left_3.right = right_458;
		left_3.parent = obj.root;
		left_3.color = color_461;
		right_26.key = key_472;
		right_26.value = value_477;
		right_26.left = left_475;
		right_26.right = right_473;
		right_26.parent = right_300;
		right_26.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove85() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry left_45 = new Entry();
		Entry right_46 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry parent_47 = right_4;
		Entry parent_117 = right_26;
		Entry parent_127 = right_26;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry left_304 = left_45;
		Entry left_307 = left_45;
		Entry right_310 = right_46;
		Entry right_313 = right_46;
		Entry left_115 = null;
		Entry right_116 = null;
		Entry left_125 = null;
		Entry right_126 = null;
		Entry left_577 = null;
		Entry right_575 = null;
		Entry left_592 = null;
		Entry right_590 = null;
		int key_589 = -3;
		int key_311 = 2;
		obj.size = 9;
		int key_306 = 1;
		boolean color_6 = true;
		int key_309 = 2;
		int key = -2;
		int key_43 = 2;
		boolean color_578 = true;
		int key_302 = -4;
		int key_303 = -2;
		int key_312 = 3;
		boolean color_28 = true;
		int key_305 = 0;
		boolean color_118 = false;
		int key_33 = -1;
		int key_300 = -4;
		int key_574 = -5;
		boolean color_48 = true;
		boolean color_38 = true;
		boolean color_18 = true;
		int key_1 = -2;
		int key_13 = -4;
		int key_23 = 0;
		int key_123 = 3;
		int key_308 = 1;
		boolean color_593 = true;
		boolean color_128 = false;
		int key_113 = 1;
		int key_314 = 3;
		Object value_124 = null;
		Object value_34 = null;
		Object value_24 = null;
		Object value_594 = null;
		Object value_114 = null;
		Object value_2 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_579 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_45.key = key_113;
		left_45.value = value_114;
		left_45.left = left_115;
		left_45.right = right_116;
		left_45.parent = parent_117;
		left_45.color = color_118;
		right_46.key = key_123;
		right_46.value = value_124;
		right_46.left = left_125;
		right_46.right = right_126;
		right_46.parent = parent_127;
		right_46.color = color_128;
		left_15.key = key_574;
		left_15.value = value_579;
		left_15.left = left_577;
		left_15.right = right_575;
		left_15.parent = left_299;
		left_15.color = color_578;
		right_16.key = key_589;
		right_16.value = value_594;
		right_16.left = left_592;
		right_16.right = right_590;
		right_16.parent = left_301;
		right_16.color = color_593;
		obj.remove(key);
	}

	@Test
	public void test_remove86() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_47 = right_4;
		Entry left_45 = null;
		Entry right_46 = null;
		Entry left_25 = null;
		Entry left_415 = null;
		Entry right_413 = null;
		obj.size = 4;
		boolean color_6 = true;
		boolean color_416 = true;
		boolean color_48 = false;
		int key = 1;
		int key_43 = 1;
		int key_23 = 0;
		int key_1 = -1;
		boolean color_28 = true;
		int key_412 = -2;
		int key_299 = -1;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		Object value_417 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_3.key = key_412;
		left_3.value = value_417;
		left_3.left = left_415;
		left_3.right = right_413;
		left_3.parent = obj.root;
		left_3.color = color_416;
		obj.remove(key);
	}

	@Test
	public void test_remove87() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry right_4 = null;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry left_15 = null;
		Entry right_16 = null;
		obj.size = 2;
		boolean color_6 = true;
		int key_300 = -1;
		int key = 0;
		boolean color_18 = false;
		int key_1 = 0;
		int key_13 = -1;
		int key_303 = 0;
		int key_302 = -1;
		Object value_14 = null;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test_remove88() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_57 = left_3;
		Entry left_15 = null;
		Entry left_55 = null;
		Entry right_56 = null;
		obj.size = 4;
		boolean color_58 = false;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -2;
		int key_53 = -1;
		boolean color_28 = true;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_54 = null;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		obj.remove(key);
	}

	@Test
	public void test_remove89() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry right_226 = new Entry();
		Entry left_3 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry parent_267 = right_26;
		Entry left_265 = null;
		Entry right_300 = right_4;
		Entry right_303 = right_26;
		Entry right_306 = right_226;
		Entry left_225 = null;
		Entry right_266 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		int key_223 = 1;
		obj.size = 6;
		boolean color_268 = false;
		boolean color_6 = true;
		int key = 2;
		int key_263 = 3;
		boolean color_228 = true;
		int key_457 = -3;
		int key_307 = 3;
		boolean color_461 = true;
		int key_302 = 0;
		boolean color_28 = false;
		int key_305 = 1;
		int key_304 = 0;
		int key_472 = -1;
		boolean color_476 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_299 = -2;
		Object value_24 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_264 = null;
		Object value_462 = null;
		Object value_224 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_3.key = key_457;
		left_3.value = value_462;
		left_3.left = left_460;
		left_3.right = right_458;
		left_3.parent = obj.root;
		left_3.color = color_461;
		left_25.key = key_472;
		left_25.value = value_477;
		left_25.left = left_475;
		left_25.right = right_473;
		left_25.parent = right_300;
		left_25.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove90() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_216 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry parent_247 = left_25;
		Entry right_299 = right_4;
		Entry right_301 = right_216;
		Entry right_304 = right_216;
		Entry left_245 = null;
		Entry right_246 = null;
		Entry left_498 = null;
		Entry right_496 = null;
		boolean color_248 = false;
		obj.size = 6;
		int key_306 = 0;
		boolean color_6 = true;
		int key_495 = 1;
		int key = -4;
		int key_303 = -1;
		int key_302 = -2;
		boolean color_28 = false;
		int key_305 = -1;
		boolean color_499 = true;
		boolean color_218 = true;
		int key_213 = -2;
		int key_243 = -1;
		int key_300 = 0;
		boolean color_18 = true;
		int key_23 = 0;
		int key_1 = -3;
		int key_13 = -4;
		Object value_244 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_500 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_216.key = key_243;
		right_216.value = value_244;
		right_216.left = left_245;
		right_216.right = right_246;
		right_216.parent = parent_247;
		right_216.color = color_248;
		right_26.key = key_495;
		right_26.value = value_500;
		right_26.left = left_498;
		right_26.right = right_496;
		right_26.parent = right_299;
		right_26.color = color_499;
		obj.remove(key);
	}

	@Test
	public void test_remove91() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry parent_57 = left_3;
		Entry right_300 = right_16;
		Entry right_303 = right_16;
		Entry left_55 = null;
		Entry right_56 = null;
		Entry left_426 = null;
		Entry right_424 = null;
		int key_299 = 0;
		int key_423 = 1;
		obj.size = 4;
		boolean color_427 = true;
		int key_304 = -1;
		boolean color_58 = false;
		boolean color_6 = true;
		int key = -2;
		boolean color_18 = true;
		int key_1 = 0;
		int key_13 = -2;
		int key_53 = -1;
		int key_301 = -2;
		int key_302 = -1;
		int key_305 = 0;
		Object value_14 = null;
		Object value_428 = null;
		obj.modCount = 0;
		Object value_54 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		right_4.key = key_423;
		right_4.value = value_428;
		right_4.left = left_426;
		right_4.right = right_424;
		right_4.parent = obj.root;
		right_4.color = color_427;
		obj.remove(key);
	}

	@Test
	public void test_remove92() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry left_215 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry right_226 = null;
		Entry right_216 = null;
		Entry parent_237 = left_25;
		Entry left_300 = left_215;
		Entry left_303 = left_215;
		Entry left_235 = null;
		Entry right_236 = null;
		Entry left_498 = null;
		Entry right_496 = null;
		int key_223 = 1;
		obj.size = 6;
		boolean color_6 = true;
		int key_495 = -4;
		int key = 0;
		boolean color_228 = true;
		boolean color_238 = false;
		int key_302 = -2;
		boolean color_28 = false;
		int key_305 = -1;
		boolean color_499 = true;
		boolean color_218 = true;
		int key_233 = -2;
		int key_213 = -1;
		int key_304 = -2;
		int key_23 = 0;
		int key_1 = -3;
		int key_301 = -3;
		int key_299 = -3;
		Object value_224 = null;
		Object value_500 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_234 = null;
		Object value_214 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_215.key = key_233;
		left_215.value = value_234;
		left_215.left = left_235;
		left_215.right = right_236;
		left_215.parent = parent_237;
		left_215.color = color_238;
		left_3.key = key_495;
		left_3.value = value_500;
		left_3.left = left_498;
		left_3.right = right_496;
		left_3.parent = obj.root;
		left_3.color = color_499;
		obj.remove(key);
	}

	@Test
	public void test_remove93() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry left_3 = null;
		Entry parent_27 = obj.root;
		Entry right_299 = right_4;
		Entry right_302 = right_4;
		Entry left_25 = null;
		Entry right_26 = null;
		obj.size = 2;
		boolean color_6 = true;
		int key_300 = 0;
		int key = 0;
		int key_23 = 1;
		int key_1 = 0;
		int key_301 = 1;
		int key_303 = 1;
		boolean color_28 = false;
		Object value_24 = null;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test_remove94() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_57 = left_3;
		Entry left_55 = null;
		Entry right_56 = null;
		Entry parent_67 = left_3;
		Entry left_300 = left_15;
		Entry left_302 = left_15;
		Entry left_65 = null;
		Entry right_66 = null;
		Entry left_455 = null;
		Entry right_453 = null;
		obj.size = 5;
		boolean color_58 = false;
		boolean color_6 = true;
		int key_63 = -1;
		int key = 1;
		int key_452 = 3;
		int key_303 = -1;
		boolean color_456 = true;
		int key_304 = 0;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_1 = 2;
		int key_13 = 0;
		int key_53 = 1;
		int key_301 = -1;
		int key_299 = 2;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_54 = null;
		Object value_457 = null;
		Object value_2 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		right_4.key = key_452;
		right_4.value = value_457;
		right_4.left = left_455;
		right_4.right = right_453;
		right_4.parent = obj.root;
		right_4.color = color_456;
		obj.remove(key);
	}

	@Test
	public void test_remove95() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry left_15 = null;
		Entry right_16 = null;
		obj.size = 3;
		boolean color_6 = true;
		int key_300 = -1;
		int key = 0;
		boolean color_18 = false;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -1;
		int key_302 = -1;
		int key_303 = 0;
		boolean color_28 = false;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test_remove96() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_326 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry left_325 = null;
		Entry parent_337 = left_15;
		Entry left_300 = left_3;
		Entry right_303 = right_326;
		Entry right_306 = right_326;
		Entry left_335 = null;
		Entry right_336 = null;
		Entry left_465 = null;
		Entry right_463 = null;
		Entry left_480 = null;
		Entry right_478 = null;
		obj.size = 6;
		boolean color_6 = true;
		boolean color_338 = false;
		int key = -2;
		boolean color_466 = true;
		int key_307 = -1;
		int key_302 = 2;
		int key_305 = -1;
		int key_462 = 3;
		int key_304 = -2;
		int key_477 = 1;
		int key_323 = -2;
		boolean color_18 = false;
		int key_1 = 2;
		int key_13 = 0;
		int key_301 = 0;
		boolean color_328 = true;
		int key_308 = 0;
		boolean color_481 = true;
		int key_333 = -1;
		int key_299 = 2;
		Object value_482 = null;
		Object value_324 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_467 = null;
		obj.modCount = 0;
		Object value_334 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_326.key = key_333;
		right_326.value = value_334;
		right_326.left = left_335;
		right_326.right = right_336;
		right_326.parent = parent_337;
		right_326.color = color_338;
		right_4.key = key_462;
		right_4.value = value_467;
		right_4.left = left_465;
		right_4.right = right_463;
		right_4.parent = obj.root;
		right_4.color = color_466;
		right_16.key = key_477;
		right_16.value = value_482;
		right_16.left = left_480;
		right_16.right = right_478;
		right_16.parent = left_300;
		right_16.color = color_481;
		obj.remove(key);
	}

	@Test
	public void test_remove97() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_166 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry parent_177 = right_16;
		Entry left_175 = null;
		Entry right_176 = null;
		Entry left_165 = null;
		Entry left_300 = left_3;
		Entry left_451 = null;
		Entry right_449 = null;
		Entry left_466 = null;
		Entry right_464 = null;
		boolean color_467 = true;
		obj.size = 6;
		int key_173 = 2;
		boolean color_6 = true;
		int key = 2;
		boolean color_178 = false;
		int key_448 = 4;
		boolean color_452 = true;
		int key_463 = -1;
		int key_163 = 1;
		boolean color_18 = false;
		int key_1 = 3;
		int key_13 = 0;
		int key_301 = 0;
		boolean color_168 = true;
		int key_299 = 3;
		Object value_164 = null;
		Object value_14 = null;
		Object value_468 = null;
		obj.modCount = 0;
		Object value_174 = null;
		Object value_453 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_166.key = key_173;
		right_166.value = value_174;
		right_166.left = left_175;
		right_166.right = right_176;
		right_166.parent = parent_177;
		right_166.color = color_178;
		right_4.key = key_448;
		right_4.value = value_453;
		right_4.left = left_451;
		right_4.right = right_449;
		right_4.parent = obj.root;
		right_4.color = color_452;
		left_15.key = key_463;
		left_15.value = value_468;
		left_15.left = left_466;
		left_15.right = right_464;
		left_15.parent = left_300;
		left_15.color = color_467;
		obj.remove(key);
	}

	@Test
	public void test_remove98() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry parent_57 = left_3;
		Entry parent_67 = left_3;
		Entry right_299 = right_16;
		Entry right_302 = right_16;
		Entry left_305 = left_15;
		Entry left_307 = left_15;
		Entry left_55 = null;
		Entry right_56 = null;
		Entry left_65 = null;
		Entry right_66 = null;
		obj.size = 5;
		int key_309 = 0;
		int key_306 = -1;
		boolean color_58 = false;
		boolean color_6 = true;
		int key_63 = -1;
		int key = 3;
		int key_303 = 1;
		boolean color_28 = true;
		int key_304 = 2;
		int key_300 = 0;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_23 = 3;
		int key_1 = 2;
		int key_13 = 0;
		int key_53 = 1;
		int key_301 = 1;
		int key_308 = -1;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_54 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		obj.remove(key);
	}

	@Test
	public void test_remove99() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_225 = new Entry();
		Entry left_3 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry parent_257 = right_26;
		Entry left_255 = null;
		Entry right_256 = null;
		Entry right_300 = right_4;
		Entry right_303 = right_26;
		Entry right_226 = null;
		Entry left_456 = null;
		Entry right_454 = null;
		Entry left_471 = null;
		Entry right_469 = null;
		int key_223 = 2;
		obj.size = 6;
		boolean color_6 = true;
		int key = 1;
		int key_453 = -3;
		boolean color_228 = true;
		int key_468 = -1;
		int key_302 = 0;
		boolean color_28 = false;
		boolean color_457 = true;
		boolean color_258 = false;
		int key_304 = 2;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_253 = 1;
		boolean color_472 = true;
		int key_299 = -2;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_473 = null;
		Object value_254 = null;
		Object value_458 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_225.key = key_253;
		left_225.value = value_254;
		left_225.left = left_255;
		left_225.right = right_256;
		left_225.parent = parent_257;
		left_225.color = color_258;
		left_3.key = key_453;
		left_3.value = value_458;
		left_3.left = left_456;
		left_3.right = right_454;
		left_3.parent = obj.root;
		left_3.color = color_457;
		left_25.key = key_468;
		left_25.value = value_473;
		left_25.left = left_471;
		left_25.right = right_469;
		left_25.parent = right_300;
		left_25.color = color_472;
		obj.remove(key);
	}

	@Test
	public void test_remove100() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry right_4 = null;
		obj.size = 2;
		boolean color_18 = false;
		int key_1 = 1;
		int key_13 = 0;
		boolean color_6 = true;
		int key = 0;
		int key_299 = 1;
		Object value_14 = null;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test_remove101() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_215 = new Entry();
		Entry right_216 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_237 = left_25;
		Entry parent_247 = left_25;
		Entry left_245 = null;
		Entry right_246 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_215;
		Entry left_305 = left_215;
		Entry left_235 = null;
		Entry right_236 = null;
		Entry left_491 = null;
		Entry right_489 = null;
		Entry left_506 = null;
		Entry right_504 = null;
		boolean color_248 = false;
		obj.size = 7;
		int key_306 = -3;
		boolean color_6 = true;
		boolean color_492 = true;
		int key = -2;
		int key_307 = -2;
		int key_503 = 1;
		int key_303 = -4;
		boolean color_238 = false;
		boolean color_28 = false;
		boolean color_507 = true;
		boolean color_218 = true;
		int key_233 = -3;
		int key_213 = -2;
		int key_243 = -1;
		int key_304 = -3;
		int key_23 = 0;
		int key_1 = -4;
		int key_301 = 0;
		int key_488 = -5;
		int key_299 = -4;
		Object value_244 = null;
		Object value_24 = null;
		Object value_234 = null;
		Object value_2 = null;
		Object value_508 = null;
		obj.modCount = 0;
		Object value_493 = null;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_215.key = key_233;
		left_215.value = value_234;
		left_215.left = left_235;
		left_215.right = right_236;
		left_215.parent = parent_237;
		left_215.color = color_238;
		right_216.key = key_243;
		right_216.value = value_244;
		right_216.left = left_245;
		right_216.right = right_246;
		right_216.parent = parent_247;
		right_216.color = color_248;
		left_3.key = key_488;
		left_3.value = value_493;
		left_3.left = left_491;
		left_3.right = right_489;
		left_3.parent = obj.root;
		left_3.color = color_492;
		right_26.key = key_503;
		right_26.value = value_508;
		right_26.left = left_506;
		right_26.right = right_504;
		right_26.parent = right_300;
		right_26.color = color_507;
		obj.remove(key);
	}

	@Test
	public void test_remove102() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_166 = new Entry();
		Entry left_165 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry parent_177 = right_16;
		Entry left_175 = null;
		Entry right_176 = null;
		Entry parent_187 = right_16;
		Entry left_300 = left_3;
		Entry left_302 = left_165;
		Entry left_305 = left_165;
		Entry left_185 = null;
		Entry right_186 = null;
		Entry left_494 = null;
		Entry right_492 = null;
		Entry left_509 = null;
		Entry right_507 = null;
		boolean color_510 = true;
		obj.size = 7;
		int key_173 = -1;
		int key_306 = -3;
		boolean color_6 = true;
		int key_491 = 1;
		int key = -1;
		boolean color_188 = false;
		int key_307 = -2;
		int key_303 = -4;
		boolean color_178 = false;
		int key_304 = -3;
		int key_183 = -3;
		boolean color_495 = true;
		int key_163 = -2;
		boolean color_18 = false;
		int key_506 = -5;
		int key_1 = 0;
		int key_13 = -4;
		int key_301 = -4;
		boolean color_168 = true;
		int key_299 = 0;
		Object value_164 = null;
		Object value_511 = null;
		Object value_2 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_174 = null;
		Object value_496 = null;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_166.key = key_173;
		right_166.value = value_174;
		right_166.left = left_175;
		right_166.right = right_176;
		right_166.parent = parent_177;
		right_166.color = color_178;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		right_4.key = key_491;
		right_4.value = value_496;
		right_4.left = left_494;
		right_4.right = right_492;
		right_4.parent = obj.root;
		right_4.color = color_495;
		left_15.key = key_506;
		left_15.value = value_511;
		left_15.left = left_509;
		left_15.right = right_507;
		left_15.parent = left_300;
		left_15.color = color_510;
		obj.remove(key);
	}

	@Test
	public void test_remove103() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_300 = right_4;
		Entry right_26 = null;
		Entry left_382 = null;
		Entry right_380 = null;
		obj.size = 3;
		boolean color_383 = true;
		boolean color_6 = true;
		int key = 0;
		int key_379 = -2;
		int key_23 = 1;
		int key_1 = -1;
		int key_301 = 1;
		boolean color_28 = true;
		int key_299 = -1;
		Object value_384 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_379;
		left_3.value = value_384;
		left_3.left = left_382;
		left_3.right = right_380;
		left_3.parent = obj.root;
		left_3.color = color_383;
		obj.remove(key);
	}

	@Test
	public void test_remove104() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_47 = right_4;
		Entry right_46 = null;
		Entry right_300 = right_4;
		Entry right_303 = right_26;
		Entry left_25 = null;
		Entry left_45 = null;
		Entry left_424 = null;
		Entry right_422 = null;
		obj.size = 4;
		boolean color_425 = true;
		int key_304 = 0;
		boolean color_6 = true;
		boolean color_48 = false;
		int key = 2;
		int key_43 = 1;
		int key_23 = 0;
		int key_1 = -1;
		int key_301 = -1;
		int key_421 = -2;
		int key_302 = 0;
		boolean color_28 = true;
		int key_305 = 1;
		int key_299 = -1;
		Object value_426 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_3.key = key_421;
		left_3.value = value_426;
		left_3.left = left_424;
		left_3.right = right_422;
		left_3.parent = obj.root;
		left_3.color = color_425;
		obj.remove(key);
	}

	@Test
	public void test_remove105() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_166 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry parent_177 = right_16;
		Entry right_176 = null;
		Entry left_300 = left_3;
		Entry right_302 = right_16;
		Entry right_305 = right_166;
		Entry left_165 = null;
		Entry left_175 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		obj.size = 6;
		int key_173 = 2;
		int key_306 = 1;
		boolean color_6 = true;
		int key = 3;
		int key_457 = 5;
		int key_307 = 2;
		int key_303 = 0;
		boolean color_461 = true;
		boolean color_178 = false;
		int key_304 = 1;
		int key_472 = -1;
		boolean color_476 = true;
		int key_163 = 1;
		boolean color_18 = false;
		int key_1 = 4;
		int key_13 = 0;
		int key_301 = 0;
		boolean color_168 = true;
		int key_299 = 4;
		Object value_164 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_174 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_166.key = key_173;
		right_166.value = value_174;
		right_166.left = left_175;
		right_166.right = right_176;
		right_166.parent = parent_177;
		right_166.color = color_178;
		right_4.key = key_457;
		right_4.value = value_462;
		right_4.left = left_460;
		right_4.right = right_458;
		right_4.parent = obj.root;
		right_4.color = color_461;
		left_15.key = key_472;
		left_15.value = value_477;
		left_15.left = left_475;
		left_15.right = right_473;
		left_15.parent = left_300;
		left_15.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove106() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry right_304 = right_4;
		Entry right_26 = null;
		Entry left_451 = null;
		Entry right_449 = null;
		Entry left_459 = null;
		Entry right_457 = null;
		obj.size = 6;
		boolean color_6 = true;
		int key = 0;
		boolean color_460 = true;
		int key_303 = 0;
		int key_302 = -2;
		boolean color_28 = true;
		int key_305 = 2;
		int key_448 = -3;
		boolean color_452 = true;
		int key_33 = 1;
		int key_300 = -2;
		int key_456 = -1;
		boolean color_38 = false;
		boolean color_18 = false;
		int key_1 = 0;
		int key_13 = -2;
		int key_23 = 2;
		Object value_461 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_34 = null;
		Object value_24 = null;
		Object value_453 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_15.key = key_448;
		left_15.value = value_453;
		left_15.left = left_451;
		left_15.right = right_449;
		left_15.parent = left_299;
		left_15.color = color_452;
		right_16.key = key_456;
		right_16.value = value_461;
		right_16.left = left_459;
		right_16.right = right_457;
		right_16.parent = left_301;
		right_16.color = color_460;
		obj.remove(key);
	}

	@Test
	public void test_remove107() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry right_326 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_15;
		Entry left_325 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		Entry left_436 = null;
		Entry right_434 = null;
		obj.size = 5;
		boolean color_6 = true;
		boolean color_437 = true;
		int key = -1;
		int key_433 = 1;
		int key_302 = 2;
		boolean color_422 = true;
		int key_304 = -2;
		int key_323 = -2;
		boolean color_18 = false;
		int key_1 = 2;
		int key_13 = 0;
		int key_301 = 0;
		boolean color_328 = true;
		int key_418 = 3;
		int key_299 = 2;
		Object value_14 = null;
		Object value_324 = null;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_438 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_4.key = key_418;
		right_4.value = value_423;
		right_4.left = left_421;
		right_4.right = right_419;
		right_4.parent = obj.root;
		right_4.color = color_422;
		right_16.key = key_433;
		right_16.value = value_438;
		right_16.left = left_436;
		right_16.right = right_434;
		right_16.parent = left_300;
		right_16.color = color_437;
		obj.remove(key);
	}

	@Test
	public void test_remove108() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_225 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry parent_257 = right_26;
		Entry right_226 = null;
		Entry parent_217 = right_4;
		Entry left_300 = left_225;
		Entry left_303 = left_225;
		Entry left_306 = left_25;
		Entry left_309 = left_25;
		Entry left_255 = null;
		Entry right_256 = null;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry left_505 = null;
		Entry right_503 = null;
		int key_223 = 2;
		obj.size = 6;
		int key_311 = 0;
		int key_310 = -1;
		int key_502 = -3;
		boolean color_6 = true;
		int key = 2;
		boolean color_228 = true;
		int key_307 = -2;
		int key_302 = 1;
		boolean color_28 = false;
		int key_305 = 2;
		boolean color_218 = true;
		boolean color_258 = false;
		int key_213 = -1;
		int key_304 = 1;
		boolean color_506 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = 0;
		int key_308 = -1;
		int key_253 = 1;
		int key_299 = -2;
		Object value_24 = null;
		Object value_2 = null;
		Object value_224 = null;
		Object value_507 = null;
		obj.modCount = 0;
		Object value_254 = null;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_225.key = key_253;
		left_225.value = value_254;
		left_225.left = left_255;
		left_225.right = right_256;
		left_225.parent = parent_257;
		left_225.color = color_258;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_3.key = key_502;
		left_3.value = value_507;
		left_3.left = left_505;
		left_3.right = right_503;
		left_3.parent = obj.root;
		left_3.color = color_506;
		obj.remove(key);
	}

	@Test
	public void test_remove109() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry left_300 = left_3;
		Entry right_4 = null;
		Entry right_16 = null;
		obj.size = 2;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = false;
		int key_1 = 2;
		int key_13 = 1;
		int key_301 = 1;
		int key_302 = 2;
		int key_299 = 2;
		Object value_14 = null;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test_remove110() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = null;
		obj.size = 0;
		int key = 0;
		obj.modCount = 0;
		obj.remove(key);
	}

	@Test
	public void test_remove111() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry parent_47 = right_4;
		Entry parent_17 = obj.root;
		Entry right_299 = right_26;
		Entry right_302 = right_26;
		Entry left_304 = left_3;
		Entry left_306 = left_3;
		Entry left_45 = null;
		Entry right_46 = null;
		Entry left_481 = null;
		Entry right_479 = null;
		Entry left_489 = null;
		Entry right_487 = null;
		obj.size = 6;
		boolean color_6 = true;
		int key = 0;
		int key_43 = 1;
		int key_478 = -4;
		int key_307 = -3;
		int key_303 = 1;
		boolean color_28 = true;
		int key_305 = -3;
		int key_300 = 0;
		boolean color_48 = false;
		boolean color_18 = false;
		int key_23 = 0;
		int key_1 = -1;
		int key_13 = -3;
		boolean color_482 = true;
		int key_301 = 1;
		int key_308 = -1;
		int key_486 = -2;
		boolean color_490 = true;
		Object value_483 = null;
		Object value_491 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_478;
		left_15.value = value_483;
		left_15.left = left_481;
		left_15.right = right_479;
		left_15.parent = left_304;
		left_15.color = color_482;
		right_16.key = key_486;
		right_16.value = value_491;
		right_16.left = left_489;
		right_16.right = right_487;
		right_16.parent = left_306;
		right_16.color = color_490;
		obj.remove(key);
	}

	@Test
	public void test_remove112() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry right_326 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry right_166 = null;
		Entry parent_337 = left_15;
		Entry parent_347 = left_15;
		Entry parent_27 = obj.root;
		Entry right_299 = right_326;
		Entry right_302 = right_326;
		Entry left_305 = left_325;
		Entry left_307 = left_325;
		Entry right_310 = right_4;
		Entry right_313 = right_4;
		Entry left_335 = null;
		Entry right_336 = null;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_612 = null;
		Entry right_610 = null;
		Entry left_620 = null;
		Entry right_618 = null;
		int key_333 = -1;
		obj.size = 9;
		int key_311 = 2;
		int key_309 = -2;
		int key_306 = -3;
		int key_314 = 4;
		boolean color_6 = true;
		boolean color_338 = false;
		int key_617 = 5;
		int key = 0;
		boolean color_621 = true;
		int key_343 = -3;
		int key_303 = -1;
		int key_312 = 4;
		boolean color_28 = false;
		int key_304 = 0;
		int key_300 = -2;
		boolean color_613 = true;
		int key_609 = 3;
		int key_163 = 1;
		int key_323 = -2;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		int key_23 = 4;
		int key_301 = -1;
		int key_308 = -3;
		boolean color_168 = true;
		Object value_164 = null;
		Object value_324 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_344 = null;
		Object value_622 = null;
		obj.modCount = 0;
		Object value_334 = null;
		Object value_614 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_326.key = key_333;
		right_326.value = value_334;
		right_326.left = left_335;
		right_326.right = right_336;
		right_326.parent = parent_337;
		right_326.color = color_338;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_609;
		left_25.value = value_614;
		left_25.left = left_612;
		left_25.right = right_610;
		left_25.parent = right_310;
		left_25.color = color_613;
		right_26.key = key_617;
		right_26.value = value_622;
		right_26.left = left_620;
		right_26.right = right_618;
		right_26.parent = right_313;
		right_26.color = color_621;
		obj.remove(key);
	}

	@Test
	public void test_remove113() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_67 = left_3;
		Entry parent_57 = left_3;
		Entry left_55 = null;
		Entry right_56 = null;
		Entry left_300 = left_15;
		Entry left_302 = left_15;
		Entry left_65 = null;
		Entry right_66 = null;
		Entry left_452 = null;
		Entry right_450 = null;
		obj.size = 5;
		boolean color_58 = false;
		boolean color_6 = true;
		int key_63 = -1;
		int key = 0;
		int key_449 = 3;
		int key_303 = -1;
		boolean color_453 = true;
		int key_304 = 0;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_1 = 2;
		int key_13 = 0;
		int key_53 = 1;
		int key_301 = -1;
		int key_299 = 2;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_54 = null;
		Object value_454 = null;
		Object value_2 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		right_4.key = key_449;
		right_4.value = value_454;
		right_4.left = left_452;
		right_4.right = right_450;
		right_4.parent = obj.root;
		right_4.color = color_453;
		obj.remove(key);
	}

	@Test
	public void test_remove114() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry right_166 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry left_325 = null;
		Entry right_326 = null;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry parent_177 = right_16;
		Entry right_300 = right_166;
		Entry right_303 = right_166;
		Entry left_175 = null;
		Entry right_176 = null;
		Entry left_497 = null;
		Entry right_495 = null;
		obj.size = 6;
		int key_173 = -1;
		boolean color_6 = true;
		int key = -4;
		int key_494 = 1;
		boolean color_178 = false;
		int key_302 = -1;
		int key_305 = 0;
		boolean color_498 = true;
		int key_304 = -1;
		int key_163 = -2;
		int key_323 = -4;
		boolean color_18 = false;
		int key_1 = 0;
		int key_13 = -3;
		int key_301 = -2;
		boolean color_328 = true;
		boolean color_168 = true;
		int key_299 = 0;
		Object value_164 = null;
		Object value_14 = null;
		Object value_324 = null;
		obj.modCount = 0;
		Object value_174 = null;
		Object value_499 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_166.key = key_173;
		right_166.value = value_174;
		right_166.left = left_175;
		right_166.right = right_176;
		right_166.parent = parent_177;
		right_166.color = color_178;
		right_4.key = key_494;
		right_4.value = value_499;
		right_4.left = left_497;
		right_4.right = right_495;
		right_4.parent = obj.root;
		right_4.color = color_498;
		obj.remove(key);
	}

	@Test
	public void test_remove115() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry parent_47 = right_4;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry right_304 = right_26;
		Entry right_307 = right_26;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry left_45 = null;
		Entry right_46 = null;
		obj.size = 4;
		int key_306 = 2;
		boolean color_6 = true;
		int key = 0;
		int key_43 = 2;
		int key_303 = 0;
		int key_302 = -1;
		boolean color_28 = true;
		int key_305 = 1;
		int key_300 = -1;
		boolean color_48 = false;
		boolean color_18 = true;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -1;
		int key_308 = 2;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		obj.remove(key);
	}

	@Test
	public void test_remove116() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_225 = new Entry();
		Entry right_226 = new Entry();
		Entry left_3 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry parent_257 = right_26;
		Entry parent_267 = right_26;
		Entry left_265 = null;
		Entry right_266 = null;
		Entry right_300 = right_4;
		Entry left_303 = left_225;
		Entry left_306 = left_225;
		Entry left_255 = null;
		Entry right_256 = null;
		Entry left_494 = null;
		Entry right_492 = null;
		Entry left_509 = null;
		Entry right_507 = null;
		int key_299 = -2;
		int key_223 = 2;
		boolean color_510 = true;
		obj.size = 7;
		boolean color_268 = false;
		boolean color_6 = true;
		int key_491 = -3;
		int key = 2;
		int key_263 = 3;
		boolean color_228 = true;
		int key_307 = 1;
		int key_302 = 0;
		boolean color_28 = false;
		int key_305 = 1;
		boolean color_258 = false;
		int key_304 = 0;
		boolean color_495 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_506 = -1;
		int key_308 = 2;
		int key_253 = 1;
		Object value_24 = null;
		Object value_511 = null;
		Object value_2 = null;
		Object value_264 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_254 = null;
		Object value_496 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_225.key = key_253;
		left_225.value = value_254;
		left_225.left = left_255;
		left_225.right = right_256;
		left_225.parent = parent_257;
		left_225.color = color_258;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_3.key = key_491;
		left_3.value = value_496;
		left_3.left = left_494;
		left_3.right = right_492;
		left_3.parent = obj.root;
		left_3.color = color_495;
		left_25.key = key_506;
		left_25.value = value_511;
		left_25.left = left_509;
		left_25.right = right_507;
		left_25.parent = right_300;
		left_25.color = color_510;
		obj.remove(key);
	}

	@Test
	public void test_remove117() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry right_166 = null;
		Entry left_300 = left_3;
		Entry right_302 = right_16;
		Entry left_165 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		Entry left_436 = null;
		Entry right_434 = null;
		obj.size = 5;
		boolean color_6 = true;
		boolean color_437 = true;
		int key = 0;
		int key_303 = -2;
		int key_433 = -3;
		boolean color_422 = true;
		int key_304 = -1;
		int key_163 = -1;
		boolean color_18 = false;
		int key_1 = 1;
		int key_13 = -2;
		int key_301 = -2;
		int key_418 = 2;
		boolean color_168 = true;
		int key_299 = 1;
		Object value_164 = null;
		Object value_14 = null;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_438 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_4.key = key_418;
		right_4.value = value_423;
		right_4.left = left_421;
		right_4.right = right_419;
		right_4.parent = obj.root;
		right_4.color = color_422;
		left_15.key = key_433;
		left_15.value = value_438;
		left_15.left = left_436;
		left_15.right = right_434;
		left_15.parent = left_300;
		left_15.color = color_437;
		obj.remove(key);
	}

	@Test
	public void test_remove118() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_300 = right_4;
		Entry left_3 = null;
		Entry right_26 = null;
		obj.size = 2;
		int key_1 = -1;
		int key_23 = 1;
		int key_301 = 1;
		boolean color_6 = true;
		boolean color_28 = false;
		int key = 0;
		int key_299 = -1;
		Object value_24 = null;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test_remove119() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry right_226 = null;
		Entry parent_217 = right_4;
		Entry right_216 = null;
		Entry left_215 = null;
		Entry left_456 = null;
		Entry right_454 = null;
		boolean color_457 = true;
		int key_223 = 1;
		obj.size = 5;
		int key_213 = -1;
		boolean color_6 = true;
		int key = 1;
		int key_453 = -3;
		boolean color_228 = true;
		int key_23 = 0;
		int key_1 = -2;
		boolean color_28 = false;
		boolean color_218 = true;
		int key_299 = -2;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_214 = null;
		Object value_458 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_3.key = key_453;
		left_3.value = value_458;
		left_3.left = left_456;
		left_3.right = right_454;
		left_3.parent = obj.root;
		left_3.color = color_457;
		obj.remove(key);
	}

	@Test
	public void test_remove120() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry right_26 = null;
		Entry right_300 = right_4;
		Entry left_3 = null;
		Entry left_25 = null;
		obj.size = 2;
		boolean color_6 = true;
		int key = 0;
		int key_23 = -1;
		int key_1 = -2;
		int key_301 = -2;
		int key_302 = -1;
		boolean color_28 = false;
		int key_299 = -2;
		Object value_24 = null;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test_remove121() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_67 = left_3;
		Entry left_65 = null;
		Entry right_66 = null;
		Entry left_300 = left_3;
		Entry right_16 = null;
		Entry left_420 = null;
		Entry right_418 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_63 = -1;
		boolean color_421 = true;
		int key = -1;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_1 = 1;
		int key_13 = 0;
		int key_301 = 0;
		int key_302 = 1;
		int key_417 = 2;
		int key_299 = 1;
		Object value_14 = null;
		Object value_422 = null;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		right_4.key = key_417;
		right_4.value = value_422;
		right_4.left = left_420;
		right_4.right = right_418;
		right_4.parent = obj.root;
		right_4.color = color_421;
		obj.remove(key);
	}

	@Test
	public void test_remove122() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry right_166 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry parent_177 = right_16;
		Entry left_300 = left_15;
		Entry left_302 = left_15;
		Entry right_305 = right_166;
		Entry right_308 = right_166;
		Entry left_325 = null;
		Entry right_326 = null;
		Entry left_175 = null;
		Entry right_176 = null;
		Entry left_499 = null;
		Entry right_497 = null;
		int key_496 = 4;
		obj.size = 6;
		int key_173 = 2;
		int key_309 = 2;
		int key_306 = 1;
		int key_310 = 3;
		boolean color_6 = true;
		int key = 0;
		int key_307 = 2;
		int key_303 = -1;
		boolean color_178 = false;
		int key_304 = 0;
		boolean color_500 = true;
		int key_163 = 1;
		int key_323 = -1;
		boolean color_18 = false;
		int key_1 = 3;
		int key_13 = 0;
		int key_301 = -1;
		boolean color_328 = true;
		boolean color_168 = true;
		int key_299 = 3;
		Object value_164 = null;
		Object value_324 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_501 = null;
		obj.modCount = 0;
		Object value_174 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_166.key = key_173;
		right_166.value = value_174;
		right_166.left = left_175;
		right_166.right = right_176;
		right_166.parent = parent_177;
		right_166.color = color_178;
		right_4.key = key_496;
		right_4.value = value_501;
		right_4.left = left_499;
		right_4.right = right_497;
		right_4.parent = obj.root;
		right_4.color = color_500;
		obj.remove(key);
	}

	@Test
	public void test_remove123() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry parent_47 = right_4;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry right_304 = right_26;
		Entry right_307 = right_26;
		Entry left_45 = null;
		Entry right_46 = null;
		Entry left_462 = null;
		Entry right_460 = null;
		Entry left_470 = null;
		Entry right_468 = null;
		obj.size = 6;
		int key_306 = 1;
		boolean color_471 = true;
		boolean color_6 = true;
		int key = -1;
		int key_43 = 1;
		boolean color_463 = true;
		int key_302 = -3;
		int key_303 = -1;
		boolean color_28 = true;
		int key_305 = 0;
		int key_300 = -3;
		int key_459 = -4;
		boolean color_48 = false;
		int key_467 = -2;
		boolean color_18 = false;
		int key_23 = 0;
		int key_1 = -1;
		int key_13 = -3;
		int key_308 = 1;
		Object value_472 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_464 = null;
		obj.modCount = 0;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_15.key = key_459;
		left_15.value = value_464;
		left_15.left = left_462;
		left_15.right = right_460;
		left_15.parent = left_299;
		left_15.color = color_463;
		right_16.key = key_467;
		right_16.value = value_472;
		right_16.left = left_470;
		right_16.right = right_468;
		right_16.parent = left_301;
		right_16.color = color_471;
		obj.remove(key);
	}

	@Test
	public void test_remove124() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry right_300 = right_4;
		Entry right_303 = right_26;
		Entry right_226 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		Entry left_436 = null;
		Entry right_434 = null;
		int key_223 = 2;
		obj.size = 5;
		boolean color_6 = true;
		boolean color_437 = true;
		int key = 1;
		boolean color_228 = true;
		int key_433 = -1;
		int key_302 = 0;
		boolean color_28 = false;
		boolean color_422 = true;
		int key_304 = 2;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_418 = -3;
		int key_299 = -2;
		Object value_224 = null;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_2 = null;
		Object value_438 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_3.key = key_418;
		left_3.value = value_423;
		left_3.left = left_421;
		left_3.right = right_419;
		left_3.parent = obj.root;
		left_3.color = color_422;
		left_25.key = key_433;
		left_25.value = value_438;
		left_25.left = left_436;
		left_25.right = right_434;
		left_25.parent = right_300;
		left_25.color = color_437;
		obj.remove(key);
	}

	@Test
	public void test_remove125() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_67 = left_3;
		Entry right_16 = null;
		Entry left_300 = left_15;
		Entry left_302 = left_15;
		Entry left_65 = null;
		Entry right_66 = null;
		Entry left_423 = null;
		Entry right_421 = null;
		int key_420 = 2;
		obj.size = 4;
		boolean color_424 = true;
		int key_304 = 0;
		boolean color_6 = true;
		int key_63 = -1;
		int key = 0;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_1 = 1;
		int key_13 = 0;
		int key_301 = -1;
		int key_303 = -1;
		int key_299 = 1;
		Object value_14 = null;
		Object value_425 = null;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		right_4.key = key_420;
		right_4.value = value_425;
		right_4.left = left_423;
		right_4.right = right_421;
		right_4.parent = obj.root;
		right_4.color = color_424;
		obj.remove(key);
	}

	@Test
	public void test_remove126() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry parent_5 = null;
		Entry right_4 = null;
		Entry left_3 = null;
		boolean color_6 = true;
		obj.size = 1;
		int key = 0;
		int key_1 = -1;
		int key_299 = -1;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		obj.remove(key);
	}

	@Test
	public void test_remove127() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_165 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry parent_187 = right_16;
		Entry right_186 = null;
		Entry left_300 = left_3;
		Entry right_302 = right_16;
		Entry left_305 = left_165;
		Entry right_166 = null;
		Entry left_185 = null;
		Entry left_460 = null;
		Entry right_458 = null;
		Entry left_475 = null;
		Entry right_473 = null;
		obj.size = 6;
		int key_306 = 0;
		boolean color_6 = true;
		int key = 2;
		boolean color_188 = false;
		int key_457 = 5;
		int key_307 = 1;
		int key_303 = 3;
		boolean color_461 = true;
		int key_304 = 4;
		int key_183 = 1;
		int key_472 = -1;
		boolean color_476 = true;
		int key_163 = 3;
		boolean color_18 = false;
		int key_1 = 4;
		int key_13 = 0;
		int key_301 = 0;
		boolean color_168 = true;
		int key_299 = 4;
		Object value_164 = null;
		Object value_477 = null;
		Object value_2 = null;
		Object value_462 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_184 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_165.key = key_183;
		left_165.value = value_184;
		left_165.left = left_185;
		left_165.right = right_186;
		left_165.parent = parent_187;
		left_165.color = color_188;
		right_4.key = key_457;
		right_4.value = value_462;
		right_4.left = left_460;
		right_4.right = right_458;
		right_4.parent = obj.root;
		right_4.color = color_461;
		left_15.key = key_472;
		left_15.value = value_477;
		left_15.left = left_475;
		left_15.right = right_473;
		left_15.parent = left_300;
		left_15.color = color_476;
		obj.remove(key);
	}

	@Test
	public void test_remove128() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_25 = new Entry();
		Entry right_216 = new Entry();
		Entry left_215 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry right_226 = null;
		Entry parent_217 = right_4;
		Entry parent_247 = left_25;
		Entry parent_237 = left_25;
		Entry right_300 = right_216;
		Entry right_303 = right_216;
		Entry left_306 = left_215;
		Entry left_309 = left_215;
		Entry left_245 = null;
		Entry right_246 = null;
		Entry left_235 = null;
		Entry right_236 = null;
		Entry left_544 = null;
		Entry right_542 = null;
		boolean color_248 = false;
		int key_223 = 1;
		obj.size = 7;
		int key_311 = -2;
		int key_310 = -3;
		boolean color_6 = true;
		int key = 1;
		boolean color_228 = true;
		int key_307 = -4;
		int key_541 = -5;
		boolean color_238 = false;
		int key_302 = -1;
		boolean color_28 = false;
		int key_305 = 0;
		boolean color_218 = true;
		int key_233 = -3;
		int key_213 = -2;
		int key_243 = -1;
		int key_304 = -1;
		boolean color_545 = true;
		int key_23 = 0;
		int key_1 = -4;
		int key_301 = -2;
		int key_308 = -3;
		int key_299 = -4;
		Object value_244 = null;
		Object value_24 = null;
		Object value_234 = null;
		Object value_2 = null;
		Object value_224 = null;
		Object value_546 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_216.key = key_243;
		right_216.value = value_244;
		right_216.left = left_245;
		right_216.right = right_246;
		right_216.parent = parent_247;
		right_216.color = color_248;
		left_215.key = key_233;
		left_215.value = value_234;
		left_215.left = left_235;
		left_215.right = right_236;
		left_215.parent = parent_237;
		left_215.color = color_238;
		left_3.key = key_541;
		left_3.value = value_546;
		left_3.left = left_544;
		left_3.right = right_542;
		left_3.parent = obj.root;
		left_3.color = color_545;
		obj.remove(key);
	}

	@Test
	public void test_remove129() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry left_325 = null;
		Entry right_326 = null;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry right_166 = null;
		Entry left_452 = null;
		Entry right_450 = null;
		obj.size = 5;
		boolean color_6 = true;
		int key = -1;
		int key_163 = 1;
		int key_323 = -1;
		int key_449 = 3;
		boolean color_18 = false;
		int key_1 = 2;
		boolean color_328 = true;
		int key_13 = 0;
		boolean color_453 = true;
		boolean color_168 = true;
		int key_299 = 2;
		Object value_164 = null;
		Object value_14 = null;
		Object value_324 = null;
		obj.modCount = 0;
		Object value_454 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_4.key = key_449;
		right_4.value = value_454;
		right_4.left = left_452;
		right_4.right = right_450;
		right_4.parent = obj.root;
		right_4.color = color_453;
		obj.remove(key);
	}

	@Test
	public void test_remove130() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry right_226 = null;
		Entry right_216 = null;
		Entry left_215 = null;
		Entry left_453 = null;
		Entry right_451 = null;
		obj.size = 5;
		int key_213 = -1;
		int key_223 = 1;
		boolean color_6 = true;
		boolean color_454 = true;
		int key = 0;
		boolean color_228 = true;
		int key_23 = 0;
		int key_1 = -2;
		boolean color_28 = false;
		int key_450 = -3;
		boolean color_218 = true;
		int key_299 = -2;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_455 = null;
		Object value_214 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_3.key = key_450;
		left_3.value = value_455;
		left_3.left = left_453;
		left_3.right = right_451;
		left_3.parent = obj.root;
		left_3.color = color_454;
		obj.remove(key);
	}

	@Test
	public void test_remove131() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry right_226 = new Entry();
		Entry left_3 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry parent_267 = right_26;
		Entry left_265 = null;
		Entry right_266 = null;
		Entry left_225 = null;
		Entry right_300 = right_4;
		Entry left_454 = null;
		Entry right_452 = null;
		Entry left_469 = null;
		Entry right_467 = null;
		int key_299 = -2;
		boolean color_455 = true;
		int key_223 = 1;
		obj.size = 6;
		int key_466 = -1;
		boolean color_268 = false;
		boolean color_6 = true;
		int key = 2;
		int key_263 = 2;
		boolean color_228 = true;
		int key_302 = 0;
		boolean color_28 = false;
		int key_451 = -3;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		boolean color_470 = true;
		Object value_264 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_471 = null;
		Object value_24 = null;
		Object value_456 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_3.key = key_451;
		left_3.value = value_456;
		left_3.left = left_454;
		left_3.right = right_452;
		left_3.parent = obj.root;
		left_3.color = color_455;
		left_25.key = key_466;
		left_25.value = value_471;
		left_25.left = left_469;
		left_25.right = right_467;
		left_25.parent = right_300;
		left_25.color = color_470;
		obj.remove(key);
	}

	@Test
	public void test_remove132() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_36 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry left_35 = null;
		Entry parent_107 = left_25;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry right_304 = right_4;
		Entry right_306 = right_36;
		Entry right_309 = right_36;
		Entry left_105 = null;
		Entry right_106 = null;
		Entry left_500 = null;
		Entry right_498 = null;
		Entry left_515 = null;
		Entry right_513 = null;
		Entry left_530 = null;
		Entry right_528 = null;
		int key_311 = 0;
		obj.size = 8;
		int key_310 = -1;
		boolean color_6 = true;
		int key = -3;
		int key_103 = -1;
		int key_307 = -2;
		boolean color_501 = true;
		int key_302 = -5;
		int key_303 = -3;
		boolean color_28 = true;
		int key_305 = 0;
		int key_497 = -6;
		int key_512 = -4;
		boolean color_516 = true;
		int key_33 = -2;
		int key_300 = -5;
		boolean color_38 = true;
		boolean color_18 = true;
		boolean color_108 = false;
		int key_1 = -3;
		int key_13 = -5;
		int key_23 = 0;
		int key_308 = -1;
		boolean color_531 = true;
		int key_527 = 1;
		Object value_34 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_517 = null;
		Object value_14 = null;
		Object value_104 = null;
		Object value_502 = null;
		obj.modCount = 0;
		Object value_532 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		right_36.key = key_103;
		right_36.value = value_104;
		right_36.left = left_105;
		right_36.right = right_106;
		right_36.parent = parent_107;
		right_36.color = color_108;
		left_15.key = key_497;
		left_15.value = value_502;
		left_15.left = left_500;
		left_15.right = right_498;
		left_15.parent = left_299;
		left_15.color = color_501;
		right_16.key = key_512;
		right_16.value = value_517;
		right_16.left = left_515;
		right_16.right = right_513;
		right_16.parent = left_301;
		right_16.color = color_516;
		right_26.key = key_527;
		right_26.value = value_532;
		right_26.left = left_530;
		right_26.right = right_528;
		right_26.parent = right_304;
		right_26.color = color_531;
		obj.remove(key);
	}

	@Test
	public void test_remove133() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry right_304 = right_4;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry right_26 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_33 = 1;
		int key_300 = -1;
		int key = 0;
		boolean color_38 = false;
		boolean color_18 = true;
		int key_23 = 2;
		int key_1 = 0;
		int key_13 = -1;
		int key_302 = -1;
		boolean color_28 = true;
		int key_303 = 0;
		int key_305 = 2;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_34 = null;
		Object value_24 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		obj.remove(key);
	}

	@Test
	public void test_remove134() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry right_16 = null;
		Entry left_15 = null;
		obj.size = 3;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_23 = 0;
		int key_1 = -1;
		int key_13 = -2;
		boolean color_28 = true;
		Object value_24 = null;
		Object value_14 = null;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test_remove135() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry left_225 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_227 = right_4;
		Entry parent_257 = right_26;
		Entry left_255 = null;
		Entry right_256 = null;
		Entry left_300 = left_25;
		Entry left_303 = left_25;
		Entry right_306 = right_26;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry right_226 = null;
		Entry left_488 = null;
		Entry right_486 = null;
		int key_223 = 2;
		obj.size = 6;
		boolean color_6 = true;
		int key = 0;
		boolean color_228 = true;
		int key_307 = 2;
		int key_302 = -1;
		boolean color_28 = false;
		int key_305 = 0;
		boolean color_218 = true;
		boolean color_258 = false;
		int key_213 = -1;
		int key_304 = -1;
		boolean color_489 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_253 = 1;
		int key_485 = -3;
		int key_299 = -2;
		Object value_490 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_254 = null;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_225.key = key_253;
		left_225.value = value_254;
		left_225.left = left_255;
		left_225.right = right_256;
		left_225.parent = parent_257;
		left_225.color = color_258;
		left_3.key = key_485;
		left_3.value = value_490;
		left_3.left = left_488;
		left_3.right = right_486;
		left_3.parent = obj.root;
		left_3.color = color_489;
		obj.remove(key);
	}

	@Test
	public void test_remove136() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_216 = new Entry();
		Entry left_3 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_247 = left_25;
		Entry left_245 = null;
		Entry right_246 = null;
		Entry left_215 = null;
		Entry right_300 = right_4;
		Entry left_451 = null;
		Entry right_449 = null;
		Entry left_466 = null;
		Entry right_464 = null;
		boolean color_467 = true;
		boolean color_248 = false;
		obj.size = 6;
		boolean color_6 = true;
		int key = -1;
		boolean color_28 = false;
		int key_448 = -4;
		boolean color_218 = true;
		boolean color_452 = true;
		int key_463 = 1;
		int key_213 = -2;
		int key_243 = -1;
		int key_23 = 0;
		int key_1 = -3;
		int key_301 = 0;
		int key_299 = -3;
		Object value_244 = null;
		Object value_468 = null;
		obj.modCount = 0;
		Object value_24 = null;
		Object value_453 = null;
		Object value_214 = null;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_216.key = key_243;
		right_216.value = value_244;
		right_216.left = left_245;
		right_216.right = right_246;
		right_216.parent = parent_247;
		right_216.color = color_248;
		left_3.key = key_448;
		left_3.value = value_453;
		left_3.left = left_451;
		left_3.right = right_449;
		left_3.parent = obj.root;
		left_3.color = color_452;
		right_26.key = key_463;
		right_26.value = value_468;
		right_26.left = left_466;
		right_26.right = right_464;
		right_26.parent = right_300;
		right_26.color = color_467;
		obj.remove(key);
	}

	@Test
	public void test_remove137() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry left_300 = left_3;
		Entry right_302 = right_16;
		Entry right_166 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		Entry left_436 = null;
		Entry right_434 = null;
		obj.size = 5;
		boolean color_6 = true;
		boolean color_437 = true;
		int key = 0;
		int key_303 = 1;
		int key_433 = -2;
		boolean color_422 = true;
		int key_304 = 2;
		int key_163 = 1;
		boolean color_18 = false;
		int key_1 = 2;
		int key_13 = -1;
		int key_301 = -1;
		int key_418 = 3;
		boolean color_168 = true;
		int key_299 = 2;
		Object value_164 = null;
		Object value_14 = null;
		Object value_423 = null;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_438 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		right_4.key = key_418;
		right_4.value = value_423;
		right_4.left = left_421;
		right_4.right = right_419;
		right_4.parent = obj.root;
		right_4.color = color_422;
		left_15.key = key_433;
		left_15.value = value_438;
		left_15.left = left_436;
		left_15.right = right_434;
		left_15.parent = left_300;
		left_15.color = color_437;
		obj.remove(key);
	}

	@Test
	public void test_remove138() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_57 = left_3;
		Entry parent_67 = left_3;
		Entry right_299 = right_16;
		Entry right_302 = right_16;
		Entry left_305 = left_15;
		Entry left_307 = left_15;
		Entry left_55 = null;
		Entry right_56 = null;
		Entry left_65 = null;
		Entry right_66 = null;
		obj.size = 5;
		int key_309 = -2;
		int key_306 = -3;
		boolean color_58 = false;
		boolean color_6 = true;
		int key_63 = -3;
		int key = 0;
		int key_303 = -1;
		boolean color_28 = true;
		int key_304 = 0;
		int key_300 = -2;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -2;
		int key_53 = -1;
		int key_301 = -1;
		int key_308 = -3;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_54 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		obj.remove(key);
	}

	@Test
	public void test_remove139() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry right_46 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry parent_47 = right_4;
		Entry left_45 = null;
		Entry parent_127 = right_26;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry right_304 = right_46;
		Entry right_307 = right_46;
		Entry left_125 = null;
		Entry right_126 = null;
		Entry left_534 = null;
		Entry right_532 = null;
		Entry left_549 = null;
		Entry right_547 = null;
		int key_531 = -5;
		obj.size = 8;
		int key_306 = 2;
		boolean color_6 = true;
		boolean color_535 = true;
		int key = -2;
		int key_43 = 1;
		int key_546 = -3;
		int key_302 = -4;
		int key_303 = -2;
		boolean color_28 = true;
		int key_305 = 1;
		int key_33 = -1;
		int key_300 = -4;
		boolean color_48 = true;
		boolean color_38 = true;
		boolean color_18 = true;
		boolean color_550 = true;
		int key_1 = -2;
		int key_13 = -4;
		int key_23 = 0;
		int key_123 = 2;
		int key_308 = 2;
		boolean color_128 = false;
		Object value_124 = null;
		Object value_34 = null;
		Object value_24 = null;
		Object value_551 = null;
		Object value_2 = null;
		Object value_14 = null;
		obj.modCount = 0;
		Object value_536 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		right_46.key = key_123;
		right_46.value = value_124;
		right_46.left = left_125;
		right_46.right = right_126;
		right_46.parent = parent_127;
		right_46.color = color_128;
		left_15.key = key_531;
		left_15.value = value_536;
		left_15.left = left_534;
		left_15.right = right_532;
		left_15.parent = left_299;
		left_15.color = color_535;
		right_16.key = key_546;
		right_16.value = value_551;
		right_16.left = left_549;
		right_16.right = right_547;
		right_16.parent = left_301;
		right_16.color = color_550;
		obj.remove(key);
	}

	@Test
	public void test_remove140() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry right_226 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry parent_267 = right_26;
		Entry left_300 = left_25;
		Entry left_303 = left_25;
		Entry right_306 = right_226;
		Entry right_309 = right_226;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry left_265 = null;
		Entry right_266 = null;
		Entry left_499 = null;
		Entry right_497 = null;
		int key_496 = -3;
		int key_223 = 1;
		obj.size = 6;
		int key_310 = 2;
		boolean color_268 = false;
		boolean color_6 = true;
		int key = 0;
		int key_263 = 2;
		boolean color_228 = true;
		int key_307 = 1;
		int key_302 = -1;
		boolean color_28 = false;
		int key_305 = 0;
		boolean color_218 = true;
		int key_213 = -1;
		int key_304 = -1;
		boolean color_500 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_308 = 2;
		int key_299 = -2;
		Object value_24 = null;
		Object value_2 = null;
		Object value_264 = null;
		Object value_224 = null;
		Object value_501 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_3.key = key_496;
		left_3.value = value_501;
		left_3.left = left_499;
		left_3.right = right_497;
		left_3.parent = obj.root;
		left_3.color = color_500;
		obj.remove(key);
	}

	@Test
	public void test_remove141() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry left_225 = new Entry();
		Entry right_226 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry right_216 = null;
		Entry parent_227 = right_4;
		Entry parent_257 = right_26;
		Entry parent_267 = right_26;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry left_304 = left_225;
		Entry left_307 = left_225;
		Entry right_310 = right_226;
		Entry right_313 = right_226;
		Entry left_255 = null;
		Entry right_256 = null;
		Entry left_265 = null;
		Entry right_266 = null;
		Entry left_573 = null;
		Entry right_571 = null;
		Entry left_581 = null;
		Entry right_579 = null;
		int key_223 = 2;
		obj.size = 9;
		int key_306 = 1;
		int key_309 = 2;
		boolean color_268 = false;
		boolean color_6 = true;
		int key_311 = 2;
		int key = -2;
		int key_263 = 3;
		boolean color_228 = true;
		boolean color_582 = true;
		int key_312 = 3;
		int key_302 = -4;
		int key_303 = -2;
		int key_570 = -5;
		boolean color_28 = false;
		int key_305 = 0;
		boolean color_574 = true;
		boolean color_218 = true;
		boolean color_258 = false;
		int key_213 = -1;
		int key_300 = -4;
		boolean color_18 = false;
		int key_1 = -2;
		int key_13 = -4;
		int key_23 = 0;
		int key_308 = 1;
		int key_578 = -3;
		int key_253 = 1;
		int key_314 = 3;
		Object value_24 = null;
		Object value_2 = null;
		Object value_264 = null;
		Object value_583 = null;
		Object value_14 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_254 = null;
		Object value_575 = null;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		left_225.key = key_253;
		left_225.value = value_254;
		left_225.left = left_255;
		left_225.right = right_256;
		left_225.parent = parent_257;
		left_225.color = color_258;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_15.key = key_570;
		left_15.value = value_575;
		left_15.left = left_573;
		left_15.right = right_571;
		left_15.parent = left_299;
		left_15.color = color_574;
		right_16.key = key_578;
		right_16.value = value_583;
		right_16.left = left_581;
		right_16.right = right_579;
		right_16.parent = left_301;
		right_16.color = color_582;
		obj.remove(key);
	}

	@Test
	public void test_remove142() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry right_166 = null;
		Entry parent_327 = left_3;
		Entry right_326 = null;
		Entry parent_347 = left_15;
		Entry parent_27 = obj.root;
		Entry left_299 = left_325;
		Entry left_301 = left_325;
		Entry right_304 = right_4;
		Entry right_307 = right_4;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_556 = null;
		Entry right_554 = null;
		Entry left_564 = null;
		Entry right_562 = null;
		obj.size = 8;
		boolean color_557 = true;
		int key_306 = 4;
		boolean color_6 = true;
		int key = 1;
		int key_553 = 3;
		int key_343 = -2;
		int key_303 = -1;
		int key_302 = -2;
		boolean color_28 = false;
		int key_305 = 2;
		boolean color_565 = true;
		int key_561 = 5;
		int key_300 = -2;
		int key_163 = 1;
		int key_323 = -1;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		int key_23 = 4;
		int key_308 = 4;
		boolean color_168 = true;
		Object value_164 = null;
		Object value_324 = null;
		Object value_566 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_558 = null;
		Object value_14 = null;
		Object value_344 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_553;
		left_25.value = value_558;
		left_25.left = left_556;
		left_25.right = right_554;
		left_25.parent = right_304;
		left_25.color = color_557;
		right_26.key = key_561;
		right_26.value = value_566;
		right_26.left = left_564;
		right_26.right = right_562;
		right_26.parent = right_307;
		right_26.color = color_565;
		obj.remove(key);
	}

	@Test
	public void test_remove143() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_216 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry left_215 = null;
		Entry parent_247 = left_25;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry right_304 = right_4;
		Entry right_306 = right_216;
		Entry right_309 = right_216;
		Entry left_245 = null;
		Entry right_246 = null;
		Entry left_496 = null;
		Entry right_494 = null;
		Entry left_504 = null;
		Entry right_502 = null;
		Entry left_512 = null;
		Entry right_510 = null;
		boolean color_248 = false;
		int key_311 = 0;
		obj.size = 8;
		int key_310 = -1;
		boolean color_6 = true;
		int key = -3;
		int key_307 = -2;
		int key_303 = -3;
		int key_302 = -5;
		boolean color_28 = false;
		int key_305 = 0;
		boolean color_218 = true;
		int key_213 = -2;
		int key_243 = -1;
		int key_300 = -5;
		int key_501 = -4;
		boolean color_513 = true;
		boolean color_505 = true;
		int key_509 = 1;
		boolean color_18 = false;
		int key_1 = -3;
		int key_13 = -5;
		int key_23 = 0;
		boolean color_497 = true;
		int key_308 = -1;
		int key_493 = -6;
		Object value_244 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_514 = null;
		Object value_14 = null;
		Object value_506 = null;
		obj.modCount = 0;
		Object value_498 = null;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_216.key = key_243;
		right_216.value = value_244;
		right_216.left = left_245;
		right_216.right = right_246;
		right_216.parent = parent_247;
		right_216.color = color_248;
		left_15.key = key_493;
		left_15.value = value_498;
		left_15.left = left_496;
		left_15.right = right_494;
		left_15.parent = left_299;
		left_15.color = color_497;
		right_16.key = key_501;
		right_16.value = value_506;
		right_16.left = left_504;
		right_16.right = right_502;
		right_16.parent = left_301;
		right_16.color = color_505;
		right_26.key = key_509;
		right_26.value = value_514;
		right_26.left = left_512;
		right_26.right = right_510;
		right_26.parent = right_304;
		right_26.color = color_513;
		obj.remove(key);
	}

	@Test
	public void test_remove144() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_16 = new Entry();
		Entry left_325 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_327 = left_3;
		Entry parent_167 = left_3;
		Entry left_165 = null;
		Entry right_166 = null;
		Entry right_326 = null;
		Entry parent_347 = left_15;
		Entry parent_27 = obj.root;
		Entry left_299 = left_325;
		Entry left_301 = left_325;
		Entry right_304 = right_4;
		Entry right_307 = right_4;
		Entry left_345 = null;
		Entry right_346 = null;
		Entry left_25 = null;
		Entry right_26 = null;
		obj.size = 6;
		int key_306 = 3;
		boolean color_6 = true;
		int key = 0;
		int key_343 = -2;
		int key_303 = -1;
		int key_302 = -2;
		boolean color_28 = true;
		int key_305 = 2;
		int key_300 = -2;
		int key_163 = 1;
		int key_323 = -1;
		boolean color_18 = false;
		boolean color_348 = false;
		int key_1 = 2;
		int key_13 = 0;
		boolean color_328 = true;
		int key_23 = 3;
		int key_308 = 3;
		boolean color_168 = true;
		Object value_164 = null;
		Object value_324 = null;
		Object value_24 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_344 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_323;
		left_15.value = value_324;
		left_15.left = left_325;
		left_15.right = right_326;
		left_15.parent = parent_327;
		left_15.color = color_328;
		right_16.key = key_163;
		right_16.value = value_164;
		right_16.left = left_165;
		right_16.right = right_166;
		right_16.parent = parent_167;
		right_16.color = color_168;
		left_325.key = key_343;
		left_325.value = value_344;
		left_325.left = left_345;
		left_325.right = right_346;
		left_325.parent = parent_347;
		left_325.color = color_348;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test_remove145() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry right_226 = new Entry();
		Entry left_225 = new Entry();
		Entry left_3 = new Entry();
		Entry left_25 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_227 = right_4;
		Entry parent_267 = right_26;
		Entry left_265 = null;
		Entry right_266 = null;
		Entry parent_257 = right_26;
		Entry right_300 = right_4;
		Entry left_303 = left_225;
		Entry left_306 = left_225;
		Entry left_255 = null;
		Entry right_256 = null;
		Entry left_497 = null;
		Entry right_495 = null;
		Entry left_512 = null;
		Entry right_510 = null;
		int key_299 = -2;
		int key_223 = 2;
		obj.size = 7;
		boolean color_268 = false;
		boolean color_6 = true;
		int key = 3;
		int key_263 = 3;
		boolean color_228 = true;
		int key_494 = -3;
		int key_307 = 1;
		int key_302 = 0;
		boolean color_28 = false;
		int key_305 = 1;
		boolean color_498 = true;
		boolean color_258 = false;
		int key_304 = 0;
		boolean color_513 = true;
		int key_509 = -1;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_308 = 2;
		int key_253 = 1;
		Object value_24 = null;
		Object value_2 = null;
		Object value_514 = null;
		Object value_264 = null;
		Object value_224 = null;
		obj.modCount = 0;
		Object value_254 = null;
		Object value_499 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		right_226.key = key_263;
		right_226.value = value_264;
		right_226.left = left_265;
		right_226.right = right_266;
		right_226.parent = parent_267;
		right_226.color = color_268;
		left_225.key = key_253;
		left_225.value = value_254;
		left_225.left = left_255;
		left_225.right = right_256;
		left_225.parent = parent_257;
		left_225.color = color_258;
		left_3.key = key_494;
		left_3.value = value_499;
		left_3.left = left_497;
		left_3.right = right_495;
		left_3.parent = obj.root;
		left_3.color = color_498;
		left_25.key = key_509;
		left_25.value = value_514;
		left_25.left = left_512;
		left_25.right = right_510;
		left_25.parent = right_300;
		left_25.color = color_513;
		obj.remove(key);
	}

	@Test
	public void test_remove146() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_215 = new Entry();
		Entry right_216 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_237 = left_25;
		Entry parent_247 = left_25;
		Entry right_299 = right_4;
		Entry left_301 = left_215;
		Entry left_304 = left_215;
		Entry right_307 = right_216;
		Entry right_310 = right_216;
		Entry left_235 = null;
		Entry right_236 = null;
		Entry left_245 = null;
		Entry right_246 = null;
		Entry left_541 = null;
		Entry right_539 = null;
		boolean color_248 = false;
		int key_311 = 3;
		obj.size = 7;
		int key_309 = 3;
		int key_306 = 2;
		boolean color_6 = true;
		int key = -1;
		int key_312 = 4;
		boolean color_238 = false;
		int key_303 = 1;
		boolean color_542 = true;
		int key_302 = 0;
		boolean color_28 = false;
		int key_305 = 1;
		boolean color_218 = true;
		int key_233 = 1;
		int key_213 = 2;
		int key_243 = 3;
		int key_300 = 4;
		int key_538 = 5;
		boolean color_18 = true;
		int key_23 = 4;
		int key_1 = 0;
		int key_13 = -1;
		int key_308 = 2;
		Object value_244 = null;
		Object value_24 = null;
		Object value_234 = null;
		Object value_2 = null;
		Object value_14 = null;
		Object value_543 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		left_215.key = key_233;
		left_215.value = value_234;
		left_215.left = left_235;
		left_215.right = right_236;
		left_215.parent = parent_237;
		left_215.color = color_238;
		right_216.key = key_243;
		right_216.value = value_244;
		right_216.left = left_245;
		right_216.right = right_246;
		right_216.parent = parent_247;
		right_216.color = color_248;
		right_26.key = key_538;
		right_26.value = value_543;
		right_26.left = left_541;
		right_26.right = right_539;
		right_26.parent = right_299;
		right_26.color = color_542;
		obj.remove(key);
	}

	@Test
	public void test_remove147() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry left_3 = null;
		obj.size = 2;
		int key_1 = -1;
		int key_23 = 0;
		boolean color_6 = true;
		boolean color_28 = false;
		int key = 0;
		Object value_24 = null;
		Object value_2 = null;
		obj.modCount = 0;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test_remove148() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry right_216 = new Entry();
		Entry left_215 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_217 = right_4;
		Entry parent_227 = right_4;
		Entry left_225 = null;
		Entry right_226 = null;
		Entry parent_247 = left_25;
		Entry parent_237 = left_25;
		Entry right_300 = right_216;
		Entry right_303 = right_216;
		Entry left_306 = left_215;
		Entry left_309 = left_215;
		Entry left_245 = null;
		Entry right_246 = null;
		Entry left_235 = null;
		Entry right_236 = null;
		Entry left_541 = null;
		Entry right_539 = null;
		boolean color_248 = false;
		int key_223 = 1;
		obj.size = 7;
		int key_311 = -2;
		int key_310 = -3;
		boolean color_6 = true;
		int key = 0;
		boolean color_228 = true;
		int key_307 = -4;
		boolean color_238 = false;
		boolean color_542 = true;
		int key_302 = -1;
		boolean color_28 = false;
		int key_305 = 0;
		boolean color_218 = true;
		int key_233 = -3;
		int key_213 = -2;
		int key_243 = -1;
		int key_304 = -1;
		int key_538 = -5;
		int key_23 = 0;
		int key_1 = -4;
		int key_301 = -2;
		int key_308 = -3;
		int key_299 = -4;
		Object value_244 = null;
		Object value_24 = null;
		Object value_234 = null;
		Object value_2 = null;
		Object value_224 = null;
		Object value_543 = null;
		obj.modCount = 0;
		Object value_214 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_213;
		left_25.value = value_214;
		left_25.left = left_215;
		left_25.right = right_216;
		left_25.parent = parent_217;
		left_25.color = color_218;
		right_26.key = key_223;
		right_26.value = value_224;
		right_26.left = left_225;
		right_26.right = right_226;
		right_26.parent = parent_227;
		right_26.color = color_228;
		right_216.key = key_243;
		right_216.value = value_244;
		right_216.left = left_245;
		right_216.right = right_246;
		right_216.parent = parent_247;
		right_216.color = color_248;
		left_215.key = key_233;
		left_215.value = value_234;
		left_215.left = left_235;
		left_215.right = right_236;
		left_215.parent = parent_237;
		left_215.color = color_238;
		left_3.key = key_538;
		left_3.value = value_543;
		left_3.left = left_541;
		left_3.right = right_539;
		left_3.parent = obj.root;
		left_3.color = color_542;
		obj.remove(key);
	}

}

