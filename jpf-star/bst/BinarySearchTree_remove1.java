package bst;

import common.Utilities;
import org.junit.Test;
import gov.nasa.jpf.util.test.TestJPF;

public class BinarySearchTree_remove1 extends TestJPF {

	@Test
	public void test_remove1() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_88 = null;
		BinaryNode right_89 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		int element_79 = -2;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_6 = 0;
		int element_77 = 0;
		int element_87 = -1;
		int x = -1;
		int element_9 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		obj.remove(x);
	}

	@Test
	public void test_remove2() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = new BinaryNode();
		BinaryNode left_166 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_118 = null;
		BinaryNode right_167 = null;
		int element_117 = -1;
		int element_79 = 3;
		int element_1 = 3;
		int element_165 = 1;
		int element_76 = 3;
		int element_114 = 2;
		int element_78 = 2;
		int element_82 = 1;
		int element_81 = -1;
		int element_6 = -2;
		int element_83 = 2;
		int element_77 = -2;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_119.element = element_165;
		right_119.left = left_166;
		right_119.right = right_167;
		obj.remove(x);
	}

	@Test
	public void test_remove3() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = null;
		BinaryNode right_305 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		int element_303 = 1;
		int element_77 = -1;
		int element_1 = 0;
		int element_76 = -1;
		int element_78 = 0;
		int x = 0;
		int element_6 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		obj.remove(x);
	}

	@Test
	public void test_remove4() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = new BinaryNode();
		BinaryNode right_596 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode right_593 = null;
		BinaryNode left_595 = null;
		int element_591 = 3;
		int element_303 = -1;
		int element_79 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -1;
		int element_82 = 0;
		int element_83 = 1;
		int element_81 = 3;
		int element_594 = 1;
		int element_77 = -2;
		int element_80 = 0;
		int x = 2;
		int element_495 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		left_592.element = element_594;
		left_592.left = left_595;
		left_592.right = right_596;
		obj.remove(x);
	}

	@Test
	public void test_remove5() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = new BinaryNode();
		BinaryNode right_596 = new BinaryNode();
		BinaryNode right_620 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode right_593 = null;
		BinaryNode left_595 = null;
		BinaryNode left_619 = null;
		int element_591 = 1;
		int element_303 = -4;
		int element_79 = -4;
		int element_1 = -5;
		int element_76 = -5;
		int element_78 = -4;
		int element_82 = -3;
		int element_83 = -2;
		int element_85 = -1;
		int element_81 = 1;
		int element_84 = -2;
		int element_594 = -2;
		int element_77 = -5;
		int element_80 = -3;
		int x = 0;
		int element_495 = -3;
		int element_618 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		left_592.element = element_594;
		left_592.left = left_595;
		left_592.right = right_596;
		right_596.element = element_618;
		right_596.left = left_619;
		right_596.right = right_620;
		obj.remove(x);
	}

	@Test
	public void test_remove6() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = null;
		BinaryNode right_404 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		int element_303 = 1;
		int element_79 = -1;
		int element_1 = -2;
		int element_306 = -1;
		int element_402 = 0;
		int element_76 = -2;
		int element_78 = -2;
		int element_77 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		obj.remove(x);
	}

	@Test
	public void test_remove7() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		int element_77 = -1;
		int element_79 = 2;
		int element_1 = 2;
		int element_76 = 2;
		int element_114 = 1;
		int element_78 = 1;
		int x = 0;
		int element_6 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		obj.remove(x);
	}

	@Test
	public void test_remove8() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode right_3 = null;
		int element_1 = 1;
		int element_76 = 1;
		int x = 0;
		int element_6 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		obj.remove(x);
	}

	@Test
	public void test_remove9() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = new BinaryNode();
		BinaryNode right_359 = new BinaryNode();
		BinaryNode left_382 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_310 = null;
		BinaryNode left_358 = null;
		BinaryNode right_383 = null;
		int element_303 = 3;
		int element_79 = 3;
		int element_1 = -3;
		int element_306 = 2;
		int element_78 = 2;
		int element_76 = -3;
		int element_82 = -2;
		int element_81 = -2;
		int element_83 = -1;
		int element_84 = 1;
		int element_77 = 3;
		int element_80 = -3;
		int element_85 = 2;
		int element_357 = -1;
		int element_309 = -2;
		int x = 0;
		int element_381 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_311.element = element_357;
		right_311.left = left_358;
		right_311.right = right_359;
		right_359.element = element_381;
		right_359.left = left_382;
		right_359.right = right_383;
		obj.remove(x);
	}

	@Test
	public void test_remove10() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = new BinaryNode();
		BinaryNode left_502 = new BinaryNode();
		BinaryNode right_503 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode right_500 = null;
		BinaryNode left_505 = null;
		BinaryNode right_506 = null;
		int element_303 = 0;
		int element_79 = 4;
		int element_1 = -1;
		int element_504 = 1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 0;
		int element_501 = 2;
		int element_81 = 4;
		int element_83 = 1;
		int element_84 = 1;
		int element_498 = 3;
		int element_77 = -1;
		int element_80 = 3;
		int element_85 = 2;
		int element_495 = 4;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		left_499.element = element_501;
		left_499.left = left_502;
		left_499.right = right_503;
		left_502.element = element_504;
		left_502.left = left_505;
		left_502.right = right_506;
		obj.remove(x);
	}

	@Test
	public void test_remove11() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = new BinaryNode();
		BinaryNode right_215 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode right_212 = null;
		BinaryNode left_214 = null;
		int element_79 = -2;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = -3;
		int element_114 = -2;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = 2;
		int element_6 = -3;
		int element_210 = 1;
		int element_77 = -3;
		int element_80 = 1;
		int element_213 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		left_211.element = element_213;
		left_211.left = left_214;
		left_211.right = right_215;
		obj.remove(x);
	}

	@Test
	public void test_remove12() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = new BinaryNode();
		BinaryNode right_314 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode right_311 = null;
		BinaryNode left_313 = null;
		int element_303 = 3;
		int element_79 = 3;
		int element_1 = -2;
		int element_306 = 2;
		int element_76 = -2;
		int element_78 = 2;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = 2;
		int element_77 = 3;
		int element_80 = 1;
		int element_312 = -1;
		int element_309 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		left_310.element = element_312;
		left_310.left = left_313;
		left_310.right = right_314;
		obj.remove(x);
	}

	@Test
	public void test_remove13() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode right_593 = null;
		int element_591 = 3;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 3;
		int element_77 = -1;
		int element_80 = 1;
		int x = 2;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		obj.remove(x);
	}

	@Test
	public void test_remove14() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = new BinaryNode();
		BinaryNode right_167 = new BinaryNode();
		BinaryNode left_190 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_118 = null;
		BinaryNode left_166 = null;
		BinaryNode right_191 = null;
		int element_117 = -2;
		int element_79 = 3;
		int element_189 = 1;
		int element_1 = 3;
		int element_165 = -1;
		int element_76 = 3;
		int element_114 = 2;
		int element_78 = 2;
		int element_82 = -2;
		int element_81 = -2;
		int element_6 = -3;
		int element_83 = -1;
		int element_84 = 1;
		int element_77 = -3;
		int element_80 = -3;
		int element_85 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_119.element = element_165;
		right_119.left = left_166;
		right_119.right = right_167;
		right_167.element = element_189;
		right_167.left = left_190;
		right_167.right = right_191;
		obj.remove(x);
	}

	@Test
	public void test_remove15() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = new BinaryNode();
		BinaryNode left_310 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_358 = null;
		BinaryNode right_359 = null;
		int element_79 = 4;
		int element_83 = 2;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 4;
		int element_6 = -1;
		int element_357 = 2;
		int element_309 = 1;
		int element_303 = 4;
		int element_1 = 0;
		int element_306 = 3;
		int element_82 = 1;
		int element_85 = 3;
		int element_84 = 2;
		int element_77 = -1;
		int element_80 = 3;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_311.element = element_357;
		right_311.left = left_358;
		right_311.right = right_359;
		obj.remove(x);
	}

	@Test
	public void test_remove16() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = new BinaryNode();
		BinaryNode right_548 = new BinaryNode();
		BinaryNode left_547 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_499 = null;
		BinaryNode left_571 = null;
		BinaryNode right_572 = null;
		int element_303 = -2;
		int element_79 = 2;
		int element_546 = 0;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -2;
		int element_82 = 0;
		int element_83 = 1;
		int element_81 = -1;
		int element_85 = 2;
		int element_84 = 1;
		int element_498 = -1;
		int element_77 = -3;
		int element_80 = -2;
		int element_570 = 1;
		int x = 0;
		int element_495 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_500.element = element_546;
		right_500.left = left_547;
		right_500.right = right_548;
		right_548.element = element_570;
		right_548.left = left_571;
		right_548.right = right_572;
		obj.remove(x);
	}

	@Test
	public void test_remove17() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = new BinaryNode();
		BinaryNode left_121 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode right_119 = null;
		BinaryNode right_122 = null;
		int element_117 = 2;
		int element_79 = 4;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 3;
		int element_114 = 3;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = 3;
		int element_6 = -1;
		int element_120 = 1;
		int element_77 = -1;
		int element_80 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		left_118.element = element_120;
		left_118.left = left_121;
		left_118.right = right_122;
		obj.remove(x);
	}

	@Test
	public void test_remove18() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = new BinaryNode();
		BinaryNode left_406 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode right_404 = null;
		BinaryNode right_407 = null;
		int element_303 = 3;
		int element_79 = -1;
		int element_1 = -2;
		int element_306 = -1;
		int element_402 = 2;
		int element_76 = -2;
		int element_78 = -2;
		int element_82 = 1;
		int element_81 = 3;
		int element_83 = 2;
		int element_77 = 3;
		int element_80 = 2;
		int element_405 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		left_403.element = element_405;
		left_403.left = left_406;
		left_403.right = right_407;
		obj.remove(x);
	}

	@Test
	public void test_remove19() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = null;
		BinaryNode right_116 = null;
		BinaryNode right_3 = null;
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		int element_79 = 0;
		int element_1 = 2;
		int element_76 = 2;
		int element_114 = 1;
		int element_78 = -1;
		int element_6 = 0;
		int element_77 = -1;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		obj.remove(x);
	}

	@Test
	public void test_remove20() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = new BinaryNode();
		BinaryNode left_592 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_499 = null;
		BinaryNode right_500 = null;
		BinaryNode left_640 = null;
		BinaryNode right_641 = null;
		int element_591 = 3;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_639 = 4;
		int element_82 = 2;
		int element_81 = 1;
		int element_83 = 3;
		int element_84 = 4;
		int element_498 = 1;
		int element_77 = -1;
		int element_80 = 1;
		int element_85 = 4;
		int x = 2;
		int element_495 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		right_593.element = element_639;
		right_593.left = left_640;
		right_593.right = right_641;
		obj.remove(x);
	}

	@Test
	public void test_remove21() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = new BinaryNode();
		BinaryNode left_403 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_451 = null;
		BinaryNode right_452 = null;
		int element_303 = 2;
		int element_79 = -1;
		int element_1 = -2;
		int element_306 = -1;
		int element_402 = 0;
		int element_76 = -2;
		int element_78 = -2;
		int element_82 = 1;
		int element_81 = 1;
		int element_83 = 2;
		int element_77 = 2;
		int element_80 = 0;
		int element_450 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		right_404.element = element_450;
		right_404.left = left_451;
		right_404.right = right_452;
		obj.remove(x);
	}

	@Test
	public void test_remove22() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = new BinaryNode();
		BinaryNode left_310 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_358 = null;
		BinaryNode right_359 = null;
		int element_303 = 3;
		int element_79 = 3;
		int element_1 = -1;
		int element_306 = 2;
		int element_76 = -1;
		int element_78 = 2;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = 1;
		int element_77 = 3;
		int element_80 = 0;
		int element_357 = 1;
		int element_309 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_311.element = element_357;
		right_311.left = left_358;
		right_311.right = right_359;
		obj.remove(x);
	}

	@Test
	public void test_remove23() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_88 = new BinaryNode();
		BinaryNode right_92 = new BinaryNode();
		BinaryNode left_97 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_89 = null;
		BinaryNode left_91 = null;
		BinaryNode right_98 = null;
		int element_79 = -2;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 4;
		int element_82 = -2;
		int element_83 = -1;
		int element_90 = -1;
		int element_81 = 3;
		int element_6 = 3;
		int element_85 = 2;
		int element_84 = 1;
		int element_77 = 3;
		int element_87 = 2;
		int element_96 = 1;
		int element_80 = 2;
		int x = 0;
		int element_9 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		left_88.element = element_90;
		left_88.left = left_91;
		left_88.right = right_92;
		right_92.element = element_96;
		right_92.left = left_97;
		right_92.right = right_98;
		obj.remove(x);
	}

	@Test
	public void test_remove24() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_88 = new BinaryNode();
		BinaryNode right_92 = new BinaryNode();
		BinaryNode right_98 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_89 = null;
		BinaryNode left_91 = null;
		BinaryNode left_97 = null;
		int element_79 = -3;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 3;
		int element_82 = -3;
		int element_83 = -2;
		int element_90 = -2;
		int element_81 = 2;
		int element_6 = 2;
		int element_85 = -1;
		int element_84 = -2;
		int element_77 = 2;
		int element_87 = 1;
		int element_96 = -1;
		int element_80 = 1;
		int x = 0;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		left_88.element = element_90;
		left_88.left = left_91;
		left_88.right = right_92;
		right_92.element = element_96;
		right_92.left = left_97;
		right_92.right = right_98;
		obj.remove(x);
	}

	@Test
	public void test_remove25() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = new BinaryNode();
		BinaryNode right_548 = new BinaryNode();
		BinaryNode right_572 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_499 = null;
		BinaryNode left_547 = null;
		BinaryNode left_571 = null;
		int element_303 = -4;
		int element_79 = 1;
		int element_546 = -2;
		int element_1 = -5;
		int element_76 = -5;
		int element_78 = -4;
		int element_82 = -3;
		int element_83 = -2;
		int element_85 = -1;
		int element_81 = -3;
		int element_84 = -2;
		int element_498 = -3;
		int element_77 = -5;
		int element_80 = -4;
		int element_570 = -1;
		int x = 0;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_500.element = element_546;
		right_500.left = left_547;
		right_500.right = right_548;
		right_548.element = element_570;
		right_548.left = left_571;
		right_548.right = right_572;
		obj.remove(x);
	}

	@Test
	public void test_remove26() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_496 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_592 = null;
		BinaryNode right_593 = null;
		int element_591 = 2;
		int element_303 = 0;
		int element_79 = 1;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 2;
		int element_77 = -1;
		int element_80 = 2;
		int x = 1;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		obj.remove(x);
	}

	@Test
	public void test_remove27() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = new BinaryNode();
		BinaryNode left_118 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_166 = null;
		BinaryNode right_167 = null;
		int element_117 = 0;
		int element_79 = 3;
		int element_1 = 3;
		int element_165 = 1;
		int element_76 = 3;
		int element_114 = 2;
		int element_78 = 2;
		int element_82 = 1;
		int element_81 = 1;
		int element_6 = -1;
		int element_83 = 2;
		int element_77 = -1;
		int element_80 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_119.element = element_165;
		right_119.left = left_166;
		right_119.right = right_167;
		obj.remove(x);
	}

	@Test
	public void test_remove28() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = new BinaryNode();
		BinaryNode left_166 = null;
		BinaryNode right_167 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_118 = null;
		int element_117 = -1;
		int element_79 = 2;
		int element_1 = 2;
		int element_165 = 0;
		int element_76 = 2;
		int element_114 = 1;
		int element_78 = 1;
		int element_81 = -1;
		int element_6 = -2;
		int element_77 = -2;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_119.element = element_165;
		right_119.left = left_166;
		right_119.right = right_167;
		obj.remove(x);
	}

	@Test
	public void test_remove29() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = null;
		BinaryNode right_311 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		int element_303 = 2;
		int element_79 = 2;
		int element_1 = -1;
		int element_306 = 1;
		int element_78 = 1;
		int element_76 = -1;
		int element_77 = 2;
		int element_309 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		obj.remove(x);
	}

	@Test
	public void test_remove30() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode right_500 = null;
		int element_303 = 0;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 3;
		int element_498 = 2;
		int element_77 = -1;
		int element_80 = 2;
		int x = 1;
		int element_495 = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		obj.remove(x);
	}

	@Test
	public void test_remove31() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode left_13 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_61 = null;
		BinaryNode right_62 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -2;
		int element_83 = -2;
		int element_12 = -3;
		int element_81 = -3;
		int element_6 = 0;
		int element_84 = -1;
		int element_77 = 0;
		int element_80 = 0;
		int element_60 = -2;
		int x = -3;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_60;
		right_14.left = left_61;
		right_14.right = right_62;
		obj.remove(x);
	}

	@Test
	public void test_remove32() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = new BinaryNode();
		BinaryNode right_596 = new BinaryNode();
		BinaryNode left_595 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode right_593 = null;
		BinaryNode left_619 = null;
		BinaryNode right_620 = null;
		int element_591 = 3;
		int element_303 = -1;
		int element_79 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -1;
		int element_82 = 1;
		int element_83 = 2;
		int element_85 = 3;
		int element_81 = 3;
		int element_84 = 2;
		int element_594 = 1;
		int element_77 = -2;
		int element_80 = 0;
		int x = 1;
		int element_495 = 0;
		int element_618 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		left_592.element = element_594;
		left_592.left = left_595;
		left_592.right = right_596;
		right_596.element = element_618;
		right_596.left = left_619;
		right_596.right = right_620;
		obj.remove(x);
	}

	@Test
	public void test_remove33() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = null;
		BinaryNode right_308 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		int element_303 = 1;
		int element_77 = 1;
		int element_1 = -1;
		int element_306 = 0;
		int element_76 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		obj.remove(x);
	}

	@Test
	public void test_remove34() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = new BinaryNode();
		BinaryNode left_118 = null;
		BinaryNode right_3 = null;
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		BinaryNode right_116 = null;
		BinaryNode left_166 = null;
		BinaryNode right_167 = null;
		int element_117 = 1;
		int element_79 = 0;
		int element_1 = 4;
		int element_165 = 2;
		int element_76 = 4;
		int element_114 = 3;
		int element_78 = -1;
		int element_82 = 1;
		int element_81 = 4;
		int element_6 = 0;
		int element_83 = 2;
		int element_84 = 2;
		int element_77 = -1;
		int element_80 = 3;
		int element_85 = 3;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_119.element = element_165;
		right_119.left = left_166;
		right_119.right = right_167;
		obj.remove(x);
	}

	@Test
	public void test_remove35() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = new BinaryNode();
		BinaryNode left_640 = null;
		BinaryNode right_641 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_592 = null;
		int element_591 = -1;
		int element_303 = -3;
		int element_79 = -3;
		int element_1 = -4;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = -1;
		int element_639 = 0;
		int element_81 = -2;
		int element_77 = -4;
		int element_80 = -2;
		int x = 0;
		int element_495 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		right_593.element = element_639;
		right_593.left = left_640;
		right_593.right = right_641;
		obj.remove(x);
	}

	@Test
	public void test_remove36() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_88 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_89 = null;
		int element_79 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_81 = 0;
		int element_6 = 0;
		int element_77 = 0;
		int element_87 = -1;
		int element_80 = -1;
		int x = -2;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		obj.remove(x);
	}

	@Test
	public void test_remove37() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = new BinaryNode();
		BinaryNode left_211 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_118 = null;
		BinaryNode right_119 = null;
		BinaryNode left_259 = null;
		BinaryNode right_260 = null;
		int element_117 = -4;
		int element_258 = -1;
		int element_79 = -4;
		int element_1 = 0;
		int element_76 = 0;
		int element_114 = -3;
		int element_78 = -5;
		int element_82 = -2;
		int element_81 = -3;
		int element_6 = -5;
		int element_210 = -2;
		int element_83 = -1;
		int element_77 = -5;
		int element_80 = -4;
		int element_84 = -1;
		int element_85 = 0;
		int x = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		right_212.element = element_258;
		right_212.left = left_259;
		right_212.right = right_260;
		obj.remove(x);
	}

	@Test
	public void test_remove38() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = new BinaryNode();
		BinaryNode right_641 = new BinaryNode();
		BinaryNode left_640 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_592 = null;
		BinaryNode left_664 = null;
		BinaryNode right_665 = null;
		int element_591 = -3;
		int element_303 = -5;
		int element_663 = -1;
		int element_79 = -5;
		int element_1 = -6;
		int element_76 = -6;
		int element_78 = -5;
		int element_82 = -3;
		int element_639 = -2;
		int element_83 = -2;
		int element_81 = -4;
		int element_85 = -1;
		int element_84 = -1;
		int element_77 = -6;
		int element_80 = -4;
		int x = -2;
		int element_495 = -4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		right_593.element = element_639;
		right_593.left = left_640;
		right_593.right = right_641;
		right_641.element = element_663;
		right_641.left = left_664;
		right_641.right = right_665;
		obj.remove(x);
	}

	@Test
	public void test_remove39() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = new BinaryNode();
		BinaryNode right_596 = new BinaryNode();
		BinaryNode left_619 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode right_593 = null;
		BinaryNode left_595 = null;
		BinaryNode right_620 = null;
		int element_591 = 2;
		int element_303 = -3;
		int element_79 = -3;
		int element_1 = -4;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = -2;
		int element_83 = -1;
		int element_85 = 2;
		int element_81 = 2;
		int element_84 = 1;
		int element_594 = -1;
		int element_77 = -4;
		int element_80 = -2;
		int x = 0;
		int element_495 = -2;
		int element_618 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		left_592.element = element_594;
		left_592.left = left_595;
		left_592.right = right_596;
		right_596.element = element_618;
		right_596.left = left_619;
		right_596.right = right_620;
		obj.remove(x);
	}

	@Test
	public void test_remove40() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = null;
		BinaryNode right_14 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_12 = -2;
		int element_6 = 0;
		int element_77 = 0;
		int element_80 = 0;
		int x = -2;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		obj.remove(x);
	}

	@Test
	public void test_remove41() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode left_16 = new BinaryNode();
		BinaryNode right_17 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode left_19 = null;
		BinaryNode right_20 = null;
		int element_18 = 1;
		int element_79 = 4;
		int element_15 = 2;
		int element_1 = 6;
		int element_76 = 6;
		int element_78 = 6;
		int element_82 = 4;
		int element_83 = 1;
		int element_12 = 3;
		int element_81 = 3;
		int element_6 = 5;
		int element_85 = 2;
		int element_84 = 1;
		int element_77 = 5;
		int element_80 = 5;
		int x = 2;
		int element_9 = 4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		left_16.element = element_18;
		left_16.left = left_19;
		left_16.right = right_20;
		obj.remove(x);
	}

	@Test
	public void test_remove42() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = new BinaryNode();
		BinaryNode right_641 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_592 = null;
		BinaryNode left_640 = null;
		int element_591 = 2;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_639 = 3;
		int element_83 = 2;
		int element_81 = 1;
		int element_84 = 3;
		int element_77 = -1;
		int element_80 = 1;
		int x = 4;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		right_593.element = element_639;
		right_593.left = left_640;
		right_593.right = right_641;
		obj.remove(x);
	}

	@Test
	public void test_remove43() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = new BinaryNode();
		BinaryNode left_406 = new BinaryNode();
		BinaryNode right_407 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode right_404 = null;
		BinaryNode left_409 = null;
		BinaryNode right_410 = null;
		int element_303 = 2;
		int element_79 = -2;
		int element_1 = -3;
		int element_306 = -2;
		int element_402 = 1;
		int element_76 = -3;
		int element_78 = -3;
		int element_82 = -2;
		int element_81 = 2;
		int element_83 = -1;
		int element_84 = -1;
		int element_77 = 2;
		int element_80 = 1;
		int element_85 = 0;
		int element_405 = 0;
		int x = 0;
		int element_408 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		left_403.element = element_405;
		left_403.left = left_406;
		left_403.right = right_407;
		left_406.element = element_408;
		left_406.left = left_409;
		left_406.right = right_410;
		obj.remove(x);
	}

	@Test
	public void test_remove44() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = new BinaryNode();
		BinaryNode left_595 = new BinaryNode();
		BinaryNode right_599 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode right_593 = null;
		BinaryNode right_596 = null;
		BinaryNode left_598 = null;
		int element_591 = 2;
		int element_303 = -3;
		int element_79 = -3;
		int element_1 = -4;
		int element_76 = -4;
		int element_78 = -3;
		int element_597 = -1;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = 2;
		int element_85 = -1;
		int element_84 = -2;
		int element_594 = 1;
		int element_77 = -4;
		int element_80 = -2;
		int x = 0;
		int element_495 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		left_592.element = element_594;
		left_592.left = left_595;
		left_592.right = right_596;
		left_595.element = element_597;
		left_595.left = left_598;
		left_595.right = right_599;
		obj.remove(x);
	}

	@Test
	public void test_remove45() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = new BinaryNode();
		BinaryNode left_211 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_259 = null;
		BinaryNode right_260 = null;
		int element_258 = -1;
		int element_79 = -3;
		int element_1 = 0;
		int element_76 = 0;
		int element_114 = -3;
		int element_78 = -4;
		int element_82 = -1;
		int element_81 = -1;
		int element_6 = -4;
		int element_210 = -2;
		int element_83 = 0;
		int element_77 = -4;
		int element_80 = -2;
		int x = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		right_212.element = element_258;
		right_212.left = left_259;
		right_212.right = right_260;
		obj.remove(x);
	}

	@Test
	public void test_remove46() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = null;
		BinaryNode right_3 = null;
		int element_1 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		obj.remove(x);
	}

	@Test
	public void test_remove47() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = new BinaryNode();
		BinaryNode left_640 = new BinaryNode();
		BinaryNode right_641 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_592 = null;
		BinaryNode left_643 = null;
		BinaryNode right_644 = null;
		int element_591 = -3;
		int element_79 = -5;
		int element_83 = -3;
		int element_76 = -6;
		int element_78 = -5;
		int element_639 = -1;
		int element_81 = -4;
		int element_495 = -4;
		int element_303 = -5;
		int element_1 = -6;
		int element_82 = -3;
		int element_85 = -2;
		int element_84 = -2;
		int element_77 = -6;
		int element_80 = -4;
		int element_86 = -1;
		int element_642 = -2;
		int x = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		right_593.element = element_639;
		right_593.left = left_640;
		right_593.right = right_641;
		left_640.element = element_642;
		left_640.left = left_643;
		left_640.right = right_644;
		obj.remove(x);
	}

	@Test
	public void test_remove48() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_11 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_13 = null;
		BinaryNode right_14 = null;
		int element_79 = -2;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_12 = -2;
		int element_81 = -1;
		int element_6 = 0;
		int element_77 = 0;
		int element_80 = -2;
		int x = -1;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		obj.remove(x);
	}

	@Test
	public void test_remove49() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = new BinaryNode();
		BinaryNode left_640 = new BinaryNode();
		BinaryNode left_643 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_592 = null;
		BinaryNode right_641 = null;
		BinaryNode right_644 = null;
		int element_591 = -4;
		int element_303 = -6;
		int element_79 = -6;
		int element_1 = -7;
		int element_76 = -7;
		int element_78 = -6;
		int element_82 = -4;
		int element_639 = -1;
		int element_83 = -1;
		int element_81 = -5;
		int element_85 = -1;
		int element_84 = -2;
		int element_77 = -7;
		int element_80 = -5;
		int element_642 = -2;
		int x = -3;
		int element_495 = -5;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		right_593.element = element_639;
		right_593.left = left_640;
		right_593.right = right_641;
		left_640.element = element_642;
		left_640.left = left_643;
		left_640.right = right_644;
		obj.remove(x);
	}

	@Test
	public void test_remove50() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = null;
		BinaryNode left_2 = null;
		int element_1 = -1;
		int element_76 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		obj.remove(x);
	}

	@Test
	public void test_remove51() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode right_119 = null;
		int element_117 = 1;
		int element_79 = 3;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 2;
		int element_114 = 2;
		int element_81 = 2;
		int element_6 = -1;
		int element_77 = -1;
		int element_80 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		obj.remove(x);
	}

	@Test
	public void test_remove52() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = new BinaryNode();
		BinaryNode left_214 = null;
		BinaryNode right_215 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode right_212 = null;
		int element_79 = -1;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = -2;
		int element_114 = -1;
		int element_81 = 2;
		int element_6 = -2;
		int element_210 = 1;
		int element_77 = -2;
		int element_80 = 1;
		int element_213 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		left_211.element = element_213;
		left_211.left = left_214;
		left_211.right = right_215;
		obj.remove(x);
	}

	@Test
	public void test_remove53() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_310 = null;
		int element_303 = 2;
		int element_79 = 2;
		int element_1 = -2;
		int element_306 = 1;
		int element_76 = -2;
		int element_78 = 1;
		int element_81 = -1;
		int element_77 = 2;
		int element_80 = -2;
		int element_309 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		obj.remove(x);
	}

	@Test
	public void test_remove54() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_307 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_403 = null;
		BinaryNode right_404 = null;
		int element_303 = 2;
		int element_79 = 1;
		int element_1 = -1;
		int element_306 = 0;
		int element_402 = 1;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 2;
		int element_77 = 2;
		int element_80 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		obj.remove(x);
	}

	@Test
	public void test_remove55() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = new BinaryNode();
		BinaryNode left_121 = new BinaryNode();
		BinaryNode left_124 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode right_119 = null;
		BinaryNode right_122 = null;
		BinaryNode right_125 = null;
		int element_117 = 3;
		int element_79 = 5;
		int element_123 = 1;
		int element_1 = 5;
		int element_76 = 5;
		int element_78 = 4;
		int element_114 = 4;
		int element_82 = 2;
		int element_83 = 3;
		int element_81 = 4;
		int element_6 = -1;
		int element_85 = 2;
		int element_120 = 2;
		int element_77 = -1;
		int element_80 = 3;
		int element_84 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		left_118.element = element_120;
		left_118.left = left_121;
		left_118.right = right_122;
		left_121.element = element_123;
		left_121.left = left_124;
		left_121.right = right_125;
		obj.remove(x);
	}

	@Test
	public void test_remove56() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = new BinaryNode();
		BinaryNode right_260 = new BinaryNode();
		BinaryNode left_283 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_211 = null;
		BinaryNode left_259 = null;
		BinaryNode right_284 = null;
		int element_258 = -1;
		int element_79 = -3;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = -4;
		int element_114 = -3;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = -2;
		int element_6 = -4;
		int element_210 = -2;
		int element_84 = 1;
		int element_282 = 1;
		int element_77 = -4;
		int element_80 = -3;
		int element_85 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		right_212.element = element_258;
		right_212.left = left_259;
		right_212.right = right_260;
		right_260.element = element_282;
		right_260.left = left_283;
		right_260.right = right_284;
		obj.remove(x);
	}

	@Test
	public void test_remove57() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_308 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_310 = null;
		BinaryNode right_311 = null;
		int element_303 = 3;
		int element_79 = 1;
		int element_1 = 0;
		int element_306 = 2;
		int element_76 = 0;
		int element_78 = 0;
		int element_81 = 2;
		int element_77 = 3;
		int element_80 = 1;
		int element_309 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		obj.remove(x);
	}

	@Test
	public void test_remove58() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = new BinaryNode();
		BinaryNode left_640 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_592 = null;
		BinaryNode right_641 = null;
		int element_591 = 2;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_639 = 4;
		int element_83 = 4;
		int element_81 = 1;
		int element_77 = -1;
		int element_80 = 1;
		int x = 3;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		right_593.element = element_639;
		right_593.left = left_640;
		right_593.right = right_641;
		obj.remove(x);
	}

	@Test
	public void test_remove59() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		int element_77 = 1;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 2;
		int x = 0;
		int element_6 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		obj.remove(x);
	}

	@Test
	public void test_remove60() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = new BinaryNode();
		BinaryNode left_547 = new BinaryNode();
		BinaryNode right_551 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_499 = null;
		BinaryNode right_548 = null;
		BinaryNode left_550 = null;
		int element_303 = -3;
		int element_79 = 2;
		int element_546 = 1;
		int element_1 = -4;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = 1;
		int element_83 = 2;
		int element_85 = -1;
		int element_81 = -2;
		int element_84 = -2;
		int element_498 = -2;
		int element_77 = -4;
		int element_80 = -3;
		int element_549 = -1;
		int x = 0;
		int element_495 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_500.element = element_546;
		right_500.left = left_547;
		right_500.right = right_548;
		left_547.element = element_549;
		left_547.left = left_550;
		left_547.right = right_551;
		obj.remove(x);
	}

	@Test
	public void test_remove61() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = new BinaryNode();
		BinaryNode left_547 = new BinaryNode();
		BinaryNode left_550 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_499 = null;
		BinaryNode right_548 = null;
		BinaryNode right_551 = null;
		int element_303 = -2;
		int element_79 = 3;
		int element_546 = 2;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -2;
		int element_82 = 2;
		int element_83 = 3;
		int element_85 = 2;
		int element_81 = -1;
		int element_84 = 1;
		int element_498 = -1;
		int element_77 = -3;
		int element_80 = -2;
		int element_549 = 1;
		int x = 0;
		int element_495 = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_500.element = element_546;
		right_500.left = left_547;
		right_500.right = right_548;
		left_547.element = element_549;
		left_547.left = left_550;
		left_547.right = right_551;
		obj.remove(x);
	}

	@Test
	public void test_remove62() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_88 = new BinaryNode();
		BinaryNode left_91 = null;
		BinaryNode right_92 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_89 = null;
		int element_79 = -1;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 3;
		int element_90 = 0;
		int element_81 = 2;
		int element_6 = 2;
		int element_77 = 2;
		int element_87 = 1;
		int element_80 = 1;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		left_88.element = element_90;
		left_88.left = left_91;
		left_88.right = right_92;
		obj.remove(x);
	}

	@Test
	public void test_remove63() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_89 = new BinaryNode();
		BinaryNode left_106 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_88 = null;
		BinaryNode right_107 = null;
		int element_79 = -4;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -1;
		int element_83 = 0;
		int element_81 = -3;
		int element_6 = 0;
		int element_77 = 0;
		int element_87 = -3;
		int element_80 = -4;
		int element_105 = -1;
		int x = -2;
		int element_9 = -4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		right_89.element = element_105;
		right_89.left = left_106;
		right_89.right = right_107;
		obj.remove(x);
	}

	@Test
	public void test_remove64() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = new BinaryNode();
		BinaryNode right_215 = new BinaryNode();
		BinaryNode right_239 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode right_212 = null;
		BinaryNode left_214 = null;
		BinaryNode left_238 = null;
		int element_79 = -3;
		int element_1 = 2;
		int element_76 = 2;
		int element_114 = -3;
		int element_78 = -4;
		int element_82 = -3;
		int element_81 = 2;
		int element_6 = -4;
		int element_210 = 1;
		int element_83 = -2;
		int element_237 = -1;
		int element_77 = -4;
		int element_80 = 1;
		int element_84 = -2;
		int element_85 = -1;
		int element_213 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		left_211.element = element_213;
		left_211.left = left_214;
		left_211.right = right_215;
		right_215.element = element_237;
		right_215.left = left_238;
		right_215.right = right_239;
		obj.remove(x);
	}

	@Test
	public void test_remove65() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode left_16 = null;
		BinaryNode right_17 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		int element_79 = -1;
		int element_15 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -1;
		int element_12 = -2;
		int element_81 = -2;
		int element_6 = 0;
		int element_77 = 0;
		int element_80 = 0;
		int x = -3;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		obj.remove(x);
	}

	@Test
	public void test_remove66() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = new BinaryNode();
		BinaryNode left_358 = new BinaryNode();
		BinaryNode right_359 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_310 = null;
		BinaryNode left_361 = null;
		BinaryNode right_362 = null;
		int element_303 = 2;
		int element_79 = 2;
		int element_1 = -3;
		int element_306 = 1;
		int element_76 = -3;
		int element_78 = 1;
		int element_82 = -2;
		int element_83 = -1;
		int element_360 = -1;
		int element_81 = -2;
		int element_84 = -1;
		int element_77 = 2;
		int element_80 = -3;
		int element_85 = 0;
		int element_357 = 0;
		int element_309 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_311.element = element_357;
		right_311.left = left_358;
		right_311.right = right_359;
		left_358.element = element_360;
		left_358.left = left_361;
		left_358.right = right_362;
		obj.remove(x);
	}

	@Test
	public void test_remove67() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = new BinaryNode();
		BinaryNode right_407 = new BinaryNode();
		BinaryNode left_406 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode right_404 = null;
		BinaryNode left_430 = null;
		BinaryNode right_431 = null;
		int element_303 = 3;
		int element_79 = -1;
		int element_1 = -2;
		int element_306 = -1;
		int element_78 = -2;
		int element_402 = 2;
		int element_76 = -2;
		int element_82 = 0;
		int element_81 = 3;
		int element_83 = 1;
		int element_84 = 1;
		int element_77 = 3;
		int element_80 = 2;
		int element_85 = 2;
		int element_405 = 0;
		int element_429 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		left_403.element = element_405;
		left_403.left = left_406;
		left_403.right = right_407;
		right_407.element = element_429;
		right_407.left = left_430;
		right_407.right = right_431;
		obj.remove(x);
	}

	@Test
	public void test_remove68() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = new BinaryNode();
		BinaryNode right_452 = new BinaryNode();
		BinaryNode left_451 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_403 = null;
		BinaryNode left_475 = null;
		BinaryNode right_476 = null;
		int element_474 = 1;
		int element_303 = 2;
		int element_79 = -2;
		int element_1 = -3;
		int element_306 = -2;
		int element_78 = -3;
		int element_402 = -1;
		int element_76 = -3;
		int element_81 = -1;
		int element_82 = 0;
		int element_83 = 1;
		int element_77 = 2;
		int element_80 = -2;
		int element_84 = 1;
		int element_85 = 2;
		int element_450 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		right_404.element = element_450;
		right_404.left = left_451;
		right_404.right = right_452;
		right_452.element = element_474;
		right_452.left = left_475;
		right_452.right = right_476;
		obj.remove(x);
	}

	@Test
	public void test_remove69() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		int element_77 = -2;
		int element_303 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		obj.remove(x);
	}

	@Test
	public void test_remove70() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = new BinaryNode();
		BinaryNode left_121 = new BinaryNode();
		BinaryNode right_122 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode right_119 = null;
		BinaryNode left_124 = null;
		BinaryNode right_125 = null;
		int element_117 = 1;
		int element_79 = 3;
		int element_123 = -1;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 2;
		int element_114 = 2;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = 2;
		int element_6 = -2;
		int element_85 = 0;
		int element_120 = 0;
		int element_77 = -2;
		int element_80 = 1;
		int element_84 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		left_118.element = element_120;
		left_118.left = left_121;
		left_118.right = right_122;
		left_121.element = element_123;
		left_121.left = left_124;
		left_121.right = right_125;
		obj.remove(x);
	}

	@Test
	public void test_remove71() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = new BinaryNode();
		BinaryNode right_122 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode right_119 = null;
		BinaryNode left_121 = null;
		int element_117 = 1;
		int element_79 = 3;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 2;
		int element_114 = 2;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = 2;
		int element_6 = -2;
		int element_120 = -1;
		int element_77 = -2;
		int element_80 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		left_118.element = element_120;
		left_118.left = left_121;
		left_118.right = right_122;
		obj.remove(x);
	}

	@Test
	public void test_remove72() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = new BinaryNode();
		BinaryNode right_359 = new BinaryNode();
		BinaryNode right_383 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_310 = null;
		BinaryNode left_358 = null;
		BinaryNode left_382 = null;
		int element_303 = 2;
		int element_79 = 2;
		int element_1 = -4;
		int element_306 = 1;
		int element_76 = -4;
		int element_78 = 1;
		int element_82 = -3;
		int element_83 = -2;
		int element_81 = -3;
		int element_85 = -1;
		int element_84 = -2;
		int element_77 = 2;
		int element_80 = -4;
		int element_357 = -2;
		int element_309 = -3;
		int x = 0;
		int element_381 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_311.element = element_357;
		right_311.left = left_358;
		right_311.right = right_359;
		right_359.element = element_381;
		right_359.left = left_382;
		right_359.right = right_383;
		obj.remove(x);
	}

	@Test
	public void test_remove73() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = new BinaryNode();
		BinaryNode right_404 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_406 = null;
		BinaryNode right_407 = null;
		int element_303 = 1;
		int element_79 = -2;
		int element_1 = -3;
		int element_306 = -2;
		int element_402 = 0;
		int element_76 = -3;
		int element_78 = -3;
		int element_82 = -1;
		int element_81 = -1;
		int element_83 = 0;
		int element_77 = 1;
		int element_80 = -2;
		int element_405 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		left_403.element = element_405;
		left_403.left = left_406;
		left_403.right = right_407;
		obj.remove(x);
	}

	@Test
	public void test_remove74() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = new BinaryNode();
		BinaryNode left_502 = new BinaryNode();
		BinaryNode right_506 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode right_500 = null;
		BinaryNode right_503 = null;
		BinaryNode left_505 = null;
		int element_303 = 0;
		int element_79 = 5;
		int element_1 = -1;
		int element_504 = 1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 3;
		int element_501 = 3;
		int element_81 = 5;
		int element_83 = 4;
		int element_498 = 4;
		int element_77 = -1;
		int element_80 = 4;
		int element_84 = 0;
		int element_85 = 1;
		int element_495 = 5;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		left_499.element = element_501;
		left_499.left = left_502;
		left_499.right = right_503;
		left_502.element = element_504;
		left_502.left = left_505;
		left_502.right = right_506;
		obj.remove(x);
	}

	@Test
	public void test_remove75() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		int element_77 = 1;
		int element_303 = 1;
		int element_79 = -1;
		int element_1 = -2;
		int element_306 = -1;
		int element_76 = -2;
		int element_78 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		obj.remove(x);
	}

	@Test
	public void test_remove76() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = new BinaryNode();
		BinaryNode left_313 = new BinaryNode();
		BinaryNode right_314 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode right_311 = null;
		BinaryNode left_316 = null;
		BinaryNode right_317 = null;
		int element_315 = 1;
		int element_303 = 5;
		int element_79 = 5;
		int element_1 = 0;
		int element_306 = 4;
		int element_76 = 0;
		int element_78 = 4;
		int element_82 = 0;
		int element_83 = 1;
		int element_81 = 4;
		int element_85 = 2;
		int element_84 = 1;
		int element_77 = 5;
		int element_80 = 3;
		int element_312 = 2;
		int element_309 = 3;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		left_310.element = element_312;
		left_310.left = left_313;
		left_310.right = right_314;
		left_313.element = element_315;
		left_313.left = left_316;
		left_313.right = right_317;
		obj.remove(x);
	}

	@Test
	public void test_remove77() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode right_17 = new BinaryNode();
		BinaryNode left_16 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode left_40 = null;
		BinaryNode right_41 = null;
		int element_79 = -1;
		int element_83 = -4;
		int element_76 = 1;
		int element_78 = 1;
		int element_12 = -2;
		int element_81 = -2;
		int element_6 = 0;
		int element_15 = -4;
		int element_1 = 1;
		int element_39 = -3;
		int element_82 = -1;
		int element_85 = -3;
		int element_84 = -3;
		int element_77 = 0;
		int element_80 = 0;
		int element_86 = -2;
		int x = -4;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		right_17.element = element_39;
		right_17.left = left_40;
		right_17.right = right_41;
		obj.remove(x);
	}

	@Test
	public void test_remove78() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_115 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_211 = null;
		BinaryNode right_212 = null;
		int element_79 = -1;
		int element_1 = 0;
		int element_76 = 0;
		int element_114 = -2;
		int element_78 = -2;
		int element_81 = 0;
		int element_6 = -3;
		int element_210 = -1;
		int element_77 = -3;
		int element_80 = -1;
		int x = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		obj.remove(x);
	}

	@Test
	public void test_remove79() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_88 = new BinaryNode();
		BinaryNode right_92 = new BinaryNode();
		BinaryNode left_91 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_89 = null;
		BinaryNode left_97 = null;
		BinaryNode right_98 = null;
		int element_79 = -1;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 4;
		int element_82 = 0;
		int element_90 = 0;
		int element_81 = 3;
		int element_6 = 3;
		int element_83 = 1;
		int element_84 = 1;
		int element_77 = 3;
		int element_87 = 2;
		int element_96 = 1;
		int element_80 = 2;
		int element_85 = 2;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		left_88.element = element_90;
		left_88.left = left_91;
		left_88.right = right_92;
		right_92.element = element_96;
		right_92.left = left_97;
		right_92.right = right_98;
		obj.remove(x);
	}

	@Test
	public void test_remove80() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = new BinaryNode();
		BinaryNode right_407 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode right_404 = null;
		BinaryNode left_406 = null;
		int element_303 = 2;
		int element_79 = -2;
		int element_1 = -3;
		int element_306 = -2;
		int element_402 = 1;
		int element_76 = -3;
		int element_78 = -3;
		int element_82 = -2;
		int element_81 = 2;
		int element_83 = -1;
		int element_77 = 2;
		int element_80 = 1;
		int element_405 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		left_403.element = element_405;
		left_403.left = left_406;
		left_403.right = right_407;
		obj.remove(x);
	}

	@Test
	public void test_remove81() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = new BinaryNode();
		BinaryNode left_166 = new BinaryNode();
		BinaryNode left_169 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_118 = null;
		BinaryNode right_167 = null;
		BinaryNode right_170 = null;
		int element_117 = -1;
		int element_79 = 4;
		int element_168 = 1;
		int element_1 = 4;
		int element_165 = 2;
		int element_76 = 4;
		int element_114 = 3;
		int element_78 = 3;
		int element_82 = 2;
		int element_81 = -1;
		int element_6 = -2;
		int element_83 = 3;
		int element_84 = 1;
		int element_77 = -2;
		int element_80 = -2;
		int element_85 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_119.element = element_165;
		right_119.left = left_166;
		right_119.right = right_167;
		left_166.element = element_168;
		left_166.left = left_169;
		left_166.right = right_170;
		obj.remove(x);
	}

	@Test
	public void test_remove82() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = new BinaryNode();
		BinaryNode right_314 = new BinaryNode();
		BinaryNode left_313 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode right_311 = null;
		BinaryNode left_337 = null;
		BinaryNode right_338 = null;
		int element_303 = 4;
		int element_79 = 4;
		int element_1 = -1;
		int element_306 = 3;
		int element_78 = 3;
		int element_76 = -1;
		int element_82 = 0;
		int element_336 = 1;
		int element_81 = 3;
		int element_83 = 1;
		int element_84 = 1;
		int element_77 = 4;
		int element_80 = 2;
		int element_85 = 2;
		int element_312 = 0;
		int element_309 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		left_310.element = element_312;
		left_310.left = left_313;
		left_310.right = right_314;
		right_314.element = element_336;
		right_314.left = left_337;
		right_314.right = right_338;
		obj.remove(x);
	}

	@Test
	public void test_remove83() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = null;
		BinaryNode right_212 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_118 = null;
		BinaryNode right_119 = null;
		int element_117 = -3;
		int element_79 = -3;
		int element_1 = 0;
		int element_76 = 0;
		int element_114 = -2;
		int element_78 = -4;
		int element_81 = -2;
		int element_6 = -4;
		int element_210 = -1;
		int element_77 = -4;
		int element_80 = -3;
		int x = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		obj.remove(x);
	}

	@Test
	public void test_remove84() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_89 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_88 = null;
		int element_79 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_81 = -2;
		int element_6 = 0;
		int element_77 = 0;
		int element_87 = -2;
		int element_80 = -3;
		int x = -1;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		obj.remove(x);
	}

	@Test
	public void test_remove85() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = new BinaryNode();
		BinaryNode right_122 = new BinaryNode();
		BinaryNode left_121 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode right_119 = null;
		BinaryNode left_145 = null;
		BinaryNode right_146 = null;
		int element_117 = 2;
		int element_79 = 4;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 3;
		int element_114 = 3;
		int element_82 = 0;
		int element_83 = 1;
		int element_144 = 1;
		int element_6 = -1;
		int element_81 = 3;
		int element_120 = 0;
		int element_77 = -1;
		int element_80 = 2;
		int element_84 = 1;
		int element_85 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		left_118.element = element_120;
		left_118.left = left_121;
		left_118.right = right_122;
		right_122.element = element_144;
		right_122.left = left_145;
		right_122.right = right_146;
		obj.remove(x);
	}

	@Test
	public void test_remove86() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = new BinaryNode();
		BinaryNode left_406 = new BinaryNode();
		BinaryNode left_409 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode right_404 = null;
		BinaryNode right_407 = null;
		BinaryNode right_410 = null;
		int element_303 = 4;
		int element_79 = -1;
		int element_1 = -2;
		int element_306 = -1;
		int element_78 = -2;
		int element_402 = 3;
		int element_76 = -2;
		int element_81 = 4;
		int element_82 = 2;
		int element_83 = 3;
		int element_77 = 4;
		int element_80 = 3;
		int element_84 = 1;
		int element_405 = 2;
		int element_85 = 2;
		int x = 0;
		int element_408 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		left_403.element = element_405;
		left_403.left = left_406;
		left_403.right = right_407;
		left_406.element = element_408;
		left_406.left = left_409;
		left_406.right = right_410;
		obj.remove(x);
	}

	@Test
	public void test_remove87() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = new BinaryNode();
		BinaryNode right_215 = new BinaryNode();
		BinaryNode left_214 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode right_212 = null;
		BinaryNode left_238 = null;
		BinaryNode right_239 = null;
		int element_79 = -1;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = -2;
		int element_114 = -1;
		int element_82 = 0;
		int element_83 = 1;
		int element_81 = 3;
		int element_6 = -2;
		int element_210 = 2;
		int element_84 = 1;
		int element_237 = 1;
		int element_77 = -2;
		int element_80 = 2;
		int element_85 = 2;
		int element_213 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		left_211.element = element_213;
		left_211.left = left_214;
		left_211.right = right_215;
		right_215.element = element_237;
		right_215.left = left_238;
		right_215.right = right_239;
		obj.remove(x);
	}

	@Test
	public void test_remove88() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = new BinaryNode();
		BinaryNode right_167 = new BinaryNode();
		BinaryNode right_191 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_118 = null;
		BinaryNode left_166 = null;
		BinaryNode left_190 = null;
		int element_117 = -3;
		int element_79 = 2;
		int element_189 = -1;
		int element_1 = 2;
		int element_165 = -2;
		int element_76 = 2;
		int element_114 = 1;
		int element_78 = 1;
		int element_82 = -3;
		int element_81 = -3;
		int element_6 = -4;
		int element_83 = -2;
		int element_84 = -2;
		int element_77 = -4;
		int element_80 = -4;
		int element_85 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_119.element = element_165;
		right_119.left = left_166;
		right_119.right = right_167;
		right_167.element = element_189;
		right_167.left = left_190;
		right_167.right = right_191;
		obj.remove(x);
	}

	@Test
	public void test_remove89() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = new BinaryNode();
		BinaryNode left_313 = new BinaryNode();
		BinaryNode left_316 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode right_311 = null;
		BinaryNode right_314 = null;
		BinaryNode right_317 = null;
		int element_315 = 1;
		int element_303 = 5;
		int element_79 = 5;
		int element_1 = -1;
		int element_306 = 4;
		int element_76 = -1;
		int element_78 = 4;
		int element_82 = 2;
		int element_83 = 3;
		int element_81 = 4;
		int element_85 = 2;
		int element_84 = 1;
		int element_77 = 5;
		int element_80 = 3;
		int element_312 = 2;
		int element_309 = 3;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		left_310.element = element_312;
		left_310.left = left_313;
		left_310.right = right_314;
		left_313.element = element_315;
		left_313.left = left_316;
		left_313.right = right_317;
		obj.remove(x);
	}

	@Test
	public void test_remove90() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_8 = null;
		BinaryNode right_3 = null;
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		int element_77 = -1;
		int element_79 = 0;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -1;
		int x = 0;
		int element_9 = -1;
		int element_6 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		obj.remove(x);
	}

	@Test
	public void test_remove91() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = null;
		BinaryNode right_593 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_499 = null;
		BinaryNode right_500 = null;
		int element_591 = 3;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_81 = 1;
		int element_498 = 1;
		int element_77 = -1;
		int element_80 = 1;
		int x = 2;
		int element_495 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		obj.remove(x);
	}

	@Test
	public void test_remove92() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_10 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_88 = null;
		BinaryNode right_89 = null;
		int element_79 = -2;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = 0;
		int element_81 = -1;
		int element_6 = 0;
		int element_77 = 0;
		int element_87 = -1;
		int element_80 = -1;
		int x = -2;
		int element_9 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		obj.remove(x);
	}

	@Test
	public void test_remove93() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		int element_77 = 2;
		int element_303 = 2;
		int element_79 = 2;
		int element_1 = -1;
		int element_306 = 1;
		int element_76 = -1;
		int element_78 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		obj.remove(x);
	}

	@Test
	public void test_remove94() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = new BinaryNode();
		BinaryNode right_167 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_118 = null;
		BinaryNode left_166 = null;
		int element_117 = -2;
		int element_79 = 2;
		int element_1 = 2;
		int element_165 = -1;
		int element_76 = 2;
		int element_114 = 1;
		int element_78 = 1;
		int element_82 = -2;
		int element_81 = -2;
		int element_6 = -3;
		int element_83 = -1;
		int element_77 = -3;
		int element_80 = -3;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_119.element = element_165;
		right_119.left = left_166;
		right_119.right = right_167;
		obj.remove(x);
	}

	@Test
	public void test_remove95() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_497 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_499 = null;
		BinaryNode right_500 = null;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_81 = 1;
		int element_498 = 1;
		int element_77 = -1;
		int element_80 = 1;
		int x = 2;
		int element_495 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		obj.remove(x);
	}

	@Test
	public void test_remove96() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = new BinaryNode();
		BinaryNode left_214 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode right_212 = null;
		BinaryNode right_215 = null;
		int element_79 = -1;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = -2;
		int element_114 = -1;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = 3;
		int element_6 = -2;
		int element_210 = 2;
		int element_77 = -2;
		int element_80 = 2;
		int element_213 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		left_211.element = element_213;
		left_211.left = left_214;
		left_211.right = right_215;
		obj.remove(x);
	}

	@Test
	public void test_remove97() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode right_17 = new BinaryNode();
		BinaryNode right_41 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode left_16 = null;
		BinaryNode left_40 = null;
		int element_79 = 2;
		int element_15 = -2;
		int element_1 = 4;
		int element_39 = -1;
		int element_76 = 4;
		int element_78 = 4;
		int element_82 = 2;
		int element_12 = 1;
		int element_81 = 1;
		int element_6 = 3;
		int element_83 = -2;
		int element_84 = -2;
		int element_77 = 3;
		int element_80 = 3;
		int element_85 = -1;
		int x = 0;
		int element_9 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		right_17.element = element_39;
		right_17.left = left_40;
		right_17.right = right_41;
		obj.remove(x);
	}

	@Test
	public void test_remove98() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		int element_77 = -1;
		int element_1 = 0;
		int element_76 = -1;
		int element_78 = 0;
		int x = 0;
		int element_6 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		obj.remove(x);
	}

	@Test
	public void test_remove99() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = new BinaryNode();
		BinaryNode left_406 = null;
		BinaryNode right_407 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode right_404 = null;
		int element_303 = 2;
		int element_79 = -1;
		int element_1 = -2;
		int element_306 = -1;
		int element_402 = 1;
		int element_76 = -2;
		int element_78 = -2;
		int element_81 = 2;
		int element_77 = 2;
		int element_80 = 1;
		int element_405 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		left_403.element = element_405;
		left_403.left = left_406;
		left_403.right = right_407;
		obj.remove(x);
	}

	@Test
	public void test_remove100() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = new BinaryNode();
		BinaryNode right_260 = new BinaryNode();
		BinaryNode left_259 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_211 = null;
		BinaryNode left_283 = null;
		BinaryNode right_284 = null;
		int element_258 = -2;
		int element_79 = -4;
		int element_1 = 0;
		int element_76 = 0;
		int element_78 = -5;
		int element_114 = -4;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = -3;
		int element_6 = -5;
		int element_210 = -3;
		int element_84 = -1;
		int element_282 = -1;
		int element_77 = -5;
		int element_80 = -4;
		int element_85 = 0;
		int x = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		right_212.element = element_258;
		right_212.left = left_259;
		right_212.right = right_260;
		right_260.element = element_282;
		right_260.left = left_283;
		right_260.right = right_284;
		obj.remove(x);
	}

	@Test
	public void test_remove101() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = null;
		BinaryNode right_497 = null;
		BinaryNode left_2 = null;
		BinaryNode left_307 = null;
		BinaryNode right_308 = null;
		int element_303 = 0;
		int element_79 = -1;
		int element_1 = -2;
		int element_306 = -1;
		int element_76 = -2;
		int element_78 = -1;
		int element_77 = -2;
		int element_80 = 0;
		int x = 0;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		obj.remove(x);
	}

	@Test
	public void test_remove102() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = new BinaryNode();
		BinaryNode right_503 = new BinaryNode();
		BinaryNode right_527 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode right_500 = null;
		BinaryNode left_502 = null;
		BinaryNode left_526 = null;
		int element_303 = -3;
		int element_79 = 2;
		int element_1 = -4;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = -3;
		int element_83 = -2;
		int element_501 = -2;
		int element_81 = 2;
		int element_85 = -1;
		int element_498 = 1;
		int element_525 = -1;
		int element_77 = -4;
		int element_80 = 1;
		int element_84 = -2;
		int element_495 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		left_499.element = element_501;
		left_499.left = left_502;
		left_499.right = right_503;
		right_503.element = element_525;
		right_503.left = left_526;
		right_503.right = right_527;
		obj.remove(x);
	}

	@Test
	public void test_remove103() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_77 = -1;
		int element_80 = 1;
		int x = 2;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		obj.remove(x);
	}

	@Test
	public void test_remove104() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		int element_77 = -2;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -2;
		int element_114 = -1;
		int x = 0;
		int element_6 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		obj.remove(x);
	}

	@Test
	public void test_remove105() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = new BinaryNode();
		BinaryNode right_212 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_214 = null;
		BinaryNode right_215 = null;
		int element_79 = -2;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -3;
		int element_114 = -2;
		int element_82 = -1;
		int element_83 = 0;
		int element_81 = -1;
		int element_6 = -3;
		int element_210 = 0;
		int element_77 = -3;
		int element_80 = -2;
		int element_213 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		left_211.element = element_213;
		left_211.left = left_214;
		left_211.right = right_215;
		obj.remove(x);
	}

	@Test
	public void test_remove106() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode left_61 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		BinaryNode right_62 = null;
		int element_79 = 0;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 2;
		int element_82 = -1;
		int element_83 = 0;
		int element_12 = -3;
		int element_81 = -3;
		int element_6 = 1;
		int element_77 = 1;
		int element_80 = 1;
		int element_60 = -1;
		int x = -2;
		int element_9 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_60;
		right_14.left = left_61;
		right_14.right = right_62;
		obj.remove(x);
	}

	@Test
	public void test_remove107() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_116 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_118 = null;
		BinaryNode right_119 = null;
		int element_117 = -1;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -2;
		int element_114 = 0;
		int element_81 = 0;
		int element_6 = -2;
		int element_77 = -2;
		int element_80 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		obj.remove(x);
	}

	@Test
	public void test_remove108() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = new BinaryNode();
		BinaryNode left_451 = new BinaryNode();
		BinaryNode right_455 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_403 = null;
		BinaryNode right_452 = null;
		BinaryNode left_454 = null;
		int element_303 = 2;
		int element_79 = -3;
		int element_1 = -4;
		int element_306 = -3;
		int element_78 = -4;
		int element_402 = -2;
		int element_76 = -4;
		int element_82 = 1;
		int element_81 = -2;
		int element_83 = 2;
		int element_77 = 2;
		int element_80 = -3;
		int element_84 = -2;
		int element_85 = -1;
		int element_450 = 1;
		int x = 0;
		int element_453 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		right_404.element = element_450;
		right_404.left = left_451;
		right_404.right = right_452;
		left_451.element = element_453;
		left_451.left = left_454;
		left_451.right = right_455;
		obj.remove(x);
	}

	@Test
	public void test_remove109() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode right_65 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		BinaryNode right_62 = null;
		BinaryNode left_64 = null;
		int element_79 = 2;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 4;
		int element_82 = 1;
		int element_83 = 2;
		int element_12 = -2;
		int element_6 = 3;
		int element_81 = -2;
		int element_84 = -2;
		int element_63 = -1;
		int element_77 = 3;
		int element_80 = 3;
		int element_85 = -1;
		int element_60 = 1;
		int x = 0;
		int element_9 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_60;
		right_14.left = left_61;
		right_14.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		obj.remove(x);
	}

	@Test
	public void test_remove110() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = new BinaryNode();
		BinaryNode left_499 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_547 = null;
		BinaryNode right_548 = null;
		int element_303 = 0;
		int element_79 = 3;
		int element_546 = 2;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_83 = 3;
		int element_81 = 2;
		int element_498 = 1;
		int element_77 = -1;
		int element_80 = 1;
		int x = 1;
		int element_495 = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_500.element = element_546;
		right_500.left = left_547;
		right_500.right = right_548;
		obj.remove(x);
	}

	@Test
	public void test_remove111() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = new BinaryNode();
		BinaryNode left_502 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode right_500 = null;
		BinaryNode right_503 = null;
		int element_303 = 0;
		int element_79 = 4;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_83 = 3;
		int element_501 = 2;
		int element_81 = 4;
		int element_498 = 3;
		int element_77 = -1;
		int element_80 = 3;
		int element_495 = 4;
		int x = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		left_499.element = element_501;
		left_499.left = left_502;
		left_499.right = right_503;
		obj.remove(x);
	}

	@Test
	public void test_remove112() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = null;
		BinaryNode right_308 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode right_305 = null;
		int element_303 = 2;
		int element_79 = 2;
		int element_1 = 0;
		int element_306 = 1;
		int element_76 = -1;
		int element_78 = 0;
		int element_6 = -1;
		int element_77 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		obj.remove(x);
	}

	@Test
	public void test_remove113() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = null;
		BinaryNode right_404 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_310 = null;
		BinaryNode right_311 = null;
		int element_303 = 4;
		int element_79 = 1;
		int element_1 = 0;
		int element_306 = 2;
		int element_402 = 3;
		int element_76 = 0;
		int element_78 = 0;
		int element_81 = 2;
		int element_77 = 4;
		int element_80 = 1;
		int element_309 = 1;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		obj.remove(x);
	}

	@Test
	public void test_remove114() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = null;
		BinaryNode right_593 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		int element_591 = 2;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_77 = -1;
		int element_80 = 1;
		int x = 2;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		obj.remove(x);
	}

	@Test
	public void test_remove115() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = new BinaryNode();
		BinaryNode left_259 = new BinaryNode();
		BinaryNode right_260 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_211 = null;
		BinaryNode left_262 = null;
		BinaryNode right_263 = null;
		int element_258 = 0;
		int element_79 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -4;
		int element_114 = -3;
		int element_82 = -2;
		int element_261 = -1;
		int element_81 = -2;
		int element_6 = -4;
		int element_210 = -2;
		int element_83 = -1;
		int element_77 = -4;
		int element_80 = -3;
		int element_84 = -1;
		int element_85 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		right_212.element = element_258;
		right_212.left = left_259;
		right_212.right = right_260;
		left_259.element = element_261;
		left_259.left = left_262;
		left_259.right = right_263;
		obj.remove(x);
	}

	@Test
	public void test_remove116() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = new BinaryNode();
		BinaryNode left_358 = new BinaryNode();
		BinaryNode left_361 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_310 = null;
		BinaryNode right_359 = null;
		BinaryNode right_362 = null;
		int element_303 = 4;
		int element_79 = 4;
		int element_1 = -2;
		int element_306 = 3;
		int element_76 = -2;
		int element_78 = 3;
		int element_82 = 2;
		int element_360 = 1;
		int element_81 = -1;
		int element_83 = 3;
		int element_77 = 4;
		int element_80 = -2;
		int element_84 = 1;
		int element_85 = 2;
		int element_357 = 2;
		int element_309 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_311.element = element_357;
		right_311.left = left_358;
		right_311.right = right_359;
		left_358.element = element_360;
		left_358.left = left_361;
		left_358.right = right_362;
		obj.remove(x);
	}

	@Test
	public void test_remove117() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = new BinaryNode();
		BinaryNode left_121 = null;
		BinaryNode right_122 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode right_119 = null;
		int element_117 = 1;
		int element_79 = 3;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 2;
		int element_114 = 2;
		int element_81 = 2;
		int element_6 = -1;
		int element_120 = 0;
		int element_77 = -1;
		int element_80 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		left_118.element = element_120;
		left_118.left = left_121;
		left_118.right = right_122;
		obj.remove(x);
	}

	@Test
	public void test_remove118() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = null;
		BinaryNode right_3 = null;
		int element_1 = 1;
		int element_76 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		obj.remove(x);
	}

	@Test
	public void test_remove119() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = new BinaryNode();
		BinaryNode left_451 = new BinaryNode();
		BinaryNode left_454 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_403 = null;
		BinaryNode right_452 = null;
		BinaryNode right_455 = null;
		int element_303 = 3;
		int element_79 = -2;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -3;
		int element_306 = -2;
		int element_402 = -1;
		int element_82 = 2;
		int element_81 = -1;
		int element_83 = 3;
		int element_84 = 1;
		int element_77 = 3;
		int element_80 = -2;
		int element_85 = 2;
		int element_450 = 2;
		int x = 0;
		int element_453 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		right_404.element = element_450;
		right_404.left = left_451;
		right_404.right = right_452;
		left_451.element = element_453;
		left_451.left = left_454;
		left_451.right = right_455;
		obj.remove(x);
	}

	@Test
	public void test_remove120() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = new BinaryNode();
		BinaryNode right_503 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode right_500 = null;
		BinaryNode left_502 = null;
		int element_303 = 0;
		int element_79 = 4;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 0;
		int element_83 = 1;
		int element_501 = 1;
		int element_81 = 4;
		int element_498 = 3;
		int element_77 = -1;
		int element_80 = 3;
		int element_495 = 4;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		left_499.element = element_501;
		left_499.left = left_502;
		left_499.right = right_503;
		obj.remove(x);
	}

	@Test
	public void test_remove121() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_88 = new BinaryNode();
		BinaryNode right_92 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_89 = null;
		BinaryNode left_91 = null;
		int element_79 = -2;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 3;
		int element_82 = -2;
		int element_83 = -1;
		int element_90 = -1;
		int element_81 = 2;
		int element_6 = 2;
		int element_77 = 2;
		int element_87 = 1;
		int element_80 = 1;
		int x = 0;
		int element_9 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		left_88.element = element_90;
		left_88.left = left_91;
		left_88.right = right_92;
		obj.remove(x);
	}

	@Test
	public void test_remove122() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = new BinaryNode();
		BinaryNode left_214 = new BinaryNode();
		BinaryNode right_218 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode right_212 = null;
		BinaryNode right_215 = null;
		BinaryNode left_217 = null;
		int element_79 = -2;
		int element_1 = 3;
		int element_76 = 3;
		int element_114 = -2;
		int element_78 = -3;
		int element_82 = 1;
		int element_81 = 3;
		int element_6 = -3;
		int element_210 = 2;
		int element_83 = 2;
		int element_77 = -3;
		int element_80 = 2;
		int element_84 = -2;
		int element_85 = -1;
		int element_216 = -1;
		int element_213 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		left_211.element = element_213;
		left_211.left = left_214;
		left_211.right = right_215;
		left_214.element = element_216;
		left_214.left = left_217;
		left_214.right = right_218;
		obj.remove(x);
	}

	@Test
	public void test_remove123() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		int element_77 = 0;
		int element_79 = -2;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int x = -1;
		int element_9 = -2;
		int element_6 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		obj.remove(x);
	}

	@Test
	public void test_remove124() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = null;
		BinaryNode right_116 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		int element_77 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_114 = 0;
		int x = 0;
		int element_6 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		obj.remove(x);
	}

	@Test
	public void test_remove125() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		int element_77 = 0;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int x = -1;
		int element_9 = -1;
		int element_6 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		obj.remove(x);
	}

	@Test
	public void test_remove126() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = new BinaryNode();
		BinaryNode left_640 = new BinaryNode();
		BinaryNode right_644 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_592 = null;
		BinaryNode right_641 = null;
		BinaryNode left_643 = null;
		int element_591 = -4;
		int element_303 = -6;
		int element_79 = -6;
		int element_1 = -7;
		int element_76 = -7;
		int element_78 = -6;
		int element_82 = -4;
		int element_639 = -1;
		int element_83 = -1;
		int element_81 = -5;
		int element_84 = -4;
		int element_77 = -7;
		int element_80 = -5;
		int element_85 = -3;
		int element_642 = -3;
		int x = -2;
		int element_495 = -5;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		right_593.element = element_639;
		right_593.left = left_640;
		right_593.right = right_641;
		left_640.element = element_642;
		left_640.left = left_643;
		left_640.right = right_644;
		obj.remove(x);
	}

	@Test
	public void test_remove127() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode left_61 = null;
		BinaryNode right_62 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		int element_79 = 1;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 3;
		int element_12 = -1;
		int element_81 = -1;
		int element_6 = 2;
		int element_77 = 2;
		int element_80 = 2;
		int element_60 = 0;
		int x = 0;
		int element_9 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_60;
		right_14.left = left_61;
		right_14.right = right_62;
		obj.remove(x);
	}

	@Test
	public void test_remove128() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode left_16 = new BinaryNode();
		BinaryNode left_19 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode right_17 = null;
		BinaryNode right_20 = null;
		int element_18 = 1;
		int element_79 = 4;
		int element_83 = 2;
		int element_76 = 6;
		int element_78 = 6;
		int element_12 = 3;
		int element_81 = 3;
		int element_6 = 5;
		int element_15 = 2;
		int element_1 = 6;
		int element_82 = 4;
		int element_85 = 1;
		int element_84 = 3;
		int element_77 = 5;
		int element_80 = 5;
		int element_86 = 2;
		int x = 0;
		int element_9 = 4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		left_16.element = element_18;
		left_16.left = left_19;
		left_16.right = right_20;
		obj.remove(x);
	}

	@Test
	public void test_remove129() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = new BinaryNode();
		BinaryNode right_407 = new BinaryNode();
		BinaryNode left_430 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode right_404 = null;
		BinaryNode left_406 = null;
		BinaryNode right_431 = null;
		int element_303 = 3;
		int element_79 = -2;
		int element_1 = -3;
		int element_306 = -2;
		int element_78 = -3;
		int element_402 = 2;
		int element_76 = -3;
		int element_82 = -2;
		int element_81 = 3;
		int element_83 = -1;
		int element_84 = 1;
		int element_77 = 3;
		int element_80 = 2;
		int element_85 = 2;
		int element_405 = -1;
		int element_429 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		left_403.element = element_405;
		left_403.left = left_406;
		left_403.right = right_407;
		right_407.element = element_429;
		right_407.left = left_430;
		right_407.right = right_431;
		obj.remove(x);
	}

	@Test
	public void test_remove130() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_89 = new BinaryNode();
		BinaryNode left_88 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_106 = null;
		BinaryNode right_107 = null;
		int element_79 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -1;
		int element_83 = 0;
		int element_81 = -1;
		int element_6 = 0;
		int element_77 = 0;
		int element_87 = -2;
		int element_80 = -2;
		int element_105 = -1;
		int x = -2;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		right_89.element = element_105;
		right_89.left = left_106;
		right_89.right = right_107;
		obj.remove(x);
	}

	@Test
	public void test_remove131() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = new BinaryNode();
		BinaryNode left_592 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_640 = null;
		BinaryNode right_641 = null;
		int element_591 = -2;
		int element_303 = -4;
		int element_79 = -4;
		int element_1 = -5;
		int element_76 = -5;
		int element_78 = -4;
		int element_639 = -1;
		int element_82 = -1;
		int element_81 = -2;
		int element_83 = -1;
		int element_77 = -5;
		int element_80 = -3;
		int x = -2;
		int element_495 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		right_593.element = element_639;
		right_593.left = left_640;
		right_593.right = right_641;
		obj.remove(x);
	}

	@Test
	public void test_remove132() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode right_62 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		BinaryNode left_61 = null;
		int element_79 = 1;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 3;
		int element_82 = -2;
		int element_12 = -2;
		int element_81 = -2;
		int element_6 = 2;
		int element_83 = -1;
		int element_77 = 2;
		int element_80 = 2;
		int element_60 = -1;
		int x = 0;
		int element_9 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_60;
		right_14.left = left_61;
		right_14.right = right_62;
		obj.remove(x);
	}

	@Test
	public void test_remove133() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_88 = null;
		BinaryNode right_89 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_13 = null;
		BinaryNode right_14 = null;
		int element_79 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_12 = -3;
		int element_81 = -2;
		int element_6 = 0;
		int element_77 = 0;
		int element_87 = -1;
		int element_80 = -3;
		int x = -2;
		int element_9 = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		obj.remove(x);
	}

	@Test
	public void test_remove134() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_118 = null;
		int element_117 = -1;
		int element_79 = 2;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 1;
		int element_114 = 1;
		int element_81 = -1;
		int element_6 = -2;
		int element_77 = -2;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		obj.remove(x);
	}

	@Test
	public void test_remove135() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = new BinaryNode();
		BinaryNode left_313 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode right_311 = null;
		BinaryNode right_314 = null;
		int element_303 = 4;
		int element_79 = 4;
		int element_1 = -1;
		int element_306 = 3;
		int element_76 = -1;
		int element_78 = 3;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = 3;
		int element_77 = 4;
		int element_80 = 2;
		int element_312 = 1;
		int element_309 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		left_310.element = element_312;
		left_310.left = left_313;
		left_310.right = right_314;
		obj.remove(x);
	}

	@Test
	public void test_remove136() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_305 = null;
		BinaryNode left_2 = null;
		BinaryNode left_307 = null;
		BinaryNode right_308 = null;
		int element_303 = 2;
		int element_79 = 1;
		int element_1 = 0;
		int element_306 = 1;
		int element_76 = 0;
		int element_78 = 1;
		int element_77 = 0;
		int element_80 = 2;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		obj.remove(x);
	}

	@Test
	public void test_remove137() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode right_311 = null;
		int element_303 = 3;
		int element_79 = 3;
		int element_1 = -1;
		int element_306 = 2;
		int element_76 = -1;
		int element_78 = 2;
		int element_81 = 2;
		int element_77 = 3;
		int element_80 = 1;
		int element_309 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		obj.remove(x);
	}

	@Test
	public void test_remove138() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = new BinaryNode();
		BinaryNode left_547 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_499 = null;
		BinaryNode right_548 = null;
		int element_303 = -2;
		int element_79 = 2;
		int element_546 = 1;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -2;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = -1;
		int element_498 = -1;
		int element_77 = -3;
		int element_80 = -2;
		int x = 0;
		int element_495 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_500.element = element_546;
		right_500.left = left_547;
		right_500.right = right_548;
		obj.remove(x);
	}

	@Test
	public void test_remove139() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = null;
		BinaryNode right_212 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_114 = -1;
		int element_76 = 1;
		int element_78 = -2;
		int element_6 = -2;
		int element_210 = 0;
		int element_77 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		obj.remove(x);
	}

	@Test
	public void test_remove140() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = new BinaryNode();
		BinaryNode left_547 = null;
		BinaryNode right_548 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_499 = null;
		int element_303 = -2;
		int element_79 = 1;
		int element_546 = 0;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -2;
		int element_81 = -1;
		int element_498 = -1;
		int element_77 = -3;
		int element_80 = -2;
		int x = 0;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_500.element = element_546;
		right_500.left = left_547;
		right_500.right = right_548;
		obj.remove(x);
	}

	@Test
	public void test_remove141() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = new BinaryNode();
		BinaryNode left_499 = null;
		BinaryNode left_2 = null;
		BinaryNode left_307 = null;
		BinaryNode right_308 = null;
		BinaryNode right_497 = null;
		BinaryNode left_547 = null;
		BinaryNode right_548 = null;
		int element_303 = 0;
		int element_79 = -1;
		int element_546 = 2;
		int element_1 = -2;
		int element_306 = -1;
		int element_76 = -2;
		int element_78 = -1;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = 3;
		int element_85 = 3;
		int element_84 = 2;
		int element_498 = 1;
		int element_77 = -2;
		int element_80 = 0;
		int x = 0;
		int element_495 = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_500.element = element_546;
		right_500.left = left_547;
		right_500.right = right_548;
		obj.remove(x);
	}

	@Test
	public void test_remove142() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = new BinaryNode();
		BinaryNode left_214 = new BinaryNode();
		BinaryNode right_215 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode right_212 = null;
		BinaryNode left_217 = null;
		BinaryNode right_218 = null;
		int element_79 = -2;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = -3;
		int element_114 = -2;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = 2;
		int element_6 = -3;
		int element_210 = 1;
		int element_84 = -1;
		int element_77 = -3;
		int element_80 = 1;
		int element_85 = 0;
		int element_216 = -1;
		int element_213 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		left_211.element = element_213;
		left_211.left = left_214;
		left_211.right = right_215;
		left_214.element = element_216;
		left_214.left = left_217;
		left_214.right = right_218;
		obj.remove(x);
	}

	@Test
	public void test_remove143() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = new BinaryNode();
		BinaryNode left_502 = new BinaryNode();
		BinaryNode left_505 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode right_500 = null;
		BinaryNode right_503 = null;
		BinaryNode right_506 = null;
		int element_303 = 0;
		int element_79 = 5;
		int element_1 = -1;
		int element_504 = 2;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 3;
		int element_501 = 3;
		int element_81 = 5;
		int element_83 = 4;
		int element_84 = 2;
		int element_498 = 4;
		int element_77 = -1;
		int element_80 = 4;
		int element_85 = 3;
		int element_495 = 5;
		int x = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		left_499.element = element_501;
		left_499.left = left_502;
		left_499.right = right_503;
		left_502.element = element_504;
		left_502.left = left_505;
		left_502.right = right_506;
		obj.remove(x);
	}

	@Test
	public void test_remove144() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = new BinaryNode();
		BinaryNode left_547 = new BinaryNode();
		BinaryNode right_548 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_499 = null;
		BinaryNode left_550 = null;
		BinaryNode right_551 = null;
		int element_303 = -3;
		int element_79 = 1;
		int element_546 = 0;
		int element_1 = -4;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = -2;
		int element_83 = -1;
		int element_85 = 0;
		int element_81 = -2;
		int element_84 = -1;
		int element_498 = -2;
		int element_77 = -4;
		int element_80 = -3;
		int element_549 = -1;
		int x = 0;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_500.element = element_546;
		right_500.left = left_547;
		right_500.right = right_548;
		left_547.element = element_549;
		left_547.left = left_550;
		left_547.right = right_551;
		obj.remove(x);
	}

	@Test
	public void test_remove145() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = new BinaryNode();
		BinaryNode right_503 = new BinaryNode();
		BinaryNode left_502 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode right_500 = null;
		BinaryNode left_526 = null;
		BinaryNode right_527 = null;
		int element_303 = 0;
		int element_79 = 4;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 1;
		int element_83 = 2;
		int element_501 = 1;
		int element_81 = 4;
		int element_85 = 3;
		int element_84 = 2;
		int element_498 = 3;
		int element_525 = 2;
		int element_77 = -1;
		int element_80 = 3;
		int element_495 = 4;
		int x = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		left_499.element = element_501;
		left_499.left = left_502;
		left_499.right = right_503;
		right_503.element = element_525;
		right_503.left = left_526;
		right_503.right = right_527;
		obj.remove(x);
	}

	@Test
	public void test_remove146() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = new BinaryNode();
		BinaryNode left_595 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode right_593 = null;
		BinaryNode right_596 = null;
		int element_591 = 3;
		int element_303 = -1;
		int element_79 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -1;
		int element_82 = 2;
		int element_83 = 3;
		int element_81 = 3;
		int element_594 = 2;
		int element_77 = -2;
		int element_80 = 0;
		int x = 1;
		int element_495 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		left_592.element = element_594;
		left_592.left = left_595;
		left_592.right = right_596;
		obj.remove(x);
	}

	@Test
	public void test_remove147() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = new BinaryNode();
		BinaryNode right_641 = new BinaryNode();
		BinaryNode left_664 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_592 = null;
		BinaryNode left_640 = null;
		BinaryNode right_665 = null;
		int element_591 = -2;
		int element_303 = -4;
		int element_663 = 1;
		int element_79 = -4;
		int element_1 = -5;
		int element_76 = -5;
		int element_78 = -4;
		int element_82 = -2;
		int element_639 = -1;
		int element_83 = -2;
		int element_81 = -3;
		int element_85 = 1;
		int element_84 = -1;
		int element_77 = -5;
		int element_80 = -3;
		int x = 0;
		int element_495 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		right_593.element = element_639;
		right_593.left = left_640;
		right_593.right = right_641;
		right_641.element = element_663;
		right_641.left = left_664;
		right_641.right = right_665;
		obj.remove(x);
	}

	@Test
	public void test_remove148() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = new BinaryNode();
		BinaryNode right_452 = new BinaryNode();
		BinaryNode right_476 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_403 = null;
		BinaryNode left_451 = null;
		BinaryNode left_475 = null;
		int element_474 = -1;
		int element_303 = 1;
		int element_79 = -4;
		int element_1 = -5;
		int element_306 = -4;
		int element_78 = -5;
		int element_402 = -3;
		int element_76 = -5;
		int element_82 = -3;
		int element_81 = -3;
		int element_83 = -2;
		int element_84 = -2;
		int element_77 = 1;
		int element_80 = -4;
		int element_85 = -1;
		int element_450 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		right_404.element = element_450;
		right_404.left = left_451;
		right_404.right = right_452;
		right_452.element = element_474;
		right_452.left = left_475;
		right_452.right = right_476;
		obj.remove(x);
	}

	@Test
	public void test_remove149() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = new BinaryNode();
		BinaryNode left_259 = new BinaryNode();
		BinaryNode right_263 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_211 = null;
		BinaryNode right_260 = null;
		BinaryNode left_262 = null;
		int element_258 = 1;
		int element_79 = -3;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = -4;
		int element_114 = -3;
		int element_82 = 1;
		int element_261 = -1;
		int element_81 = -2;
		int element_6 = -4;
		int element_210 = -2;
		int element_83 = 2;
		int element_77 = -4;
		int element_80 = -3;
		int element_84 = -2;
		int element_85 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		right_212.element = element_258;
		right_212.left = left_259;
		right_212.right = right_260;
		left_259.element = element_261;
		left_259.left = left_262;
		left_259.right = right_263;
		obj.remove(x);
	}

	@Test
	public void test_remove150() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = new BinaryNode();
		BinaryNode right_503 = new BinaryNode();
		BinaryNode left_526 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode right_500 = null;
		BinaryNode left_502 = null;
		BinaryNode right_527 = null;
		int element_303 = -2;
		int element_79 = 3;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -2;
		int element_82 = -2;
		int element_83 = -1;
		int element_501 = -1;
		int element_81 = 3;
		int element_85 = 2;
		int element_84 = 1;
		int element_498 = 2;
		int element_525 = 1;
		int element_77 = -3;
		int element_80 = 2;
		int element_495 = 3;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		left_499.element = element_501;
		left_499.left = left_502;
		left_499.right = right_503;
		right_503.element = element_525;
		right_503.left = left_526;
		right_503.right = right_527;
		obj.remove(x);
	}

	@Test
	public void test_remove151() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = new BinaryNode();
		BinaryNode right_548 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_499 = null;
		BinaryNode left_547 = null;
		int element_303 = -3;
		int element_79 = 1;
		int element_546 = -1;
		int element_1 = -4;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = -2;
		int element_498 = -2;
		int element_77 = -4;
		int element_80 = -3;
		int x = 0;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_500.element = element_546;
		right_500.left = left_547;
		right_500.right = right_548;
		obj.remove(x);
	}

	@Test
	public void test_remove152() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = new BinaryNode();
		BinaryNode right_314 = new BinaryNode();
		BinaryNode right_338 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode right_311 = null;
		BinaryNode left_313 = null;
		BinaryNode left_337 = null;
		int element_303 = 3;
		int element_79 = 3;
		int element_1 = -3;
		int element_306 = 2;
		int element_78 = 2;
		int element_76 = -3;
		int element_82 = -3;
		int element_336 = -1;
		int element_81 = 2;
		int element_83 = -2;
		int element_84 = -2;
		int element_77 = 3;
		int element_80 = 1;
		int element_85 = -1;
		int element_312 = -2;
		int element_309 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		left_310.element = element_312;
		left_310.left = left_313;
		left_310.right = right_314;
		right_314.element = element_336;
		right_314.left = left_337;
		right_314.right = right_338;
		obj.remove(x);
	}

	@Test
	public void test_remove153() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = new BinaryNode();
		BinaryNode right_167 = new BinaryNode();
		BinaryNode left_166 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_118 = null;
		BinaryNode left_190 = null;
		BinaryNode right_191 = null;
		int element_117 = -1;
		int element_79 = 3;
		int element_189 = 1;
		int element_1 = 3;
		int element_165 = 0;
		int element_76 = 3;
		int element_114 = 2;
		int element_78 = 2;
		int element_82 = 0;
		int element_81 = -1;
		int element_6 = -2;
		int element_83 = 1;
		int element_84 = 1;
		int element_77 = -2;
		int element_80 = -2;
		int element_85 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_119.element = element_165;
		right_119.left = left_166;
		right_119.right = right_167;
		right_167.element = element_189;
		right_167.left = left_190;
		right_167.right = right_191;
		obj.remove(x);
	}

	@Test
	public void test_remove154() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = new BinaryNode();
		BinaryNode left_313 = null;
		BinaryNode right_314 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode right_311 = null;
		int element_303 = 3;
		int element_79 = 3;
		int element_1 = -1;
		int element_306 = 2;
		int element_76 = -1;
		int element_78 = 2;
		int element_81 = 2;
		int element_77 = 3;
		int element_80 = 1;
		int element_312 = 0;
		int element_309 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		left_310.element = element_312;
		left_310.left = left_313;
		left_310.right = right_314;
		obj.remove(x);
	}

	@Test
	public void test_remove155() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_307 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode right_305 = null;
		BinaryNode left_403 = null;
		BinaryNode right_404 = null;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -3;
		int element_306 = -2;
		int element_402 = -1;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = -1;
		int element_6 = -4;
		int element_81 = -1;
		int element_77 = -4;
		int element_80 = -2;
		int element_83 = 0;
		int x = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		obj.remove(x);
	}

	@Test
	public void test_remove156() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -1;
		int element_12 = -2;
		int element_81 = -2;
		int element_6 = 0;
		int element_77 = 0;
		int element_80 = 0;
		int x = -3;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		obj.remove(x);
	}

	@Test
	public void test_remove157() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = new BinaryNode();
		BinaryNode left_358 = new BinaryNode();
		BinaryNode right_362 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_310 = null;
		BinaryNode right_359 = null;
		BinaryNode left_361 = null;
		int element_303 = 3;
		int element_79 = 3;
		int element_1 = -3;
		int element_306 = 2;
		int element_76 = -3;
		int element_78 = 2;
		int element_82 = 1;
		int element_83 = 2;
		int element_360 = -1;
		int element_81 = -2;
		int element_84 = -2;
		int element_77 = 3;
		int element_80 = -3;
		int element_85 = -1;
		int element_357 = 1;
		int element_309 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_311.element = element_357;
		right_311.left = left_358;
		right_311.right = right_359;
		left_358.element = element_360;
		left_358.left = left_361;
		left_358.right = right_362;
		obj.remove(x);
	}

	@Test
	public void test_remove158() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = new BinaryNode();
		BinaryNode left_121 = new BinaryNode();
		BinaryNode right_125 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode right_119 = null;
		BinaryNode right_122 = null;
		BinaryNode left_124 = null;
		int element_117 = 2;
		int element_79 = 4;
		int element_123 = -1;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 3;
		int element_114 = 3;
		int element_82 = 1;
		int element_81 = 3;
		int element_6 = -2;
		int element_83 = 2;
		int element_120 = 1;
		int element_77 = -2;
		int element_80 = 2;
		int element_84 = -2;
		int element_85 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		left_118.element = element_120;
		left_118.left = left_121;
		left_118.right = right_122;
		left_121.element = element_123;
		left_121.left = left_124;
		left_121.right = right_125;
		obj.remove(x);
	}

	@Test
	public void test_remove159() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode right_17 = new BinaryNode();
		BinaryNode left_40 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode left_16 = null;
		BinaryNode right_41 = null;
		int element_79 = 5;
		int element_15 = 1;
		int element_1 = 7;
		int element_39 = 3;
		int element_76 = 7;
		int element_78 = 7;
		int element_82 = 5;
		int element_12 = 4;
		int element_81 = 4;
		int element_6 = 6;
		int element_83 = 1;
		int element_84 = 3;
		int element_77 = 6;
		int element_80 = 6;
		int element_85 = 4;
		int x = 2;
		int element_9 = 5;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		right_17.element = element_39;
		right_17.left = left_40;
		right_17.right = right_41;
		obj.remove(x);
	}

	@Test
	public void test_remove160() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		int element_77 = -1;
		int element_303 = 0;
		int element_79 = 2;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int x = 1;
		int element_495 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		obj.remove(x);
	}

	@Test
	public void test_remove161() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode left_16 = new BinaryNode();
		BinaryNode right_20 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode right_17 = null;
		BinaryNode left_19 = null;
		int element_18 = -1;
		int element_79 = 3;
		int element_15 = 1;
		int element_1 = 5;
		int element_76 = 5;
		int element_78 = 5;
		int element_82 = 3;
		int element_83 = 1;
		int element_12 = 2;
		int element_81 = 2;
		int element_6 = 4;
		int element_85 = -1;
		int element_84 = 2;
		int element_77 = 4;
		int element_80 = 4;
		int x = 0;
		int element_9 = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		left_16.element = element_18;
		left_16.left = left_19;
		left_16.right = right_20;
		obj.remove(x);
	}

	@Test
	public void test_remove162() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = new BinaryNode();
		BinaryNode right_359 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_310 = null;
		BinaryNode left_358 = null;
		int element_303 = 2;
		int element_79 = 2;
		int element_1 = -3;
		int element_306 = 1;
		int element_76 = -3;
		int element_78 = 1;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = -2;
		int element_77 = 2;
		int element_80 = -3;
		int element_357 = -1;
		int element_309 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_311.element = element_357;
		right_311.left = left_358;
		right_311.right = right_359;
		obj.remove(x);
	}

	@Test
	public void test_remove163() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode left_16 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode right_17 = null;
		int element_79 = -1;
		int element_15 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -1;
		int element_83 = -3;
		int element_12 = -2;
		int element_81 = -2;
		int element_6 = 0;
		int element_84 = -2;
		int element_77 = 0;
		int element_80 = 0;
		int x = -4;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		obj.remove(x);
	}

	@Test
	public void test_remove164() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = new BinaryNode();
		BinaryNode left_166 = new BinaryNode();
		BinaryNode right_170 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_118 = null;
		BinaryNode right_167 = null;
		BinaryNode left_169 = null;
		int element_117 = -2;
		int element_79 = 3;
		int element_168 = -1;
		int element_1 = 3;
		int element_165 = 1;
		int element_76 = 3;
		int element_114 = 2;
		int element_78 = 2;
		int element_82 = 1;
		int element_6 = -3;
		int element_81 = -2;
		int element_83 = 2;
		int element_77 = -3;
		int element_80 = -3;
		int element_84 = -2;
		int element_85 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_119.element = element_165;
		right_119.left = left_166;
		right_119.right = right_167;
		left_166.element = element_168;
		left_166.left = left_169;
		left_166.right = right_170;
		obj.remove(x);
	}

	@Test
	public void test_remove165() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = new BinaryNode();
		BinaryNode right_122 = new BinaryNode();
		BinaryNode right_146 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode right_119 = null;
		BinaryNode left_121 = null;
		BinaryNode left_145 = null;
		int element_117 = 1;
		int element_79 = 3;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = 2;
		int element_114 = 2;
		int element_82 = -3;
		int element_83 = -2;
		int element_144 = -1;
		int element_6 = -3;
		int element_81 = 2;
		int element_120 = -2;
		int element_77 = -3;
		int element_80 = 1;
		int element_84 = -2;
		int element_85 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		left_118.element = element_120;
		left_118.left = left_121;
		left_118.right = right_122;
		right_122.element = element_144;
		right_122.left = left_145;
		right_122.right = right_146;
		obj.remove(x);
	}

	@Test
	public void test_remove166() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = new BinaryNode();
		BinaryNode left_358 = null;
		BinaryNode right_359 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_310 = null;
		int element_303 = 2;
		int element_79 = 2;
		int element_1 = -2;
		int element_306 = 1;
		int element_76 = -2;
		int element_78 = 1;
		int element_81 = -1;
		int element_77 = 2;
		int element_80 = -2;
		int element_357 = 0;
		int element_309 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_311.element = element_357;
		right_311.left = left_358;
		right_311.right = right_359;
		obj.remove(x);
	}

	@Test
	public void test_remove167() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = new BinaryNode();
		BinaryNode right_452 = new BinaryNode();
		BinaryNode left_475 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_403 = null;
		BinaryNode left_451 = null;
		BinaryNode right_476 = null;
		int element_474 = 1;
		int element_303 = 2;
		int element_79 = -3;
		int element_1 = -4;
		int element_306 = -3;
		int element_402 = -2;
		int element_76 = -4;
		int element_78 = -4;
		int element_82 = -2;
		int element_81 = -2;
		int element_83 = -1;
		int element_84 = 1;
		int element_77 = 2;
		int element_80 = -3;
		int element_85 = 2;
		int element_450 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		right_404.element = element_450;
		right_404.left = left_451;
		right_404.right = right_452;
		right_452.element = element_474;
		right_452.left = left_475;
		right_452.right = right_476;
		obj.remove(x);
	}

	@Test
	public void test_remove168() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_592 = null;
		int element_591 = 2;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_81 = 1;
		int element_77 = -1;
		int element_80 = 1;
		int x = 3;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		obj.remove(x);
	}

	@Test
	public void test_remove169() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = new BinaryNode();
		BinaryNode left_502 = null;
		BinaryNode right_503 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode right_500 = null;
		int element_303 = 0;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_501 = 1;
		int element_81 = 3;
		int element_498 = 2;
		int element_77 = -1;
		int element_80 = 2;
		int element_495 = 3;
		int x = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		left_499.element = element_501;
		left_499.left = left_502;
		left_499.right = right_503;
		obj.remove(x);
	}

	@Test
	public void test_remove170() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_89 = new BinaryNode();
		BinaryNode left_106 = null;
		BinaryNode right_107 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_88 = null;
		int element_79 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_81 = -2;
		int element_6 = 0;
		int element_77 = 0;
		int element_87 = -2;
		int element_80 = -3;
		int element_105 = -1;
		int x = -1;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		right_89.element = element_105;
		right_89.left = left_106;
		right_89.right = right_107;
		obj.remove(x);
	}

	@Test
	public void test_remove171() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_403 = null;
		int element_303 = 1;
		int element_79 = -2;
		int element_1 = -3;
		int element_306 = -2;
		int element_402 = -1;
		int element_76 = -3;
		int element_78 = -3;
		int element_81 = -1;
		int element_77 = 1;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		obj.remove(x);
	}

	@Test
	public void test_remove172() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_12 = -3;
		int element_81 = -3;
		int element_6 = 0;
		int element_77 = 0;
		int element_80 = 0;
		int x = -2;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		obj.remove(x);
	}

	@Test
	public void test_remove173() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = new BinaryNode();
		BinaryNode left_313 = new BinaryNode();
		BinaryNode right_317 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode right_311 = null;
		BinaryNode right_314 = null;
		BinaryNode left_316 = null;
		int element_315 = -1;
		int element_303 = 4;
		int element_79 = 4;
		int element_1 = -2;
		int element_306 = 3;
		int element_76 = -2;
		int element_78 = 3;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = 3;
		int element_85 = -1;
		int element_84 = -2;
		int element_77 = 4;
		int element_80 = 2;
		int element_312 = 1;
		int element_309 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		left_310.element = element_312;
		left_310.left = left_313;
		left_310.right = right_314;
		left_313.element = element_315;
		left_313.left = left_316;
		left_313.right = right_317;
		obj.remove(x);
	}

	@Test
	public void test_remove174() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_115 = null;
		BinaryNode right_3 = null;
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		BinaryNode left_211 = null;
		BinaryNode right_212 = null;
		int element_79 = 0;
		int element_1 = 3;
		int element_76 = 3;
		int element_114 = 1;
		int element_78 = -1;
		int element_82 = 2;
		int element_81 = 2;
		int element_6 = 0;
		int element_210 = 2;
		int element_83 = 3;
		int element_77 = -1;
		int element_80 = 1;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		obj.remove(x);
	}

	@Test
	public void test_remove175() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = new BinaryNode();
		BinaryNode left_214 = new BinaryNode();
		BinaryNode left_217 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode right_212 = null;
		BinaryNode right_215 = null;
		BinaryNode right_218 = null;
		int element_79 = -1;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = -2;
		int element_114 = -1;
		int element_82 = 2;
		int element_83 = 3;
		int element_81 = 4;
		int element_6 = -2;
		int element_210 = 3;
		int element_84 = 1;
		int element_77 = -2;
		int element_80 = 3;
		int element_85 = 2;
		int element_216 = 1;
		int element_213 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		left_211.element = element_213;
		left_211.left = left_214;
		left_211.right = right_215;
		left_214.element = element_216;
		left_214.left = left_217;
		left_214.right = right_218;
		obj.remove(x);
	}

	@Test
	public void test_remove176() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode right_14 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_16 = null;
		BinaryNode right_17 = null;
		int element_79 = -1;
		int element_15 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -3;
		int element_83 = -2;
		int element_12 = -2;
		int element_81 = -3;
		int element_6 = 0;
		int element_77 = 0;
		int element_80 = 0;
		int x = -2;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		obj.remove(x);
	}

	@Test
	public void test_remove177() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_304 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode left_496 = null;
		BinaryNode right_497 = null;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -2;
		int element_78 = -1;
		int element_6 = -2;
		int element_81 = 1;
		int element_77 = -2;
		int element_80 = 1;
		int element_495 = 1;
		int x = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		obj.remove(x);
	}

	@Test
	public void test_remove178() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = null;
		BinaryNode right_119 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		int element_117 = 0;
		int element_79 = 2;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 1;
		int element_114 = 1;
		int element_6 = -1;
		int element_77 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		obj.remove(x);
	}

	@Test
	public void test_remove179() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		int element_77 = 1;
		int element_303 = 1;
		int element_1 = -1;
		int element_76 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		obj.remove(x);
	}

	@Test
	public void test_remove180() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_88 = new BinaryNode();
		BinaryNode left_91 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode right_89 = null;
		BinaryNode right_92 = null;
		int element_79 = -1;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 4;
		int element_82 = 1;
		int element_90 = 1;
		int element_81 = 3;
		int element_6 = 3;
		int element_83 = 2;
		int element_77 = 3;
		int element_87 = 2;
		int element_80 = 2;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		left_88.element = element_90;
		left_88.left = left_91;
		left_88.right = right_92;
		obj.remove(x);
	}

	@Test
	public void test_remove181() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_499 = null;
		int element_303 = 0;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_81 = 1;
		int element_498 = 1;
		int element_77 = -1;
		int element_80 = 0;
		int x = 2;
		int element_495 = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		obj.remove(x);
	}

	@Test
	public void test_remove182() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = new BinaryNode();
		BinaryNode left_406 = new BinaryNode();
		BinaryNode right_410 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode right_404 = null;
		BinaryNode right_407 = null;
		BinaryNode left_409 = null;
		int element_303 = 3;
		int element_79 = -2;
		int element_1 = -3;
		int element_306 = -2;
		int element_402 = 2;
		int element_76 = -3;
		int element_78 = -3;
		int element_82 = 1;
		int element_81 = 3;
		int element_83 = 2;
		int element_77 = 3;
		int element_80 = 2;
		int element_84 = -2;
		int element_405 = 1;
		int element_85 = -1;
		int x = 0;
		int element_408 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		left_403.element = element_405;
		left_403.left = left_406;
		left_403.right = right_407;
		left_406.element = element_408;
		left_406.left = left_409;
		left_406.right = right_410;
		obj.remove(x);
	}

	@Test
	public void test_remove183() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode left_88 = new BinaryNode();
		BinaryNode right_89 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_91 = null;
		BinaryNode right_92 = null;
		int element_79 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -2;
		int element_83 = -1;
		int element_90 = -2;
		int element_81 = -2;
		int element_6 = 0;
		int element_77 = 0;
		int element_87 = -1;
		int element_80 = -3;
		int x = -1;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		left_88.element = element_90;
		left_88.left = left_91;
		left_88.right = right_92;
		obj.remove(x);
	}

	@Test
	public void test_remove184() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = new BinaryNode();
		BinaryNode left_595 = null;
		BinaryNode right_596 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode right_593 = null;
		int element_591 = 2;
		int element_303 = -1;
		int element_79 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -1;
		int element_81 = 2;
		int element_594 = 1;
		int element_77 = -2;
		int element_80 = 0;
		int x = 1;
		int element_495 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		left_592.element = element_594;
		left_592.left = left_595;
		left_592.right = right_596;
		obj.remove(x);
	}

	@Test
	public void test_remove185() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_304 = null;
		BinaryNode left_2 = null;
		BinaryNode left_496 = null;
		BinaryNode right_497 = null;
		int element_77 = 0;
		int element_303 = 0;
		int element_79 = 1;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 1;
		int element_495 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		obj.remove(x);
	}

	@Test
	public void test_remove186() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode right_62 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		BinaryNode left_64 = null;
		BinaryNode right_65 = null;
		int element_79 = 0;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 2;
		int element_82 = -3;
		int element_12 = -3;
		int element_81 = -3;
		int element_6 = 1;
		int element_83 = -2;
		int element_84 = -2;
		int element_63 = -2;
		int element_77 = 1;
		int element_80 = 1;
		int element_85 = -1;
		int element_60 = -1;
		int x = -1;
		int element_9 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_60;
		right_14.left = left_61;
		right_14.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		obj.remove(x);
	}

	@Test
	public void test_remove187() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode right_119 = new BinaryNode();
		BinaryNode left_166 = new BinaryNode();
		BinaryNode right_167 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_118 = null;
		BinaryNode left_169 = null;
		BinaryNode right_170 = null;
		int element_117 = -2;
		int element_79 = 2;
		int element_168 = -1;
		int element_1 = 2;
		int element_165 = 0;
		int element_76 = 2;
		int element_114 = 1;
		int element_78 = 1;
		int element_82 = -2;
		int element_81 = -2;
		int element_6 = -3;
		int element_83 = -1;
		int element_77 = -3;
		int element_80 = -3;
		int element_84 = -1;
		int element_85 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		right_119.element = element_165;
		right_119.left = left_166;
		right_119.right = right_167;
		left_166.element = element_168;
		left_166.left = left_169;
		left_166.right = right_170;
		obj.remove(x);
	}

	@Test
	public void test_remove188() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = new BinaryNode();
		BinaryNode left_403 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_310 = null;
		BinaryNode right_311 = null;
		BinaryNode left_451 = null;
		BinaryNode right_452 = null;
		int element_303 = 0;
		int element_79 = -4;
		int element_1 = -5;
		int element_306 = -3;
		int element_78 = -5;
		int element_402 = -2;
		int element_76 = -5;
		int element_82 = -2;
		int element_81 = -3;
		int element_83 = -1;
		int element_84 = -1;
		int element_77 = 0;
		int element_80 = -4;
		int element_85 = 0;
		int element_309 = -4;
		int element_450 = -1;
		int x = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		right_404.element = element_450;
		right_404.left = left_451;
		right_404.right = right_452;
		obj.remove(x);
	}

	@Test
	public void test_remove189() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = new BinaryNode();
		BinaryNode right_314 = new BinaryNode();
		BinaryNode left_337 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode right_311 = null;
		BinaryNode left_313 = null;
		BinaryNode right_338 = null;
		int element_303 = 4;
		int element_79 = 4;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = 3;
		int element_306 = 3;
		int element_336 = 1;
		int element_81 = 3;
		int element_82 = -2;
		int element_83 = -1;
		int element_77 = 4;
		int element_80 = 2;
		int element_84 = 1;
		int element_85 = 2;
		int element_312 = -1;
		int element_309 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		left_310.element = element_312;
		left_310.left = left_313;
		left_310.right = right_314;
		right_314.element = element_336;
		right_314.left = left_337;
		right_314.right = right_338;
		obj.remove(x);
	}

	@Test
	public void test_remove190() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = new BinaryNode();
		BinaryNode right_215 = new BinaryNode();
		BinaryNode left_238 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode right_212 = null;
		BinaryNode left_214 = null;
		BinaryNode right_239 = null;
		int element_79 = -2;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = -3;
		int element_114 = -2;
		int element_82 = -2;
		int element_83 = -1;
		int element_6 = -3;
		int element_210 = 2;
		int element_81 = 3;
		int element_237 = 1;
		int element_77 = -3;
		int element_80 = 2;
		int element_84 = 1;
		int element_85 = 2;
		int element_213 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		left_211.element = element_213;
		left_211.left = left_214;
		left_211.right = right_215;
		right_215.element = element_237;
		right_215.left = left_238;
		right_215.right = right_239;
		obj.remove(x);
	}

	@Test
	public void test_remove191() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = new BinaryNode();
		BinaryNode right_500 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_502 = null;
		BinaryNode right_503 = null;
		int element_303 = 0;
		int element_79 = 3;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 1;
		int element_83 = 2;
		int element_501 = 1;
		int element_81 = 1;
		int element_498 = 2;
		int element_77 = -1;
		int element_80 = 0;
		int element_495 = 3;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		left_499.element = element_501;
		left_499.left = left_502;
		left_499.right = right_503;
		obj.remove(x);
	}

	@Test
	public void test_remove192() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode left_211 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode right_212 = null;
		int element_79 = -1;
		int element_1 = 2;
		int element_76 = 2;
		int element_114 = -1;
		int element_78 = -2;
		int element_81 = 2;
		int element_6 = -2;
		int element_210 = 1;
		int element_77 = -2;
		int element_80 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		obj.remove(x);
	}

	@Test
	public void test_remove193() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = new BinaryNode();
		BinaryNode right_407 = new BinaryNode();
		BinaryNode right_431 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode right_404 = null;
		BinaryNode left_406 = null;
		BinaryNode left_430 = null;
		int element_303 = 2;
		int element_79 = -3;
		int element_1 = -4;
		int element_306 = -3;
		int element_78 = -4;
		int element_402 = 1;
		int element_76 = -4;
		int element_81 = 2;
		int element_82 = -3;
		int element_83 = -2;
		int element_77 = 2;
		int element_80 = 1;
		int element_84 = -2;
		int element_405 = -2;
		int element_85 = -1;
		int element_429 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		left_403.element = element_405;
		left_403.left = left_406;
		left_403.right = right_407;
		right_407.element = element_429;
		right_407.left = left_430;
		right_407.right = right_431;
		obj.remove(x);
	}

	@Test
	public void test_remove194() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode left_403 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode right_404 = null;
		int element_303 = 2;
		int element_79 = -1;
		int element_1 = -2;
		int element_306 = -1;
		int element_402 = 1;
		int element_76 = -2;
		int element_78 = -2;
		int element_81 = 2;
		int element_77 = 2;
		int element_80 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		obj.remove(x);
	}

	@Test
	public void test_remove195() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = new BinaryNode();
		BinaryNode left_259 = new BinaryNode();
		BinaryNode left_262 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_211 = null;
		BinaryNode right_260 = null;
		BinaryNode right_263 = null;
		int element_258 = 2;
		int element_79 = -2;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = -3;
		int element_114 = -2;
		int element_82 = 2;
		int element_261 = 1;
		int element_81 = -1;
		int element_6 = -3;
		int element_210 = -1;
		int element_83 = 3;
		int element_77 = -3;
		int element_80 = -2;
		int element_84 = 1;
		int element_85 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		right_212.element = element_258;
		right_212.left = left_259;
		right_212.right = right_260;
		left_259.element = element_261;
		left_259.left = left_262;
		left_259.right = right_263;
		obj.remove(x);
	}

	@Test
	public void test_remove196() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = null;
		BinaryNode right_500 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		int element_303 = 0;
		int element_79 = 2;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_498 = 1;
		int element_77 = -1;
		int x = 1;
		int element_495 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		obj.remove(x);
	}

	@Test
	public void test_remove197() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = new BinaryNode();
		BinaryNode right_119 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode left_121 = null;
		BinaryNode right_122 = null;
		int element_117 = 0;
		int element_79 = 2;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 1;
		int element_114 = 1;
		int element_82 = -1;
		int element_83 = 0;
		int element_81 = -1;
		int element_6 = -2;
		int element_120 = -1;
		int element_77 = -2;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		left_118.element = element_120;
		left_118.left = left_121;
		left_118.right = right_122;
		obj.remove(x);
	}

	@Test
	public void test_remove198() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = new BinaryNode();
		BinaryNode left_259 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_211 = null;
		BinaryNode right_260 = null;
		int element_258 = 1;
		int element_79 = -2;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = -3;
		int element_114 = -2;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = -1;
		int element_6 = -3;
		int element_210 = -1;
		int element_77 = -3;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		right_212.element = element_258;
		right_212.left = left_259;
		right_212.right = right_260;
		obj.remove(x);
	}

	@Test
	public void test_remove199() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_7 = null;
		BinaryNode right_3 = null;
		BinaryNode left_115 = null;
		BinaryNode right_116 = null;
		int element_79 = -1;
		int element_1 = 0;
		int element_76 = 0;
		int element_78 = -1;
		int element_114 = -1;
		int element_6 = -2;
		int element_77 = -2;
		int element_80 = 0;
		int x = -2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		obj.remove(x);
	}

	@Test
	public void test_remove200() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = null;
		BinaryNode right_119 = null;
		BinaryNode right_3 = null;
		BinaryNode left_10 = null;
		BinaryNode right_11 = null;
		BinaryNode right_116 = null;
		int element_117 = 1;
		int element_79 = 0;
		int element_1 = 3;
		int element_76 = 3;
		int element_78 = -1;
		int element_114 = 2;
		int element_81 = 3;
		int element_6 = 0;
		int element_77 = -1;
		int element_80 = 2;
		int x = 0;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		obj.remove(x);
	}

	@Test
	public void test_remove201() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_305 = null;
		int element_77 = 0;
		int element_303 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int x = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		obj.remove(x);
	}

	@Test
	public void test_remove202() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = new BinaryNode();
		BinaryNode right_593 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_595 = null;
		BinaryNode right_596 = null;
		int element_591 = 3;
		int element_303 = 0;
		int element_79 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int element_82 = 2;
		int element_83 = 2;
		int element_81 = 1;
		int element_84 = 3;
		int element_594 = 2;
		int element_77 = -1;
		int element_80 = 1;
		int x = 3;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		left_592.element = element_594;
		left_592.left = left_595;
		left_592.right = right_596;
		obj.remove(x);
	}

	@Test
	public void test_remove203() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		int element_79 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_6 = 0;
		int element_77 = 0;
		int element_80 = 0;
		int x = -2;
		int element_9 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		obj.remove(x);
	}

	@Test
	public void test_remove204() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_89 = new BinaryNode();
		BinaryNode left_88 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_13 = null;
		BinaryNode right_14 = null;
		BinaryNode left_106 = null;
		BinaryNode right_107 = null;
		int element_79 = -4;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -2;
		int element_83 = -1;
		int element_12 = -4;
		int element_81 = -3;
		int element_6 = 0;
		int element_85 = 0;
		int element_84 = -1;
		int element_77 = 0;
		int element_87 = -2;
		int element_80 = -4;
		int element_105 = -1;
		int x = -3;
		int element_9 = -3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		right_89.element = element_105;
		right_89.left = left_106;
		right_89.right = right_107;
		obj.remove(x);
	}

	@Test
	public void test_remove205() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = new BinaryNode();
		BinaryNode left_451 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_403 = null;
		BinaryNode right_452 = null;
		int element_303 = 2;
		int element_79 = -2;
		int element_1 = -3;
		int element_306 = -2;
		int element_78 = -3;
		int element_402 = -1;
		int element_76 = -3;
		int element_81 = -1;
		int element_82 = 1;
		int element_83 = 2;
		int element_77 = 2;
		int element_80 = -2;
		int element_450 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		right_404.element = element_450;
		right_404.left = left_451;
		right_404.right = right_452;
		obj.remove(x);
	}

	@Test
	public void test_remove206() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode right_500 = new BinaryNode();
		BinaryNode right_548 = new BinaryNode();
		BinaryNode left_571 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode right_497 = null;
		BinaryNode left_499 = null;
		BinaryNode left_547 = null;
		BinaryNode right_572 = null;
		int element_303 = -3;
		int element_546 = -1;
		int element_79 = 2;
		int element_1 = -4;
		int element_76 = -4;
		int element_78 = -3;
		int element_82 = -2;
		int element_83 = -1;
		int element_85 = 2;
		int element_81 = -2;
		int element_84 = 1;
		int element_498 = -2;
		int element_77 = -4;
		int element_80 = -3;
		int element_570 = 1;
		int x = 0;
		int element_495 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		right_500.element = element_546;
		right_500.left = left_547;
		right_500.right = right_548;
		right_548.element = element_570;
		right_548.left = left_571;
		right_548.right = right_572;
		obj.remove(x);
	}

	@Test
	public void test_remove207() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = null;
		BinaryNode right_497 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		int element_77 = -1;
		int element_303 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int element_78 = 0;
		int x = 1;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		obj.remove(x);
	}

	@Test
	public void test_remove208() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode right_62 = new BinaryNode();
		BinaryNode left_61 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		BinaryNode left_85 = null;
		BinaryNode right_86 = null;
		int element_79 = 0;
		int element_1 = 2;
		int element_76 = 2;
		int element_78 = 2;
		int element_82 = -2;
		int element_83 = -1;
		int element_12 = -3;
		int element_81 = -3;
		int element_6 = 1;
		int element_85 = 0;
		int element_84 = -1;
		int element_77 = 1;
		int element_80 = 1;
		int element_60 = -2;
		int x = -2;
		int element_9 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_60;
		right_14.left = left_61;
		right_14.right = right_62;
		right_62.element = element_84;
		right_62.left = left_85;
		right_62.right = right_86;
		obj.remove(x);
	}

	@Test
	public void test_remove209() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = new BinaryNode();
		BinaryNode right_260 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_211 = null;
		BinaryNode left_259 = null;
		int element_258 = -1;
		int element_79 = -3;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -4;
		int element_114 = -3;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = -2;
		int element_6 = -4;
		int element_210 = -2;
		int element_77 = -4;
		int element_80 = -3;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		right_212.element = element_258;
		right_212.left = left_259;
		right_212.right = right_260;
		obj.remove(x);
	}

	@Test
	public void test_remove210() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = new BinaryNode();
		BinaryNode right_260 = new BinaryNode();
		BinaryNode right_284 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_211 = null;
		BinaryNode left_259 = null;
		BinaryNode left_283 = null;
		int element_258 = -2;
		int element_79 = -4;
		int element_1 = 1;
		int element_76 = 1;
		int element_114 = -4;
		int element_78 = -5;
		int element_82 = -3;
		int element_81 = -3;
		int element_6 = -5;
		int element_210 = -3;
		int element_83 = -2;
		int element_282 = -1;
		int element_77 = -5;
		int element_80 = -4;
		int element_84 = -2;
		int element_85 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		right_212.element = element_258;
		right_212.left = left_259;
		right_212.right = right_260;
		right_260.element = element_282;
		right_260.left = left_283;
		right_260.right = right_284;
		obj.remove(x);
	}

	@Test
	public void test_remove211() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = new BinaryNode();
		BinaryNode left_259 = null;
		BinaryNode right_260 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_211 = null;
		int element_258 = 0;
		int element_79 = -2;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -3;
		int element_114 = -2;
		int element_81 = -1;
		int element_6 = -3;
		int element_210 = -1;
		int element_77 = -3;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		right_212.element = element_258;
		right_212.left = left_259;
		right_212.right = right_260;
		obj.remove(x);
	}

	@Test
	public void test_remove212() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode right_14 = new BinaryNode();
		BinaryNode left_61 = new BinaryNode();
		BinaryNode left_64 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode left_13 = null;
		BinaryNode right_62 = null;
		BinaryNode right_65 = null;
		int element_79 = 3;
		int element_1 = 5;
		int element_76 = 5;
		int element_78 = 5;
		int element_82 = 2;
		int element_83 = 3;
		int element_12 = -1;
		int element_81 = -1;
		int element_6 = 4;
		int element_85 = 2;
		int element_84 = 1;
		int element_63 = 1;
		int element_77 = 4;
		int element_80 = 4;
		int element_60 = 2;
		int x = 0;
		int element_9 = 3;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		right_14.element = element_60;
		right_14.left = left_61;
		right_14.right = right_62;
		left_61.element = element_63;
		left_61.left = left_64;
		left_61.right = right_65;
		obj.remove(x);
	}

	@Test
	public void test_remove213() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		int element_77 = -1;
		int element_1 = 1;
		int element_76 = 1;
		int x = 0;
		int element_6 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		obj.remove(x);
	}

	@Test
	public void test_remove214() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = new BinaryNode();
		BinaryNode left_595 = new BinaryNode();
		BinaryNode right_596 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode right_593 = null;
		BinaryNode left_598 = null;
		BinaryNode right_599 = null;
		int element_591 = 3;
		int element_303 = -1;
		int element_79 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -1;
		int element_597 = 1;
		int element_82 = 0;
		int element_83 = 1;
		int element_81 = 3;
		int element_85 = 2;
		int element_84 = 1;
		int element_594 = 2;
		int element_77 = -2;
		int element_80 = 0;
		int x = 2;
		int element_495 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		left_592.element = element_594;
		left_592.left = left_595;
		left_592.right = right_596;
		left_595.element = element_597;
		left_595.left = left_598;
		left_595.right = right_599;
		obj.remove(x);
	}

	@Test
	public void test_remove215() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = null;
		int x = 0;
		obj.remove(x);
	}

	@Test
	public void test_remove216() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = new BinaryNode();
		BinaryNode right_311 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_313 = null;
		BinaryNode right_314 = null;
		int element_303 = 4;
		int element_79 = 4;
		int element_1 = 0;
		int element_306 = 3;
		int element_78 = 3;
		int element_76 = 0;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = 1;
		int element_77 = 4;
		int element_80 = 0;
		int element_312 = 1;
		int element_309 = 2;
		int x = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		left_310.element = element_312;
		left_310.left = left_313;
		left_310.right = right_314;
		obj.remove(x);
	}

	@Test
	public void test_remove217() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_496 = null;
		BinaryNode left_2 = null;
		BinaryNode left_307 = null;
		BinaryNode right_308 = null;
		BinaryNode left_592 = null;
		BinaryNode right_593 = null;
		int element_591 = 2;
		int element_303 = 0;
		int element_79 = -1;
		int element_1 = -2;
		int element_306 = -1;
		int element_76 = -2;
		int element_78 = -1;
		int element_82 = 2;
		int element_83 = 2;
		int element_81 = 1;
		int element_77 = -2;
		int element_80 = 0;
		int x = 0;
		int element_495 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		obj.remove(x);
	}

	@Test
	public void test_remove218() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode left_592 = new BinaryNode();
		BinaryNode left_595 = new BinaryNode();
		BinaryNode left_598 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode right_593 = null;
		BinaryNode right_596 = null;
		BinaryNode right_599 = null;
		int element_591 = 4;
		int element_303 = -1;
		int element_79 = -1;
		int element_1 = -2;
		int element_76 = -2;
		int element_78 = -1;
		int element_597 = 2;
		int element_82 = 3;
		int element_83 = 4;
		int element_81 = 4;
		int element_85 = 3;
		int element_84 = 2;
		int element_594 = 3;
		int element_77 = -2;
		int element_80 = 0;
		int x = 1;
		int element_495 = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		left_592.element = element_594;
		left_592.left = left_595;
		left_592.right = right_596;
		left_595.element = element_597;
		left_595.left = left_598;
		left_595.right = right_599;
		obj.remove(x);
	}

	@Test
	public void test_remove219() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode left_496 = new BinaryNode();
		BinaryNode left_499 = null;
		BinaryNode right_500 = null;
		BinaryNode left_2 = null;
		BinaryNode left_307 = null;
		BinaryNode right_308 = null;
		BinaryNode right_497 = null;
		int element_303 = 0;
		int element_79 = -1;
		int element_1 = -2;
		int element_306 = -1;
		int element_76 = -2;
		int element_78 = -1;
		int element_81 = 2;
		int element_498 = 1;
		int element_77 = -2;
		int element_80 = 0;
		int x = 0;
		int element_495 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		left_496.element = element_498;
		left_496.left = left_499;
		left_496.right = right_500;
		obj.remove(x);
	}

	@Test
	public void test_remove220() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode left_310 = null;
		BinaryNode right_311 = null;
		BinaryNode left_7 = null;
		BinaryNode right_8 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		int element_303 = 3;
		int element_79 = 3;
		int element_1 = 0;
		int element_76 = -1;
		int element_78 = 0;
		int element_306 = 2;
		int element_6 = -1;
		int element_81 = 3;
		int element_77 = -1;
		int element_80 = 2;
		int element_309 = 1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		obj.remove(x);
	}

	@Test
	public void test_remove221() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode right_116 = new BinaryNode();
		BinaryNode right_212 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode left_115 = null;
		BinaryNode left_211 = null;
		int element_79 = -2;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = -3;
		int element_114 = -2;
		int element_81 = -1;
		int element_6 = -3;
		int element_210 = -1;
		int element_77 = -3;
		int element_80 = -2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		right_116.element = element_210;
		right_116.left = left_211;
		right_116.right = right_212;
		obj.remove(x);
	}

	@Test
	public void test_remove222() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode left_10 = new BinaryNode();
		BinaryNode left_13 = new BinaryNode();
		BinaryNode right_17 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode right_11 = null;
		BinaryNode right_14 = null;
		BinaryNode left_16 = null;
		int element_79 = 2;
		int element_15 = -1;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 4;
		int element_82 = 2;
		int element_83 = -1;
		int element_12 = 1;
		int element_81 = 1;
		int element_6 = 3;
		int element_77 = 3;
		int element_80 = 3;
		int x = 0;
		int element_9 = 2;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		left_10.element = element_12;
		left_10.left = left_13;
		left_10.right = right_14;
		left_13.element = element_15;
		left_13.left = left_16;
		left_13.right = right_17;
		obj.remove(x);
	}

	@Test
	public void test_remove223() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = new BinaryNode();
		BinaryNode right_452 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_403 = null;
		BinaryNode left_451 = null;
		int element_303 = 1;
		int element_79 = -3;
		int element_1 = -4;
		int element_306 = -3;
		int element_78 = -4;
		int element_402 = -2;
		int element_76 = -4;
		int element_82 = -2;
		int element_81 = -2;
		int element_83 = -1;
		int element_77 = 1;
		int element_80 = -3;
		int element_450 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		right_404.element = element_450;
		right_404.left = left_451;
		right_404.right = right_452;
		obj.remove(x);
	}

	@Test
	public void test_remove224() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_89 = new BinaryNode();
		BinaryNode right_107 = new BinaryNode();
		BinaryNode left_106 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_88 = null;
		BinaryNode left_112 = null;
		BinaryNode right_113 = null;
		int element_79 = -4;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -2;
		int element_83 = -1;
		int element_81 = -3;
		int element_6 = 0;
		int element_85 = 0;
		int element_84 = -1;
		int element_111 = -1;
		int element_87 = -3;
		int element_77 = 0;
		int element_80 = -4;
		int element_105 = -2;
		int x = -2;
		int element_9 = -4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		right_89.element = element_105;
		right_89.left = left_106;
		right_89.right = right_107;
		right_107.element = element_111;
		right_107.left = left_112;
		right_107.right = right_113;
		obj.remove(x);
	}

	@Test
	public void test_remove225() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = new BinaryNode();
		BinaryNode left_358 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_310 = null;
		BinaryNode right_359 = null;
		int element_303 = 3;
		int element_79 = 3;
		int element_1 = -2;
		int element_306 = 2;
		int element_76 = -2;
		int element_78 = 2;
		int element_82 = 1;
		int element_83 = 2;
		int element_81 = -1;
		int element_77 = 3;
		int element_80 = -2;
		int element_357 = 1;
		int element_309 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_311.element = element_357;
		right_311.left = left_358;
		right_311.right = right_359;
		obj.remove(x);
	}

	@Test
	public void test_remove226() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = new BinaryNode();
		BinaryNode left_451 = new BinaryNode();
		BinaryNode right_452 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_403 = null;
		BinaryNode left_454 = null;
		BinaryNode right_455 = null;
		int element_303 = 1;
		int element_79 = -3;
		int element_1 = -4;
		int element_76 = -4;
		int element_78 = -4;
		int element_306 = -3;
		int element_402 = -2;
		int element_82 = -2;
		int element_81 = -2;
		int element_83 = -1;
		int element_84 = -1;
		int element_77 = 1;
		int element_80 = -3;
		int element_85 = 0;
		int element_450 = 0;
		int x = 0;
		int element_453 = -1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		right_404.element = element_450;
		right_404.left = left_451;
		right_404.right = right_452;
		left_451.element = element_453;
		left_451.left = left_454;
		left_451.right = right_455;
		obj.remove(x);
	}

	@Test
	public void test_remove227() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode left_7 = new BinaryNode();
		BinaryNode right_11 = new BinaryNode();
		BinaryNode right_89 = new BinaryNode();
		BinaryNode right_107 = null;
		BinaryNode right_3 = null;
		BinaryNode right_8 = null;
		BinaryNode left_10 = null;
		BinaryNode left_88 = null;
		BinaryNode left_106 = null;
		int element_79 = -4;
		int element_1 = 1;
		int element_76 = 1;
		int element_78 = 1;
		int element_82 = -3;
		int element_83 = -2;
		int element_81 = -3;
		int element_6 = 0;
		int element_77 = 0;
		int element_87 = -3;
		int element_80 = -4;
		int element_105 = -2;
		int x = -1;
		int element_9 = -4;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		left_7.element = element_9;
		left_7.left = left_10;
		left_7.right = right_11;
		right_11.element = element_87;
		right_11.left = left_88;
		right_11.right = right_89;
		right_89.element = element_105;
		right_89.left = left_106;
		right_89.right = right_107;
		obj.remove(x);
	}

	@Test
	public void test_remove228() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode left_307 = new BinaryNode();
		BinaryNode right_311 = new BinaryNode();
		BinaryNode right_359 = new BinaryNode();
		BinaryNode left_358 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode right_308 = null;
		BinaryNode left_310 = null;
		BinaryNode left_382 = null;
		BinaryNode right_383 = null;
		int element_303 = 3;
		int element_79 = 3;
		int element_1 = -2;
		int element_306 = 2;
		int element_76 = -2;
		int element_78 = 2;
		int element_82 = 0;
		int element_83 = 1;
		int element_81 = -1;
		int element_85 = 2;
		int element_84 = 1;
		int element_77 = 3;
		int element_80 = -2;
		int element_357 = 0;
		int element_309 = -1;
		int x = 0;
		int element_381 = 1;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		left_307.element = element_309;
		left_307.left = left_310;
		left_307.right = right_311;
		right_311.element = element_357;
		right_311.left = left_358;
		right_311.right = right_359;
		right_359.element = element_381;
		right_359.left = left_382;
		right_359.right = right_383;
		obj.remove(x);
	}

	@Test
	public void test_remove229() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode left_2 = new BinaryNode();
		BinaryNode right_8 = new BinaryNode();
		BinaryNode left_115 = new BinaryNode();
		BinaryNode left_118 = new BinaryNode();
		BinaryNode right_122 = new BinaryNode();
		BinaryNode left_145 = null;
		BinaryNode right_3 = null;
		BinaryNode left_7 = null;
		BinaryNode right_116 = null;
		BinaryNode right_119 = null;
		BinaryNode left_121 = null;
		BinaryNode right_146 = null;
		int element_117 = 2;
		int element_79 = 4;
		int element_1 = 4;
		int element_76 = 4;
		int element_78 = 3;
		int element_114 = 3;
		int element_82 = -2;
		int element_83 = -1;
		int element_144 = 1;
		int element_6 = -2;
		int element_81 = 3;
		int element_120 = -1;
		int element_77 = -2;
		int element_80 = 2;
		int element_84 = 1;
		int element_85 = 2;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		left_2.element = element_6;
		left_2.left = left_7;
		left_2.right = right_8;
		right_8.element = element_114;
		right_8.left = left_115;
		right_8.right = right_116;
		left_115.element = element_117;
		left_115.left = left_118;
		left_115.right = right_119;
		left_118.element = element_120;
		left_118.left = left_121;
		left_118.right = right_122;
		right_122.element = element_144;
		right_122.left = left_145;
		right_122.right = right_146;
		obj.remove(x);
	}

	@Test
	public void test_remove230() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = null;
		BinaryNode right_305 = null;
		BinaryNode left_2 = null;
		int element_303 = 0;
		int element_1 = -1;
		int element_76 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		obj.remove(x);
	}

	@Test
	public void test_remove231() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode left_304 = new BinaryNode();
		BinaryNode right_308 = new BinaryNode();
		BinaryNode right_404 = new BinaryNode();
		BinaryNode left_451 = null;
		BinaryNode right_452 = null;
		BinaryNode left_2 = null;
		BinaryNode right_305 = null;
		BinaryNode left_307 = null;
		BinaryNode left_403 = null;
		int element_303 = 1;
		int element_79 = -2;
		int element_1 = -3;
		int element_76 = -3;
		int element_78 = -3;
		int element_306 = -2;
		int element_402 = -1;
		int element_81 = -1;
		int element_77 = 1;
		int element_80 = -2;
		int element_450 = 0;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		left_304.element = element_306;
		left_304.left = left_307;
		left_304.right = right_308;
		right_308.element = element_402;
		right_308.left = left_403;
		right_308.right = right_404;
		right_404.element = element_450;
		right_404.left = left_451;
		right_404.right = right_452;
		obj.remove(x);
	}

	@Test
	public void test_remove232() throws Exception {
		BinarySearchTree obj = new BinarySearchTree();
		obj.root = new BinaryNode();
		BinaryNode right_3 = new BinaryNode();
		BinaryNode right_305 = new BinaryNode();
		BinaryNode right_497 = new BinaryNode();
		BinaryNode right_593 = new BinaryNode();
		BinaryNode right_641 = new BinaryNode();
		BinaryNode right_665 = null;
		BinaryNode left_2 = null;
		BinaryNode left_304 = null;
		BinaryNode left_496 = null;
		BinaryNode left_592 = null;
		BinaryNode left_640 = null;
		BinaryNode left_664 = null;
		int element_591 = -3;
		int element_663 = -1;
		int element_79 = -5;
		int element_83 = -3;
		int element_76 = -6;
		int element_78 = -5;
		int element_639 = -2;
		int element_81 = -4;
		int element_495 = -4;
		int element_303 = -5;
		int element_1 = -6;
		int element_82 = -3;
		int element_85 = -2;
		int element_84 = -2;
		int element_77 = -6;
		int element_80 = -4;
		int element_86 = -1;
		int x = 0;
		obj.root.element = element_1;
		obj.root.left = left_2;
		obj.root.right = right_3;
		right_3.element = element_303;
		right_3.left = left_304;
		right_3.right = right_305;
		right_305.element = element_495;
		right_305.left = left_496;
		right_305.right = right_497;
		right_497.element = element_591;
		right_497.left = left_592;
		right_497.right = right_593;
		right_593.element = element_639;
		right_593.left = left_640;
		right_593.right = right_641;
		right_641.element = element_663;
		right_641.left = left_664;
		right_641.right = right_665;
		obj.remove(x);
	}

}

